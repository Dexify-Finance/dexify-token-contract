{
  "address": "0x831a721007308E45e66496Ea78203d35c5AcD309",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dragonNFTAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "uint256[2][7][4][5]",
          "name": "_stateRanges",
          "type": "uint256[2][7][4][5]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_LEVEL",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_LEVEL",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelHatchEgg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelUpgradeSpecial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelUpgradeState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dragonNFTAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "durationForHatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feeForUpgradeSpecial",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feeForUpgradeState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "hatchEgg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingDurationForSpecialSkill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingDurationForState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingToUpgradeInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "requestHatchEgg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "requestUpgradeSpecial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum DragonBasic.Stat[]",
          "name": "keys",
          "type": "uint8[]"
        }
      ],
      "name": "requestUpgradeState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[5]",
          "name": "fees",
          "type": "uint256[5]"
        }
      ],
      "name": "setFeeForUpgradeSpecial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[9]",
          "name": "fees",
          "type": "uint256[9]"
        }
      ],
      "name": "setFeeForUpgradeState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DragonBasic.Age",
          "name": "age",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setLimitStatForAge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setNFTAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "setPendingDurationForDragon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[5]",
          "name": "durations",
          "type": "uint256[5]"
        }
      ],
      "name": "setPendingDurationForSpecial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[9]",
          "name": "durations",
          "type": "uint256[9]"
        }
      ],
      "name": "setPendingDurationForState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DragonBasic.DragonType",
          "name": "species",
          "type": "uint8"
        },
        {
          "internalType": "enum DragonBasic.RarityType",
          "name": "rarity",
          "type": "uint8"
        },
        {
          "internalType": "enum DragonBasic.Stat",
          "name": "stat",
          "type": "uint8"
        },
        {
          "internalType": "uint256[2]",
          "name": "value",
          "type": "uint256[2]"
        }
      ],
      "name": "setStatRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "updateDragonName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "upgradeSpecialSkill",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "upgradeState",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "verifySigner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2e99dbe9394d452c6791044018c51daf2676e41e01feff589f12969ac723bacf",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x831a721007308E45e66496Ea78203d35c5AcD309",
    "transactionIndex": 0,
    "gasUsed": "9521908",
    "logsBloom": "0x
    "blockHash": "0x288719fc71c82eb2cfd5654906367096c26091ecb5731d4187c41259275503bd",
    "transactionHash": "0x2e99dbe9394d452c6791044018c51daf2676e41e01feff589f12969ac723bacf",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 29959383,
        "transactionHash": "0x2e99dbe9394d452c6791044018c51daf2676e41e01feff589f12969ac723bacf",
        "address": "0x831a721007308E45e66496Ea78203d35c5AcD309",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x288719fc71c82eb2cfd5654906367096c26091ecb5731d4187c41259275503bd"
      }
    ],
    "blockNumber": 29959383,
    "cumulativeGasUsed": "9521908",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x80C96D73e71798bD074899DaA7Ba8F710feA3579",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    [
      [
        [
          [
            1,
            4
          ],
          [
            2,
            7
          ],
          [
            1,
            3
          ],
          [
            1,
            5
          ],
          [
            1,
            5
          ],
          [
            1,
            4
          ],
          [
            1,
            2
          ]
        ],
        [
          [
            1,
            4
          ],
          [
            2,
            8
          ],
          [
            1,
            3
          ],
          [
            1,
            6
          ],
          [
            1,
            5
          ],
          [
            1,
            5
          ],
          [
            1,
            3
          ]
        ],
        [
          [
            1,
            5
          ],
          [
            3,
            9
          ],
          [
            1,
            3
          ],
          [
            2,
            7
          ],
          [
            2,
            6
          ],
          [
            2,
            6
          ],
          [
            1,
            4
          ]
        ],
        [
          [
            2,
            6
          ],
          [
            3,
            10
          ],
          [
            1,
            3
          ],
          [
            3,
            8
          ],
          [
            2,
            7
          ],
          [
            2,
            7
          ],
          [
            1,
            5
          ]
        ]
      ],
      [
        [
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            7
          ],
          [
            1,
            5
          ],
          [
            1,
            3
          ],
          [
            1,
            5
          ],
          [
            1,
            3
          ]
        ],
        [
          [
            1,
            4
          ],
          [
            1,
            4
          ],
          [
            2,
            8
          ],
          [
            1,
            5
          ],
          [
            1,
            3
          ],
          [
            1,
            5
          ],
          [
            1,
            3
          ]
        ],
        [
          [
            1,
            4
          ],
          [
            1,
            4
          ],
          [
            3,
            9
          ],
          [
            2,
            6
          ],
          [
            1,
            4
          ],
          [
            2,
            6
          ],
          [
            1,
            4
          ]
        ],
        [
          [
            2,
            5
          ],
          [
            2,
            5
          ],
          [
            3,
            10
          ],
          [
            2,
            7
          ],
          [
            1,
            4
          ],
          [
            2,
            6
          ],
          [
            2,
            5
          ]
        ]
      ],
      [
        [
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            7
          ],
          [
            2,
            7
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ]
        ],
        [
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            8
          ],
          [
            2,
            8
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ]
        ],
        [
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            3,
            9
          ],
          [
            2,
            9
          ],
          [
            1,
            4
          ],
          [
            1,
            3
          ]
        ],
        [
          [
            2,
            4
          ],
          [
            2,
            4
          ],
          [
            1,
            3
          ],
          [
            3,
            10
          ],
          [
            3,
            10
          ],
          [
            2,
            4
          ],
          [
            1,
            3
          ]
        ]
      ],
      [
        [
          [
            2,
            6
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            4
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            6
          ]
        ],
        [
          [
            2,
            7
          ],
          [
            1,
            3
          ],
          [
            1,
            4
          ],
          [
            1,
            5
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            7
          ]
        ],
        [
          [
            2,
            8
          ],
          [
            1,
            3
          ],
          [
            2,
            5
          ],
          [
            2,
            6
          ],
          [
            1,
            4
          ],
          [
            1,
            3
          ],
          [
            3,
            8
          ]
        ],
        [
          [
            3,
            9
          ],
          [
            1,
            3
          ],
          [
            2,
            6
          ],
          [
            2,
            7
          ],
          [
            2,
            5
          ],
          [
            1,
            3
          ],
          [
            3,
            9
          ]
        ]
      ],
      [
        [
          [
            1,
            7
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            7
          ]
        ],
        [
          [
            2,
            8
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            8
          ]
        ],
        [
          [
            3,
            9
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            4
          ],
          [
            1,
            3
          ],
          [
            3,
            9
          ]
        ],
        [
          [
            3,
            10
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            5
          ],
          [
            1,
            3
          ],
          [
            3,
            10
          ]
        ]
      ]
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "b474e0d835221309c977257c7f754341",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dragonNFTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"uint256[2][7][4][5]\",\"name\":\"_stateRanges\",\"type\":\"uint256[2][7][4][5]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelHatchEgg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelUpgradeSpecial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelUpgradeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dragonNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationForHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeForUpgradeSpecial\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeForUpgradeState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"hatchEgg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingDurationForSpecialSkill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingDurationForState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingToUpgradeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"requestHatchEgg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"requestUpgradeSpecial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum DragonBasic.Stat[]\",\"name\":\"keys\",\"type\":\"uint8[]\"}],\"name\":\"requestUpgradeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"fees\",\"type\":\"uint256[5]\"}],\"name\":\"setFeeForUpgradeSpecial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[9]\",\"name\":\"fees\",\"type\":\"uint256[9]\"}],\"name\":\"setFeeForUpgradeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DragonBasic.Age\",\"name\":\"age\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLimitStatForAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setPendingDurationForDragon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"durations\",\"type\":\"uint256[5]\"}],\"name\":\"setPendingDurationForSpecial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[9]\",\"name\":\"durations\",\"type\":\"uint256[9]\"}],\"name\":\"setPendingDurationForState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DragonBasic.DragonType\",\"name\":\"species\",\"type\":\"uint8\"},{\"internalType\":\"enum DragonBasic.RarityType\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"enum DragonBasic.Stat\",\"name\":\"stat\",\"type\":\"uint8\"},{\"internalType\":\"uint256[2]\",\"name\":\"value\",\"type\":\"uint256[2]\"}],\"name\":\"setStatRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"updateDragonName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"upgradeSpecialSkill\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"upgradeState\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"verifySigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DragonUpdateManager.sol\":\"DragonUpdateManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Dragon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./interface/ERC721A.sol\\\";\\r\\nimport \\\"./interface/DragonBasic.sol\\\";\\r\\n/**************************************************\\r\\n * Dragon NFT\\r\\n *\\r\\n * Created for Pyre by: Patrick Kishi\\r\\n * Audited by: Jill\\r\\n * Special thanks goes to: Jill\\r\\n ***************************************************\\r\\n */\\r\\n\\r\\ncontract Dragon is ERC721A, DragonBasic, Ownable, ReentrancyGuard {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Token URI. Token uri is different based on DragonType, Age and Gender\\r\\n    string[2][3][5] private tokenUris;\\r\\n    string[4] private eggUris;\\r\\n\\r\\n    // Min & Max level\\r\\n    uint8 public constant MIN_LEVEL = 1;\\r\\n    uint8 public constant MAX_LEVEL = 10;\\r\\n\\r\\n    // \\r\\n    uint public AdolescentAge = 2 days;\\r\\n    uint public AdultAge = 5 days;\\r\\n\\r\\n    // minters & updaters\\r\\n    mapping(address => bool) private minters;\\r\\n    mapping(address => bool) private updaters;\\r\\n\\r\\n    // DragonData token ID => data\\r\\n    mapping(uint => DragonData) private dragonInfo;\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(minters[msg.sender], \\\"Caller is not minter.\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyUpdater() {\\r\\n        require(updaters[msg.sender], \\\"Caller should be updater.\\\");\\r\\n        _;\\r\\n    }\\r\\n   \\r\\n    /**\\r\\n        @param maxBatchSize_ Max size for ERC721A batch mint.\\r\\n        @param collectionSize_ NFT collection size\\r\\n        @param _tokenUris Dragon metadata uris\\r\\n        @param _eggUris egg metadata uris\\r\\n    */\\r\\n    constructor(\\r\\n        uint16 maxBatchSize_,\\r\\n        uint16 collectionSize_,\\r\\n        string[2][3][5] memory _tokenUris,\\r\\n        string[4] memory _eggUris,\\r\\n        uint[2][7][4][5] memory _stateRanges\\r\\n    ) ERC721A(\\\"Pyre-Dragon\\\", \\\"Dragon\\\", maxBatchSize_, collectionSize_) DragonBasic(){\\r\\n        tokenUris = _tokenUris;\\r\\n        eggUris = _eggUris;\\r\\n        stateRanges = _stateRanges;\\r\\n    }\\r\\n\\r\\n    function getSum(uint _tokenId) internal view returns(uint sum) {\\r\\n        require(_exists(_tokenId), \\\"Not exists token.\\\");\\r\\n\\r\\n        DragonData memory dragon = dragonInfo[_tokenId];\\r\\n        sum = 0;\\r\\n        for (uint i = 0 ; i < dragon.ability.length ; i ++) {\\r\\n            sum += dragon.ability[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAge(uint _tokenId) public view returns(Age) {\\r\\n        require(_exists(_tokenId), \\\"Not exist NFT.\\\");\\r\\n        DragonData memory dragon = dragonInfo[_tokenId];\\r\\n        if (!dragon.isDragon) return Age.Egg;\\r\\n\\r\\n        uint age = block.timestamp - dragon.birthday;\\r\\n        if (age >= AdultAge) return Age.Adult;\\r\\n        if (age >= AdolescentAge) return Age.Adolescent;\\r\\n        return Age.Hatchling;\\r\\n    }\\r\\n\\r\\n    function random() private view returns (uint) {\\r\\n        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, totalSupply())));\\r\\n    }\\r\\n\\r\\n    function setDragonIndividualAbility(uint _tokenId, Stat key, uint value) external onlyUpdater {\\r\\n        require(_exists(_tokenId), \\\"Not exist NFT.\\\");\\r\\n\\r\\n        Age age = getAge(_tokenId);\\r\\n\\r\\n        require(value >= MIN_LEVEL && value <= ageLimitInfo[age], \\\"Invalid value.\\\");\\r\\n        \\r\\n        DragonData storage dragon = dragonInfo[_tokenId];\\r\\n        uint[7] storage data = dragon.ability;\\r\\n        data[uint(key)] = value;\\r\\n    }\\r\\n\\r\\n    function upgradeDragonStat(uint _tokenId, Stat key, uint delta) external onlyUpdater {\\r\\n        require(_exists(_tokenId), \\\"Not exist NFT.\\\");\\r\\n        require(isHatched(_tokenId), \\\"Dragon should be hatched first.\\\");\\r\\n\\r\\n        DragonData storage data = dragonInfo[_tokenId];\\r\\n        uint[7] storage ability = data.ability;\\r\\n\\r\\n        uint value = ability[uint(key)] + delta;\\r\\n        require(value >= MIN_LEVEL && value <= ageLimitInfo[getAge(_tokenId)], \\\"Invalid value.\\\");\\r\\n\\r\\n        ability[uint(key)] = value;\\r\\n    }\\r\\n\\r\\n    function upgradeSpecialSkill(uint _tokenId) external onlyUpdater {\\r\\n        require(_exists(_tokenId), \\\"Not exists.\\\");\\r\\n        require(isHatched(_tokenId), \\\"Dragon should be hatched first.\\\");\\r\\n\\r\\n        DragonData storage dragon = dragonInfo[_tokenId];\\r\\n        require(dragon.rarity == RarityType.Rare || dragon.rarity == RarityType.Legendary, \\\"Only Rare and Legendary can have special skill.\\\");\\r\\n        require(getAge(_tokenId) != Age.Adult, \\\"Cannot upgrade special skill at Adult age.\\\");\\r\\n        require(dragon.specialPoint < 5, \\\"You already reached to max.\\\");\\r\\n        dragon.specialPoint ++;\\r\\n    }\\r\\n\\r\\n    function hasSpecial(uint _tokenId) external view returns(bool) {\\r\\n        require(_exists(_tokenId), \\\"Not exists.\\\");\\r\\n        DragonData memory dragon = dragonInfo[_tokenId];\\r\\n        return dragon.specialPoint == 5;\\r\\n    }\\r\\n\\r\\n    function generateRarity(uint randomNumber) internal pure returns(RarityType) {\\r\\n        uint number = randomNumber % 100;\\r\\n        if (number < 50) {\\r\\n            return RarityType.Common;\\r\\n        } else if (number >= 50 && number < 80) {\\r\\n            return RarityType.Uncommon;\\r\\n        } else if (number >= 80 && number < 95) {\\r\\n            return RarityType.Rare;\\r\\n        } else {\\r\\n            return RarityType.Legendary;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function generateDragonType(uint randomNumber) internal pure returns(DragonType) {\\r\\n        uint number = randomNumber % 5;\\r\\n        return indexToType(number);\\r\\n    }\\r\\n\\r\\n    function generateGender(uint randomNumber) internal pure returns(Gender) {\\r\\n        return randomNumber % 1000 <= 995 ? Gender.MALE : Gender.FEMALE; \\r\\n    }\\r\\n\\r\\n    function hatchEgg(uint tokenId) external onlyUpdater {\\r\\n        require(!isHatched(tokenId), \\\"Already hatched\\\");\\r\\n\\r\\n        DragonData storage dragon = dragonInfo[tokenId];\\r\\n        \\r\\n        dragon.isDragon = true;\\r\\n        dragon.birthday = block.timestamp;\\r\\n       \\r\\n        for (uint i = 0; i < 7 ; i ++) {\\r\\n            dragon.ability[i] = stateRanges[uint(dragon.species)][uint(dragon.rarity)][i][0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isHatched(uint tokenId) public view returns(bool) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        DragonData memory dragon = dragonInfo[tokenId];\\r\\n        return dragon.isDragon;\\r\\n    }\\r\\n\\r\\n    function getDragon(uint tokenId) public view returns(DragonData memory) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return dragonInfo[tokenId];\\r\\n    }\\r\\n\\r\\n    function getIndividualDragonState(uint _tokenId, Stat key) external view returns(uint) {\\r\\n        require(_exists(_tokenId), \\\"Not exist NFT.\\\");\\r\\n\\r\\n        DragonData memory dragon = dragonInfo[_tokenId];\\r\\n        return dragon.ability[uint(key)];\\r\\n    }\\r\\n\\r\\n    function mintNFT(\\r\\n        address to,\\r\\n        uint8 quantity,\\r\\n        string[] memory names\\r\\n    )\\r\\n        external\\r\\n        nonReentrant\\r\\n        onlyMinter\\r\\n    {\\r\\n        require(totalSupply() + quantity <= collectionSize, \\\"Exceeds Max Supply\\\");\\r\\n        require(quantity == names.length, \\\"Not match array size.\\\");\\r\\n\\r\\n        uint currentSupply = totalSupply();\\r\\n\\r\\n        _safeMint(to, quantity);\\r\\n\\r\\n        for (uint i = 0 ; i < quantity ; i ++) {\\r\\n            uint randomNumber = random();\\r\\n\\r\\n            DragonType dragonType = generateDragonType(randomNumber);\\r\\n            Gender gender = generateGender(randomNumber); \\r\\n            RarityType rarity = generateRarity(randomNumber);\\r\\n\\r\\n            DragonData storage dragon = dragonInfo[currentSupply + i];\\r\\n            dragon.rarity = rarity;\\r\\n            dragon.species = dragonType;\\r\\n            dragon.gender = gender;\\r\\n            dragon.name = names[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function breeding(\\r\\n        address to,\\r\\n        uint fatherTokenId,\\r\\n        uint motherTokenId\\r\\n    )   \\r\\n        external\\r\\n        nonReentrant\\r\\n        onlyMinter\\r\\n    {\\r\\n        require(_exists(fatherTokenId), \\\"Not exists father.\\\");\\r\\n        require(_exists(motherTokenId), \\\"Not exists mother.\\\");\\r\\n\\r\\n        uint rn = random();\\r\\n        uint quantity = (rn % 100) == 99 ? 2 : 1; // 1% => 2, 99% => 1\\r\\n        uint restAmount = collectionSize - totalSupply();\\r\\n        require(restAmount > 0, \\\"Exceeds Max Supply.\\\");\\r\\n\\r\\n        quantity = quantity > restAmount ? restAmount : quantity;\\r\\n        uint currentSupply = totalSupply();\\r\\n\\r\\n        _safeMint(to, quantity);\\r\\n\\r\\n        DragonData memory father = dragonInfo[fatherTokenId];\\r\\n        DragonData storage mother = dragonInfo[motherTokenId];\\r\\n\\r\\n        for (uint i = 0 ; i < quantity ; i ++) {\\r\\n            uint randomNumber = random();\\r\\n\\r\\n            Gender gender = generateGender(randomNumber); \\r\\n            RarityType rarity = generateRarity(randomNumber);\\r\\n\\r\\n            DragonData storage dragon = dragonInfo[currentSupply + i];\\r\\n            dragon.rarity = rarity;\\r\\n            dragon.species = randomNumber > 50 ? father.species : mother.species;\\r\\n            dragon.gender = gender;\\r\\n            dragon.father = fatherTokenId;\\r\\n            dragon.mother = motherTokenId;\\r\\n            dragon.name = \\\"Breed\\\";\\r\\n        }\\r\\n        mother.lastBreed = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        DragonData memory dragon = dragonInfo[tokenId];\\r\\n\\r\\n        if (!dragon.isDragon) {\\r\\n            return eggUris[uint(dragon.rarity)];\\r\\n        }\\r\\n\\r\\n        return tokenUris[uint(dragon.species)][uint(getAge(tokenId))][uint(dragon.gender)];\\r\\n    }\\r\\n    function updateName(uint _tokenId, string memory name) external onlyUpdater {\\r\\n        require(_exists(_tokenId), \\\"Not exists token\\\");\\r\\n        DragonData storage dragon = dragonInfo[_tokenId];\\r\\n        dragon.name = name;\\r\\n    }\\r\\n\\r\\n    // Admin actions\\r\\n    function setTokenUris(string[2][3][5] memory _tokenUris) external onlyOwner {\\r\\n        tokenUris = _tokenUris;\\r\\n    }\\r\\n\\r\\n    function setEggUris(string[4] memory _eggUris) external onlyOwner {\\r\\n            eggUris = _eggUris;\\r\\n    }\\r\\n    \\r\\n    function addMinter(address _address) external onlyOwner {\\r\\n        require(!minters[_address], \\\"Already minter.\\\");\\r\\n        minters[_address] = true;\\r\\n    }\\r\\n    function addUpdater(address _address) external onlyOwner {\\r\\n        require(!updaters[_address], \\\"Already updater.\\\");\\r\\n        updaters[_address] = true;\\r\\n    }\\r\\n\\r\\n    function removeMinter (address _address) external onlyOwner {\\r\\n        require(minters[_address], \\\"Already removed.\\\");\\r\\n        minters[_address] = false;\\r\\n    }\\r\\n    function removeupdater(address _address) external onlyOwner {\\r\\n        require(updaters[_address], \\\"Already removed.\\\");\\r\\n        updaters[_address] = false;\\r\\n    }\\r\\n    \\r\\n    function setStatRange(DragonType dragonType, RarityType rarity, Stat stat, uint[2] memory value) external onlyOwner{\\r\\n        require(value[1] <= MAX_LEVEL && value[0] >= MIN_LEVEL, \\\"Invalid value\\\");\\r\\n        stateRanges[uint(dragonType)][uint(rarity)][uint(stat)] = value;\\r\\n    }\\r\\n    function setLimitStatForAge(Age age, uint value) external onlyOwner {\\r\\n        require(value <= MAX_LEVEL, \\\"Invalid value\\\");\\r\\n        ageLimitInfo[age] = value;\\r\\n    }\\r\\n\\r\\n    // utility functions\\r\\n    function numberMinted(address owner) public view returns (uint256) {\\r\\n        return _numberMinted(owner);\\r\\n    }\\r\\n\\r\\n    function getOwnershipData(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (TokenOwnership memory)\\r\\n    {\\r\\n        return ownershipOf(tokenId);\\r\\n    }\\r\\n\\r\\n    function isExist(uint tokenId) external view returns(bool) {\\r\\n        return _exists(tokenId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2846e496ca246ecdaeba780c4110af9ea3bc49c0092ca9b86e8fe89ed26d1527\",\"license\":\"MIT\"},\"contracts/DragonUpdateManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"./Dragon.sol\\\";\\r\\n\\r\\ncontract DragonUpdateManager is Ownable, DragonBasic {\\r\\n    struct PendingToDragon {\\r\\n        address owner;\\r\\n        uint startAt;\\r\\n        bool pending;\\r\\n    }\\r\\n\\r\\n    struct PendingToUpgradeSpecial {\\r\\n        address owner;\\r\\n        uint startAt;\\r\\n        bool pending;\\r\\n    }\\r\\n\\r\\n    struct PendingToUpgradeState {\\r\\n        address owner;\\r\\n        Stat[] stats;\\r\\n        uint startAt;\\r\\n        bool pending;\\r\\n        uint fee;\\r\\n        uint duration;\\r\\n    }\\r\\n\\r\\n    // sale signer\\r\\n    address public signer;\\r\\n\\r\\n    // Avatar NFT address\\r\\n    address public dragonNFTAddress;\\r\\n\\r\\n    // Pending to upgrade states.\\r\\n    mapping(uint => PendingToUpgradeState) public pendingToUpgradeInfo;\\r\\n    // duration for upgrading states;\\r\\n    uint[9] public pendingDurationForState = \\r\\n        [ 1 days, 1 days, 1 days, 1 days, 1 days, 1 days, 2 days, 3 days, 4 days]; // level is between 1 and 10, so need 9 of duration values.\\r\\n    // fee for upgrading states;\\r\\n    uint[9] public feeForUpgradeState = [\\r\\n        0, 0, 0, 0, 0, 0, 5 ether, 10 ether, 15 ether\\r\\n    ];\\r\\n    // duration for upgrading special skill\\r\\n    uint[5] public pendingDurationForSpecialSkill = [\\r\\n        1 days, 1 days, 1 days, 1 days, 2 days\\r\\n    ]; // level 0 ~ 5\\r\\n    uint[5] public feeForUpgradeSpecial = [\\r\\n        0, 0, 0, 10 ether, 20 ether\\r\\n    ]; // level 0 ~ 5\\r\\n\\r\\n    // Pending to Dragon\\r\\n    mapping(uint => PendingToDragon) pendingToDragonInfo;\\r\\n    uint public durationForHatch = 3 days;\\r\\n\\r\\n    uint8 public constant MIN_LEVEL = 1;\\r\\n    uint8 public constant MAX_LEVEL = 10;\\r\\n\\r\\n    // pending to upgrade special skill\\r\\n    mapping(uint => PendingToUpgradeSpecial) pendingToUpgradeSpecial;\\r\\n\\r\\n    constructor(address _dragonNFTAddress, address _signer, uint[2][7][4][5] memory _stateRanges) DragonBasic() {\\r\\n        dragonNFTAddress = _dragonNFTAddress;\\r\\n        signer = _signer;\\r\\n        stateRanges = _stateRanges;\\r\\n    }\\r\\n\\r\\n    // Request for Egg => Dragon, Lock NFT to this contract.\\r\\n    function requestHatchEgg(uint tokenId) external {\\r\\n        require(Dragon(dragonNFTAddress).ownerOf(tokenId) == msg.sender, \\\"You are not owner of this token.\\\");\\r\\n        require(!Dragon(dragonNFTAddress).isHatched(tokenId), \\\"Already dragon.\\\");\\r\\n\\r\\n        Dragon(dragonNFTAddress).transferFrom(msg.sender, address(this), tokenId);\\r\\n\\r\\n        PendingToDragon storage data = pendingToDragonInfo[tokenId];\\r\\n        data.owner = msg.sender;\\r\\n        data.pending = true;\\r\\n        data.startAt = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // Finalize to upgrade to Dragon.\\r\\n    function hatchEgg(uint tokenId, bytes calldata signature) external {\\r\\n        require(verifySigner(signature, signer), \\\"Invalid Signature.\\\");\\r\\n\\r\\n        PendingToDragon storage data = pendingToDragonInfo[tokenId];\\r\\n        require(data.owner == msg.sender, \\\"You are not NFT owner.\\\");\\r\\n        require(data.pending, \\\"Should be pending first.\\\");\\r\\n        require(block.timestamp >= data.startAt + durationForHatch, \\\"Not available now.\\\");\\r\\n\\r\\n        Dragon(dragonNFTAddress).transferFrom(address(this), msg.sender, tokenId);\\r\\n        Dragon(dragonNFTAddress).hatchEgg(tokenId);\\r\\n\\r\\n        data.pending = false;\\r\\n    }\\r\\n\\r\\n    // Cancel upgrade\\r\\n    function cancelHatchEgg(uint tokenId) external {\\r\\n        PendingToDragon storage data = pendingToDragonInfo[tokenId];\\r\\n        require(data.owner == msg.sender, \\\"You are not NFT owner.\\\");\\r\\n        require(data.pending, \\\"You didn't request.\\\");\\r\\n\\r\\n        Dragon(dragonNFTAddress).transferFrom(address(this), msg.sender, tokenId);\\r\\n        data.owner = address(0);\\r\\n        data.pending = false;\\r\\n        data.startAt = 0;\\r\\n    }\\r\\n\\r\\n    // Request upgrade state\\r\\n    function requestUpgradeState(uint tokenId, Stat[] memory keys) public {\\r\\n        require(Dragon(dragonNFTAddress).ownerOf(tokenId) == msg.sender, \\\"You are not owner of this token.\\\");\\r\\n        require(Dragon(dragonNFTAddress).isHatched(tokenId), \\\"Dragon should be hatched first.\\\");\\r\\n\\r\\n        PendingToUpgradeState storage data = pendingToUpgradeInfo[tokenId];\\r\\n        require(!data.pending, \\\"Already requested.\\\");\\r\\n        \\r\\n        DragonData memory dragon = Dragon(dragonNFTAddress).getDragon(tokenId);\\r\\n\\r\\n        bool upgradable = false;\\r\\n        uint duration = 0;\\r\\n        uint fee = 0;\\r\\n        uint index = 0;\\r\\n\\r\\n        Stat[] memory stats = new Stat[](keys.length);\\r\\n        for (uint i = 0; i < keys.length; i ++) {\\r\\n            uint currentValue = Dragon(dragonNFTAddress).getIndividualDragonState(tokenId, keys[i]);\\r\\n            Age age = Dragon(dragonNFTAddress).getAge(tokenId);\\r\\n\\r\\n            uint[2] memory stateRange =  stateRanges[uint(dragon.species)][uint(dragon.rarity)][uint(keys[i])];\\r\\n\\r\\n            if (currentValue < ageLimitInfo[age] && currentValue < stateRange[1]) {\\r\\n                upgradable = true;\\r\\n                duration += pendingDurationForState[currentValue - 1];\\r\\n                fee += feeForUpgradeState[currentValue - 1];\\r\\n                stats[index] = keys[i];\\r\\n                index ++;\\r\\n            }\\r\\n        }\\r\\n        require(upgradable, \\\"No stat can be upgradable.\\\");\\r\\n\\r\\n        Dragon(dragonNFTAddress).transferFrom(msg.sender, address(this), tokenId);\\r\\n    \\r\\n        data.owner = msg.sender;\\r\\n        data.pending = true;\\r\\n        data.startAt = block.timestamp;\\r\\n        data.stats = stats;\\r\\n        data.fee = fee;\\r\\n        data.duration = duration;\\r\\n    }\\r\\n\\r\\n    // Request upgrade state\\r\\n    function upgradeState(\\r\\n        uint tokenId,\\r\\n        bytes calldata signature\\r\\n    ) external payable {\\r\\n\\r\\n        require(verifySigner(signature, signer), \\\"Invalid Signature.\\\");\\r\\n        require(Dragon(dragonNFTAddress).isExist(tokenId), \\\"Not exists Token.\\\");\\r\\n\\r\\n        PendingToUpgradeState storage data = pendingToUpgradeInfo[tokenId];\\r\\n\\r\\n        require(data.owner == msg.sender, \\\"You are not NFT owner.\\\");\\r\\n        require(data.pending, \\\"You need to request first.\\\");\\r\\n\\r\\n\\r\\n        refundIfOver(data.fee);\\r\\n\\r\\n        require(block.timestamp >= data.startAt + data.duration, \\\"Not available now.\\\");\\r\\n\\r\\n        Dragon(dragonNFTAddress).transferFrom(address(this), msg.sender, tokenId);\\r\\n\\r\\n        for (uint i = 0; i < data.stats.length ; i ++ ) {\\r\\n            Dragon(dragonNFTAddress).upgradeDragonStat(tokenId, data.stats[i], 1);\\r\\n        }\\r\\n\\r\\n        data.pending = false;\\r\\n        data.startAt = 0;\\r\\n        data.owner = address(0);\\r\\n        data.duration = 0;\\r\\n        data.fee = 0;\\r\\n    }\\r\\n\\r\\n    function requestUpgradeSpecial(\\r\\n        uint tokenId,\\r\\n        bytes calldata signature\\r\\n    ) external {\\r\\n        require(verifySigner(signature, msg.sender), \\\"Invalid signature\\\");\\r\\n        require(!Dragon(dragonNFTAddress).hasSpecial(tokenId), \\\"Already upgraded to special.\\\");\\r\\n\\r\\n        PendingToUpgradeSpecial storage pendingSpecial = pendingToUpgradeSpecial[tokenId];\\r\\n        require(!pendingSpecial.pending, \\\"Already pending\\\");\\r\\n\\r\\n        pendingSpecial.pending = true;\\r\\n        pendingSpecial.owner = msg.sender;\\r\\n        pendingSpecial.startAt = block.timestamp;\\r\\n\\r\\n        Dragon(dragonNFTAddress).transferFrom(msg.sender, address(this), tokenId);\\r\\n    }\\r\\n\\r\\n    function upgradeSpecialSkill (\\r\\n        uint tokenId,\\r\\n        bytes calldata signature\\r\\n    ) external payable {\\r\\n        require(verifySigner(signature, signer), \\\"Invalid Signature.\\\");\\r\\n        PendingToUpgradeSpecial storage data = pendingToUpgradeSpecial[tokenId];\\r\\n\\r\\n        require(data.owner == msg.sender, \\\"You are not NFT owner.\\\");\\r\\n        require(data.pending, \\\"Should be pending first.\\\");\\r\\n\\r\\n        DragonData memory dragon = Dragon(dragonNFTAddress).getDragon(tokenId);\\r\\n        \\r\\n        uint currentValue = dragon.specialPoint;\\r\\n        uint pendingPeriod = pendingDurationForSpecialSkill[currentValue];\\r\\n        uint fee = feeForUpgradeSpecial[currentValue];\\r\\n\\r\\n        refundIfOver(fee);\\r\\n        require(block.timestamp >= data.startAt + pendingPeriod, \\\"Not available now.\\\");\\r\\n\\r\\n        data.pending = false;\\r\\n        data.startAt = 0;\\r\\n        data.owner = address(0);\\r\\n\\r\\n        Dragon(dragonNFTAddress).upgradeSpecialSkill(tokenId);\\r\\n        Dragon(dragonNFTAddress).transferFrom(address(this), msg.sender, tokenId);\\r\\n    }\\r\\n\\r\\n    // Cancel upgrade\\r\\n    function cancelUpgradeState(uint tokenId) external {\\r\\n        PendingToUpgradeState storage data = pendingToUpgradeInfo[tokenId];\\r\\n        require(data.owner == msg.sender, \\\"You are not NFT owner.\\\");\\r\\n        require(data.pending, \\\"You didn't request.\\\");\\r\\n\\r\\n        Dragon(dragonNFTAddress).transferFrom(address(this), msg.sender, tokenId);\\r\\n        data.owner = address(0);\\r\\n        data.pending = false;\\r\\n        data.startAt = 0;\\r\\n    }\\r\\n\\r\\n    // Cancel upgrade special\\r\\n    function cancelUpgradeSpecial(uint tokenId) external {\\r\\n        PendingToUpgradeSpecial storage data = pendingToUpgradeSpecial[tokenId];\\r\\n        require(data.owner == msg.sender, \\\"You are not NFT owner.\\\");\\r\\n        require(data.pending, \\\"You didn't request.\\\");\\r\\n\\r\\n        Dragon(dragonNFTAddress).transferFrom(address(this), msg.sender, tokenId);\\r\\n        data.owner = address(0);\\r\\n        data.pending = false;\\r\\n        data.startAt = 0;\\r\\n    }\\r\\n\\r\\n    function setStatRange(DragonType species, RarityType rarity, Stat stat, uint[2] memory value) external onlyOwner{\\r\\n        require(value[1] <= MAX_LEVEL && value[0] >= MIN_LEVEL, \\\"Invalid value\\\");\\r\\n        stateRanges[uint(species)][uint(rarity)][uint(stat)] = value;\\r\\n    }\\r\\n\\r\\n    function setLimitStatForAge(Age age, uint value) external onlyOwner {\\r\\n        require(value <= MAX_LEVEL, \\\"Invalid value\\\");\\r\\n        ageLimitInfo[age] = value;\\r\\n    }\\r\\n\\r\\n    function refundIfOver(uint256 price) private {\\r\\n        require(msg.value >= price, \\\"Need to send more ETH.\\\");\\r\\n        if (msg.value > price) {\\r\\n            payable(msg.sender).transfer(msg.value - price);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function verifySigner(bytes calldata signature, address _signer) \\r\\n        public view returns (bool) {\\r\\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender));\\r\\n        bytes32 message = ECDSA.toEthSignedMessageHash(hash);\\r\\n        address recoveredAddress = ECDSA.recover(message, signature);\\r\\n        return (recoveredAddress != address(0) && recoveredAddress == _signer);\\r\\n    }\\r\\n\\r\\n    function updateDragonName(uint _tokenId, string memory name, bytes calldata signature ) external {\\r\\n        require(verifySigner(signature, signer), \\\"Invalid signature\\\");\\r\\n        Dragon(dragonNFTAddress).updateName(_tokenId, name);\\r\\n    }\\r\\n\\r\\n    // Admin action\\r\\n    function setSigner(address _signer) external onlyOwner {\\r\\n        signer = _signer;\\r\\n    }\\r\\n\\r\\n    function getSigner() external view returns(address) {\\r\\n        return signer;\\r\\n    }\\r\\n\\r\\n    function setNFTAddress(address _address) external onlyOwner {\\r\\n        dragonNFTAddress = _address;\\r\\n    }\\r\\n\\r\\n    function setPendingDurationForState(uint[9] memory durations) external onlyOwner {\\r\\n        pendingDurationForState = durations;\\r\\n    }\\r\\n\\r\\n    function setFeeForUpgradeState(uint[9] memory fees) external onlyOwner {\\r\\n        feeForUpgradeState = fees;\\r\\n    }\\r\\n\\r\\n    function setPendingDurationForDragon (uint duration) external onlyOwner {\\r\\n        durationForHatch = duration;\\r\\n    }\\r\\n\\r\\n    function setPendingDurationForSpecial(uint[5] memory durations) external onlyOwner {\\r\\n        pendingDurationForSpecialSkill = durations;\\r\\n    }\\r\\n\\r\\n    function setFeeForUpgradeSpecial(uint[5] memory fees) external onlyOwner {\\r\\n        feeForUpgradeSpecial = fees;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xd2868e9e61572ad13fedadac084e058e0ef0c339eae0ef599325ddbec3839fb8\",\"license\":\"MIT\"},\"contracts/interface/DragonBasic.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\ncontract DragonBasic {\\r\\n    // Rarity. Common 50%, Uncommon 30%, Rare 15%, Legendary 5%\\r\\n    enum RarityType {\\r\\n        Common,\\r\\n        Uncommon,\\r\\n        Rare,\\r\\n        Legendary\\r\\n    }\\r\\n\\r\\n    // Dragon Type: The same percent\\r\\n    enum DragonType {\\r\\n        Attack,\\r\\n        Healer,\\r\\n        Stealth,\\r\\n        Rescue,\\r\\n        Supply\\r\\n    }\\r\\n\\r\\n    // Male: 99.5%, Female: 0.5%\\r\\n    enum Gender {\\r\\n        MALE,\\r\\n        FEMALE\\r\\n    }\\r\\n\\r\\n    // Age\\r\\n    enum Age {\\r\\n        Egg,\\r\\n        Hatchling,\\r\\n        Adolescent,\\r\\n        Adult\\r\\n    }\\r\\n\\r\\n    // Stats\\r\\n    enum Stat {\\r\\n        Strength,\\r\\n        FireDamage,\\r\\n        Healing,\\r\\n        Agility,\\r\\n        Flight,\\r\\n        Magic,\\r\\n        Defense\\r\\n    }\\r\\n\\r\\n    // TrainTypes \\r\\n    enum TrainType {\\r\\n        Feed,\\r\\n        CastSpell,\\r\\n        SpecialSkill,\\r\\n\\r\\n        Study,\\r\\n        Spar,\\r\\n        Obstacle,\\r\\n        \\r\\n        Fight,\\r\\n        Hunt,\\r\\n        Rescue,\\r\\n        Race\\r\\n    }\\r\\n\\r\\n    struct DragonData {\\r\\n        RarityType rarity;\\r\\n        DragonType species;\\r\\n        Gender gender;\\r\\n        uint birthday;\\r\\n        bool isDragon;\\r\\n        uint lastBreed;\\r\\n        uint father;\\r\\n        uint mother;\\r\\n        string name;\\r\\n        uint[7] ability;\\r\\n        uint specialPoint; // increase to max 5. Should be developed before Adult age. \\r\\n    }\\r\\n\\r\\n    // states limit per age\\r\\n    mapping(Age => uint) internal ageLimitInfo; \\r\\n\\r\\n    // mapping(DragonType => mapping(RarityType => mapping(Stat => StateRange))) internal stateRanges;\\r\\n    uint[2][7][4][5] stateRanges;\\r\\n\\r\\n    constructor() {\\r\\n        ageLimitInfo[Age.Egg] = 0;\\r\\n        ageLimitInfo[Age.Hatchling] = 3;\\r\\n        ageLimitInfo[Age.Adolescent] = 5;\\r\\n        ageLimitInfo[Age.Adult] = 10;\\r\\n    }\\r\\n\\r\\n    function indexToStat(uint index) internal pure returns(Stat) {\\r\\n        require(index < 7, \\\"Invalid stat index.\\\");\\r\\n\\r\\n        if (index == 0) {\\r\\n            return Stat.Strength;\\r\\n        } else if (index == 1) {\\r\\n            return Stat.FireDamage;\\r\\n        } else if (index == 2) {\\r\\n            return Stat.Healing;\\r\\n        } else if (index == 3) {\\r\\n            return Stat.Agility;\\r\\n        } else if (index == 4) {\\r\\n            return Stat.Flight;\\r\\n        } else if (index == 5) {\\r\\n            return Stat.Magic;\\r\\n        } else {\\r\\n            return Stat.Defense;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function indexToType(uint index) internal pure returns(DragonType) {\\r\\n        require(index < 5, \\\"Invalid type index.\\\");\\r\\n\\r\\n        if (index == 0) {\\r\\n            return DragonType.Attack;\\r\\n        } else if (index == 1) {\\r\\n            return DragonType.Healer;\\r\\n        } else if (index == 2) {\\r\\n            return DragonType.Stealth;\\r\\n        } else if (index == 3) {\\r\\n            return DragonType.Rescue;\\r\\n        } else {\\r\\n            return DragonType.Supply;\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xbf107d2ce7313e405aa67247bfb097c5a2dec8c10c66cc4cef18a764fa0de6ee\"},\"contracts/interface/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Assumes the number of issuable tokens (collection size) is capped and fits in a uint128.\\r\\n *\\r\\n * Does not support burning tokens to address(0).\\r\\n */\\r\\ncontract ERC721A is\\r\\n  Context,\\r\\n  ERC165,\\r\\n  IERC721,\\r\\n  IERC721Metadata,\\r\\n  IERC721Enumerable\\r\\n{\\r\\n  using Address for address;\\r\\n  using Strings for uint256;\\r\\n\\r\\n  struct TokenOwnership {\\r\\n    address addr;\\r\\n    uint64 startTimestamp;\\r\\n  }\\r\\n\\r\\n  struct AddressData {\\r\\n    uint128 balance;\\r\\n    uint128 numberMinted;\\r\\n  }\\r\\n\\r\\n  uint256 private currentIndex = 0;\\r\\n\\r\\n  uint256 internal immutable collectionSize;\\r\\n  uint256 internal immutable maxBatchSize;\\r\\n\\r\\n  // Token name\\r\\n  string private _name;\\r\\n\\r\\n  // Token symbol\\r\\n  string private _symbol;\\r\\n\\r\\n  // Mapping from token ID to ownership details\\r\\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\r\\n  mapping(uint256 => TokenOwnership) private _ownerships;\\r\\n\\r\\n  // Mapping owner address to address data\\r\\n  mapping(address => AddressData) private _addressData;\\r\\n\\r\\n  // Mapping from token ID to approved address\\r\\n  mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n  // Mapping from owner to operator approvals\\r\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n  /**\\r\\n   * @dev\\r\\n   * `maxBatchSize` refers to how much a minter can mint at a time.\\r\\n   * `collectionSize_` refers to how many tokens are in the collection.\\r\\n   */\\r\\n  constructor(\\r\\n    string memory name_,\\r\\n    string memory symbol_,\\r\\n    uint256 maxBatchSize_,\\r\\n    uint256 collectionSize_\\r\\n  ) {\\r\\n    require(\\r\\n      collectionSize_ > 0,\\r\\n      \\\"ERC721A: collection must have a nonzero supply\\\"\\r\\n    );\\r\\n    require(maxBatchSize_ > 0, \\\"ERC721A: max batch size must be nonzero\\\");\\r\\n    _name = name_;\\r\\n    _symbol = symbol_;\\r\\n    maxBatchSize = maxBatchSize_;\\r\\n    collectionSize = collectionSize_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-totalSupply}.\\r\\n   */\\r\\n  function totalSupply() public view override returns (uint256) {\\r\\n    return currentIndex;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n   */\\r\\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\\r\\n    require(index < totalSupply(), \\\"ERC721A: global index out of bounds\\\");\\r\\n    return index;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n   * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.\\r\\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\r\\n   */\\r\\n  function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\r\\n    uint256 numMintedSoFar = totalSupply();\\r\\n    uint256 tokenIdsIdx = 0;\\r\\n    address currOwnershipAddr = address(0);\\r\\n    for (uint256 i = 0; i < numMintedSoFar; i++) {\\r\\n      TokenOwnership memory ownership = _ownerships[i];\\r\\n      if (ownership.addr != address(0)) {\\r\\n        currOwnershipAddr = ownership.addr;\\r\\n      }\\r\\n      if (currOwnershipAddr == owner) {\\r\\n        if (tokenIdsIdx == index) {\\r\\n          return i;\\r\\n        }\\r\\n        tokenIdsIdx++;\\r\\n      }\\r\\n    }\\r\\n    revert(\\\"ERC721A: unable to get token of owner by index\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override(ERC165, IERC165)\\r\\n    returns (bool)\\r\\n  {\\r\\n    return\\r\\n      interfaceId == type(IERC721).interfaceId ||\\r\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n      interfaceId == type(IERC721Enumerable).interfaceId ||\\r\\n      super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-balanceOf}.\\r\\n   */\\r\\n  function balanceOf(address owner) public view override returns (uint256) {\\r\\n    require(owner != address(0), \\\"ERC721A: balance query for the zero address\\\");\\r\\n    return uint256(_addressData[owner].balance);\\r\\n  }\\r\\n\\r\\n  function _numberMinted(address owner) internal view returns (uint256) {\\r\\n    require(\\r\\n      owner != address(0),\\r\\n      \\\"ERC721A: number minted query for the zero address\\\"\\r\\n    );\\r\\n    return uint256(_addressData[owner].numberMinted);\\r\\n  }\\r\\n\\r\\n  function ownershipOf(uint256 tokenId)\\r\\n    internal\\r\\n    view\\r\\n    returns (TokenOwnership memory)\\r\\n  {\\r\\n    require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\r\\n\\r\\n    uint256 lowestTokenToCheck;\\r\\n    if (tokenId >= maxBatchSize) {\\r\\n      lowestTokenToCheck = tokenId - maxBatchSize + 1;\\r\\n    }\\r\\n\\r\\n    for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\\r\\n      TokenOwnership memory ownership = _ownerships[curr];\\r\\n      if (ownership.addr != address(0)) {\\r\\n        return ownership;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    revert(\\\"ERC721A: unable to determine the owner of token\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-ownerOf}.\\r\\n   */\\r\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n    return ownershipOf(tokenId).addr;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-name}.\\r\\n   */\\r\\n  function name() public view virtual override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-symbol}.\\r\\n   */\\r\\n  function symbol() public view virtual override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-tokenURI}.\\r\\n   */\\r\\n  function tokenURI(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (string memory)\\r\\n  {\\r\\n    require(\\r\\n      _exists(tokenId),\\r\\n      \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n    );\\r\\n\\r\\n    string memory baseURI = _baseURI();\\r\\n    return\\r\\n      bytes(baseURI).length > 0\\r\\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\\r\\n        : \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n   * by default, can be overriden in child contracts.\\r\\n   */\\r\\n  function _baseURI() internal view virtual returns (string memory) {\\r\\n    return \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-approve}.\\r\\n   */\\r\\n  function approve(address to, uint256 tokenId) public override {\\r\\n    address owner = ERC721A.ownerOf(tokenId);\\r\\n    require(to != owner, \\\"ERC721A: approval to current owner\\\");\\r\\n\\r\\n    require(\\r\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n      \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\r\\n    );\\r\\n\\r\\n    _approve(to, tokenId, owner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-getApproved}.\\r\\n   */\\r\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\r\\n    require(_exists(tokenId), \\\"ERC721A: approved query for nonexistent token\\\");\\r\\n\\r\\n    return _tokenApprovals[tokenId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-setApprovalForAll}.\\r\\n   */\\r\\n  function setApprovalForAll(address operator, bool approved) public override {\\r\\n    require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\r\\n\\r\\n    _operatorApprovals[_msgSender()][operator] = approved;\\r\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-isApprovedForAll}.\\r\\n   */\\r\\n  function isApprovedForAll(address owner, address operator)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _operatorApprovals[owner][operator];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-transferFrom}.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public override {\\r\\n    _transfer(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public override {\\r\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) public override {\\r\\n    _transfer(from, to, tokenId);\\r\\n    require(\\r\\n      _checkOnERC721Received(from, to, tokenId, _data),\\r\\n      \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns whether `tokenId` exists.\\r\\n   *\\r\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n   *\\r\\n   * Tokens start existing when they are minted (`_mint`),\\r\\n   */\\r\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n    return tokenId < currentIndex;\\r\\n  }\\r\\n\\r\\n  function _safeMint(address to, uint256 quantity) internal {\\r\\n    _safeMint(to, quantity, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - there must be `quantity` tokens remaining unminted in the total collection.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `quantity` cannot be larger than the max batch size.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _safeMint(\\r\\n    address to,\\r\\n    uint256 quantity,\\r\\n    bytes memory _data\\r\\n  ) internal {\\r\\n    uint256 startTokenId = currentIndex;\\r\\n    require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\r\\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\\r\\n    require(!_exists(startTokenId), \\\"ERC721A: token already minted\\\");\\r\\n    require(quantity <= maxBatchSize, \\\"ERC721A: quantity to mint too high\\\");\\r\\n\\r\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n    AddressData memory addressData = _addressData[to];\\r\\n    _addressData[to] = AddressData(\\r\\n      addressData.balance + uint128(quantity),\\r\\n      addressData.numberMinted + uint128(quantity)\\r\\n    );\\r\\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\\r\\n\\r\\n    uint256 updatedIndex = startTokenId;\\r\\n\\r\\n    for (uint256 i = 0; i < quantity; i++) {\\r\\n      emit Transfer(address(0), to, updatedIndex);\\r\\n      require(\\r\\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\\r\\n        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\r\\n      );\\r\\n      updatedIndex++;\\r\\n    }\\r\\n\\r\\n    currentIndex = updatedIndex;\\r\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers `tokenId` from `from` to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must be owned by `from`.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _transfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) private {\\r\\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\r\\n\\r\\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\r\\n      getApproved(tokenId) == _msgSender() ||\\r\\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\\r\\n\\r\\n    require(\\r\\n      isApprovedOrOwner,\\r\\n      \\\"ERC721A: transfer caller is not owner nor approved\\\"\\r\\n    );\\r\\n\\r\\n    require(\\r\\n      prevOwnership.addr == from,\\r\\n      \\\"ERC721A: transfer from incorrect owner\\\"\\r\\n    );\\r\\n    require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n    // Clear approvals from the previous owner\\r\\n    _approve(address(0), tokenId, prevOwnership.addr);\\r\\n\\r\\n    _addressData[from].balance -= 1;\\r\\n    _addressData[to].balance += 1;\\r\\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\\r\\n\\r\\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\r\\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n    uint256 nextTokenId = tokenId + 1;\\r\\n    if (_ownerships[nextTokenId].addr == address(0)) {\\r\\n      if (_exists(nextTokenId)) {\\r\\n        _ownerships[nextTokenId] = TokenOwnership(\\r\\n          prevOwnership.addr,\\r\\n          prevOwnership.startTimestamp\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Transfer(from, to, tokenId);\\r\\n    _afterTokenTransfers(from, to, tokenId, 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve `to` to operate on `tokenId`\\r\\n   *\\r\\n   * Emits a {Approval} event.\\r\\n   */\\r\\n  function _approve(\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    address owner\\r\\n  ) private {\\r\\n    _tokenApprovals[tokenId] = to;\\r\\n    emit Approval(owner, to, tokenId);\\r\\n  }\\r\\n\\r\\n  uint256 public nextOwnerToExplicitlySet = 0;\\r\\n\\r\\n  /**\\r\\n   * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\r\\n   */\\r\\n  function _setOwnersExplicit(uint256 quantity) internal {\\r\\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\\r\\n    require(quantity > 0, \\\"quantity must be nonzero\\\");\\r\\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\\r\\n    if (endIndex > collectionSize - 1) {\\r\\n      endIndex = collectionSize - 1;\\r\\n    }\\r\\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\\r\\n    require(_exists(endIndex), \\\"not enough minted yet for this cleanup\\\");\\r\\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\\r\\n      if (_ownerships[i].addr == address(0)) {\\r\\n        TokenOwnership memory ownership = ownershipOf(i);\\r\\n        _ownerships[i] = TokenOwnership(\\r\\n          ownership.addr,\\r\\n          ownership.startTimestamp\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n    nextOwnerToExplicitlySet = endIndex + 1;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n   * The call is not executed if the target address is not a contract.\\r\\n   *\\r\\n   * @param from address representing the previous owner of the given token ID\\r\\n   * @param to target address that will receive the tokens\\r\\n   * @param tokenId uint256 ID of the token to be transferred\\r\\n   * @param _data bytes optional data to send along with the call\\r\\n   * @return bool whether the call correctly returned the expected magic value\\r\\n   */\\r\\n  function _checkOnERC721Received(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) private returns (bool) {\\r\\n    if (to.isContract()) {\\r\\n      try\\r\\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\r\\n      returns (bytes4 retval) {\\r\\n        return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n      } catch (bytes memory reason) {\\r\\n        if (reason.length == 0) {\\r\\n          revert(\\\"ERC721A: transfer to non ERC721Receiver implementer\\\");\\r\\n        } else {\\r\\n          assembly {\\r\\n            revert(add(32, reason), mload(reason))\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\r\\n   *\\r\\n   * startTokenId - the first token id to be transferred\\r\\n   * quantity - the amount to be transferred\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n   * transferred to `to`.\\r\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n   */\\r\\n  function _beforeTokenTransfers(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 startTokenId,\\r\\n    uint256 quantity\\r\\n  ) internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n   * minting.\\r\\n   *\\r\\n   * startTokenId - the first token id to be transferred\\r\\n   * quantity - the amount to be transferred\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - when `from` and `to` are both non-zero.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   */\\r\\n  function _afterTokenTransfers(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 startTokenId,\\r\\n    uint256 quantity\\r\\n  ) internal virtual {}\\r\\n}\",\"keccak256\":\"0xcacd0c4b4a39075d060e36de8c17cddb9a67bae270d7b8b62b9148ba286f3186\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a060405262015180608081815260a082905260c082905260e0829052610100829052610120919091526202a300610140526203f480610160526205460061018052620000539061011d906009620002cd565b506040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152674563918244f4000060c0820152678ac7230489e8000060e082015267d02ab486cedc0000610100820152620000c39061012690600962000317565b506040805160a081018252620151808082526020820181905291810182905260608101919091526202a3006080820152620001049061012f90600562000353565b506040805160a08101825260008082526020820181905291810191909152678ac7230489e8000060608201526801158e460913d00000608082015262000150906101349060056200038a565b506203f48061013a553480156200016657600080fd5b506040516200401c3803806200401c8339810160408190526200018991620007d7565b62000194336200027d565b600160205260007fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4981905560037fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f81905560057fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f8190559152600a7f7dfe757ecd65cbd7922a9c0161e935dd7fdbcc0e999689c7d31633896b1fc60b5561011b80546001600160a01b038681166001600160a01b03199283161790925561011a80549286169290911691909117905562000273906002908390620003c6565b50505050620008e3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b826009810192821562000305579160200282015b8281111562000305578251829062ffffff16905591602001919060010190620002e1565b506200031392915062000415565b5090565b826009810192821562000305579160200282015b828111156200030557825182906001600160401b03169055916020019190600101906200032b565b826005810192821562000305579160200282018281111562000305578251829062ffffff16905591602001919060010190620002e1565b826005810192821562000305579160200282015b828111156200030557825182906001600160481b03169055916020019190600101906200039e565b6101188301918390821562000407579160200282015b8281111562000407578251620003f690839060046200042c565b5091602001919060380190620003dc565b50620003139291506200047a565b5b8082111562000313576000815560010162000416565b6038830191839082156200046c579160200282015b828111156200046c5782516200045b90839060076200049b565b50916020019190600e019062000441565b5062000313929150620004e9565b80821115620003135760006200049182826200050a565b506038016200047a565b600e83019183908215620004db579160200282015b82811115620004db578251620004ca908390600262000550565b5091602001919060020190620004b0565b506200031392915062000581565b80821115620003135760006200050082826200059d565b50600e01620004e9565b5060006200051982826200059d565b50600e0160006200052b82826200059d565b50600e0160006200053d82826200059d565b506200054e90600e0160006200059d565b565b826002810192821562000305579160200282015b828111156200030557825182559160200191906001019062000564565b8082111562000313576000808255600182015560020162000581565b50620005ae90600e81019062000581565b50565b6000620005c8620005c2846200084b565b6200082c565b9050808285610700860282011115620005e057600080fd5b60005b85811015620006135781620005f9888262000767565b8452506020909201916107009190910190600101620005e3565b5050509392505050565b60006200062e620005c2846200084b565b90508082856101c08602820111156200064657600080fd5b60005b858110156200061357816200065f888262000788565b8452506020909201916101c0919091019060010162000649565b60006200068a620005c2846200084b565b90508082856040860282011115620006a157600080fd5b60005b85811015620006135781620006ba8882620007a9565b84525060209092019160409190910190600101620006a4565b6000620006e4620005c2846200084b565b90508082856020860282011115620006fb57600080fd5b60005b85811015620006135781620007148882620007ca565b8452506020928301929190910190600101620006fe565b80516200073881620008c5565b92915050565b600082601f8301126200075057600080fd5b60056200075f848285620005b1565b949350505050565b600082601f8301126200077957600080fd5b60046200075f8482856200061d565b600082601f8301126200079a57600080fd5b60076200075f84828562000679565b600082601f830112620007bb57600080fd5b60026200075f848285620006d3565b80516200073881620008dc565b60008060006123408486031215620007ee57600080fd5b6000620007fc86866200072b565b93505060206200080f868287016200072b565b925050604062000822868287016200073e565b9150509250925092565b60006200083860405190565b905062000846828262000880565b919050565b60006001600160401b03821115620008675762000867620008af565b5060200290565b60006001600160a01b03821662000738565b601f19601f83011681018181106001600160401b0382111715620008a857620008a8620008af565b6040525050565b634e487b7160e01b600052604160045260246000fd5b620008d0816200086e565b8114620005ae57600080fd5b80620008d0565b61372980620008f36000396000f3fe6080604052600436106101f95760003560e01c80638da5cb5b1161010d578063b9ae46ab116100a0578063d07c63cf1161006f578063d07c63cf146105eb578063d7c1247c14610602578063e4d3b33914610622578063f2fde38b14610642578063fb7a21aa1461066257600080fd5b8063b9ae46ab14610569578063bd60b83f14610596578063c5ee6c68146105ab578063c9bfe036146105cb57600080fd5b80639ed4a4d7116100dc5780639ed4a4d7146104e7578063a0c307bc14610507578063a49062d414610527578063b7892dcb1461054957600080fd5b80638da5cb5b146104765780639021380814610494578063966fd1c7146104b45780639c9af7cb146104c757600080fd5b806352334fbe11610190578063689db9861161015f578063689db986146103e257806369d03738146104025780636c19e78314610422578063715018a6146104425780637ac3c02f1461045757600080fd5b806352334fbe14610325578063561aceae1461038f57806358970be7146103af5780635c10a858146103cf57600080fd5b8063238ac933116101cc578063238ac933146102805780632938ad50146102b757806347da0703146102d85780634fade0841461030557600080fd5b8063047e84e0146101fe578063082e8084146102205780631d2923a1146102405780631dc94a0c14610260575b600080fd5b34801561020a57600080fd5b5061021e610219366004612a00565b610682565b005b34801561022c57600080fd5b5061021e61023b366004612b9c565b6106c7565b34801561024c57600080fd5b5061021e61025b366004612bd8565b6107af565b34801561026c57600080fd5b5061021e61027b366004612a1e565b610ee2565b34801561028c57600080fd5b5061011a546102a1906001600160a01b031681565b6040516102ae9190613213565b60405180910390f35b3480156102c357600080fd5b5061011b546102a1906001600160a01b031681565b3480156102e457600080fd5b506102f86102f3366004612b9c565b610f1a565b6040516102ae9190613451565b34801561031157600080fd5b5061021e610320366004612b9c565b610f32565b34801561033157600080fd5b5061037e610340366004612b9c565b61011c60205260009081526040902080546002820154600383015460048401546005909401546001600160a01b0390931693919260ff909116919085565b6040516102ae959493929190613249565b34801561039b57600080fd5b5061021e6103aa366004612b9c565b611115565b3480156103bb57600080fd5b5061021e6103ca366004612b9c565b61114d565b61021e6103dd366004612c1f565b61117d565b3480156103ee57600080fd5b506102f86103fd366004612b9c565b611459565b34801561040e57600080fd5b5061021e61041d3660046129c4565b61146a565b34801561042e57600080fd5b5061021e61043d3660046129c4565b6114b7565b34801561044e57600080fd5b5061021e611504565b34801561046357600080fd5b5061011a546001600160a01b03166102a1565b34801561048257600080fd5b506000546001600160a01b03166102a1565b3480156104a057600080fd5b5061021e6104af366004612c74565b61153a565b61021e6104c2366004612c1f565b6115db565b3480156104d357600080fd5b5061021e6104e2366004612a1e565b611879565b3480156104f357600080fd5b506102f8610502366004612b9c565b6118b1565b34801561051357600080fd5b5061021e610522366004612c1f565b6118c2565b34801561053357600080fd5b5061053c600a81565b6040516102ae91906134c2565b34801561055557600080fd5b5061021e610564366004612b07565b611a60565b34801561057557600080fd5b50610589610584366004612a5b565b611b9b565b6040516102ae9190613295565b3480156105a257600080fd5b5061053c600181565b3480156105b757600080fd5b5061021e6105c6366004612b9c565b611c4e565b3480156105d757600080fd5b506102f86105e6366004612b9c565b611d36565b3480156105f757600080fd5b506102f861013a5481565b34801561060e57600080fd5b5061021e61061d366004612a00565b611d47565b34801561062e57600080fd5b5061021e61063d366004612acd565b611d7f565b34801561064e57600080fd5b5061021e61065d3660046129c4565b611e23565b34801561066e57600080fd5b5061021e61067d366004612c1f565b611e7f565b6000546001600160a01b031633146106b55760405162461bcd60e51b81526004016106ac906133b1565b60405180910390fd5b6106c361012f826005612391565b5050565b60008181526101396020526040902080546001600160a01b031633146106ff5760405162461bcd60e51b81526004016106ac906133e1565b600281015460ff166107235760405162461bcd60e51b81526004016106ac90613351565b61011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061075890309033908790600401613221565b600060405180830381600087803b15801561077257600080fd5b505af1158015610786573d6000803e3d6000fd5b505082546001600160a01b0319168355505060028101805460ff19169055600060019091015550565b61011b546040516331a9108f60e11b815233916001600160a01b031690636352211e906107e0908690600401613451565b60206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083091906129e2565b6001600160a01b0316146108565760405162461bcd60e51b81526004016106ac90613301565b61011b5460405163ced3e3f160e01b81526001600160a01b039091169063ced3e3f190610887908590600401613451565b60206040518083038186803b15801561089f57600080fd5b505afa1580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d79190612a3d565b6108f35760405162461bcd60e51b81526004016106ac90613371565b600082815261011c60205260409020600381015460ff16156109275760405162461bcd60e51b81526004016106ac906133d1565b61011b5460405163e0bb933b60e01b81526000916001600160a01b03169063e0bb933b90610959908790600401613451565b60006040518083038186803b15801561097157600080fd5b505afa158015610985573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ad9190810190612b68565b9050600080600080600087516001600160401b038111156109de57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610a07578160200160208202803683370190505b50905060005b8851811015610e0b5761011b5489516000916001600160a01b031690633a04e2f2908d908d9086908110610a5157634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401610a7692919061345f565b60206040518083038186803b158015610a8e57600080fd5b505afa158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac69190612bba565b61011b5460405163071b804560e11b81529192506000916001600160a01b0390911690630e37008a90610afd908f90600401613451565b60206040518083038186803b158015610b1557600080fd5b505afa158015610b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4d9190612aaf565b9050600060028a602001516004811115610b7757634e487b7160e01b600052602160045260246000fd5b60058110610b9557634e487b7160e01b600052603260045260246000fd5b603802018a600001516003811115610bbd57634e487b7160e01b600052602160045260246000fd5b60048110610bdb57634e487b7160e01b600052603260045260246000fd5b600e02018c8581518110610bff57634e487b7160e01b600052603260045260246000fd5b60200260200101516006811115610c2657634e487b7160e01b600052602160045260246000fd5b60078110610c4457634e487b7160e01b600052603260045260246000fd5b604080518082019182905292600292830201919082845b815481526020019060010190808311610c5b575050505050905060016000836003811115610c9957634e487b7160e01b600052602160045260246000fd5b6003811115610cb857634e487b7160e01b600052602160045260246000fd5b81526020019081526020016000205483108015610cd85750602081015183105b15610df5576001985061011d610cee8a85613571565b60098110610d0c57634e487b7160e01b600052603260045260246000fd5b0154610d189089613559565b9750610126610d28600185613571565b60098110610d4657634e487b7160e01b600052603260045260246000fd5b0154610d529088613559565b96508b8481518110610d7457634e487b7160e01b600052603260045260246000fd5b6020026020010151858781518110610d9c57634e487b7160e01b600052603260045260246000fd5b60200260200101906006811115610dc357634e487b7160e01b600052602160045260246000fd5b90816006811115610de457634e487b7160e01b600052602160045260246000fd5b90525085610df18161361e565b9650505b5050508080610e039061361e565b915050610a0d565b5084610e295760405162461bcd60e51b81526004016106ac90613401565b61011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610e5e90339030908e90600401613221565b600060405180830381600087803b158015610e7857600080fd5b505af1158015610e8c573d6000803e3d6000fd5b505088546001600160a01b03191633178955505060038701805460ff191660019081179091554260028901558151610ecb9189019060208401906123cf565b505050600485015560059093019290925550505050565b6000546001600160a01b03163314610f0c5760405162461bcd60e51b81526004016106ac906133b1565b6106c361012682600961248c565b6101348160058110610f2b57600080fd5b0154905081565b61011b546040516331a9108f60e11b815233916001600160a01b031690636352211e90610f63908590600401613451565b60206040518083038186803b158015610f7b57600080fd5b505afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb391906129e2565b6001600160a01b031614610fd95760405162461bcd60e51b81526004016106ac90613301565b61011b5460405163ced3e3f160e01b81526001600160a01b039091169063ced3e3f19061100a908490600401613451565b60206040518083038186803b15801561102257600080fd5b505afa158015611036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105a9190612a3d565b156110775760405162461bcd60e51b81526004016106ac90613431565b61011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906110ac90339030908690600401613221565b600060405180830381600087803b1580156110c657600080fd5b505af11580156110da573d6000803e3d6000fd5b5050506000918252506101396020526040902080546001600160a01b0319163317815560028101805460ff1916600190811790915542910155565b600081815261013b6020526040902080546001600160a01b031633146106ff5760405162461bcd60e51b81526004016106ac906133e1565b6000546001600160a01b031633146111775760405162461bcd60e51b81526004016106ac906133b1565b61013a55565b61011a5461119790839083906001600160a01b0316611b9b565b6111b35760405162461bcd60e51b81526004016106ac90613311565b61011b5460405163ca8f8ff360e01b81526001600160a01b039091169063ca8f8ff3906111e4908690600401613451565b60206040518083038186803b1580156111fc57600080fd5b505afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190612a3d565b6112505760405162461bcd60e51b81526004016106ac90613381565b600083815261011c6020526040902080546001600160a01b031633146112885760405162461bcd60e51b81526004016106ac906133e1565b600381015460ff166112ac5760405162461bcd60e51b81526004016106ac90613411565b6112b98160040154611fd9565b806005015481600201546112cd9190613559565b4210156112ec5760405162461bcd60e51b81526004016106ac90613331565b61011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061132190309033908990600401613221565b600060405180830381600087803b15801561133b57600080fd5b505af115801561134f573d6000803e3d6000fd5b5050505060005b60018201548110156114235761011b546001830180546001600160a01b0390921691639585dae19188918590811061139e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff1660016040518463ffffffff1660e01b81526004016113de9392919061347a565b600060405180830381600087803b1580156113f857600080fd5b505af115801561140c573d6000803e3d6000fd5b50505050808061141b9061361e565b915050611356565b5060038101805460ff1916905560006002820181905581546001600160a01b031916825560058201819055600490910155505050565b61012f8160058110610f2b57600080fd5b6000546001600160a01b031633146114945760405162461bcd60e51b81526004016106ac906133b1565b61011b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146114e15760405162461bcd60e51b81526004016106ac906133b1565b61011a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461152e5760405162461bcd60e51b81526004016106ac906133b1565b6115386000612037565b565b61011a5461155490839083906001600160a01b0316611b9b565b6115705760405162461bcd60e51b81526004016106ac90613341565b61011b546040516314f9dbcb60e21b81526001600160a01b03909116906353e76f2c906115a390879087906004016134a2565b600060405180830381600087803b1580156115bd57600080fd5b505af11580156115d1573d6000803e3d6000fd5b5050505050505050565b61011a546115f590839083906001600160a01b0316611b9b565b6116115760405162461bcd60e51b81526004016106ac90613311565b600083815261013b6020526040902080546001600160a01b031633146116495760405162461bcd60e51b81526004016106ac906133e1565b600281015460ff1661166d5760405162461bcd60e51b81526004016106ac90613441565b61011b5460405163e0bb933b60e01b81526000916001600160a01b03169063e0bb933b9061169f908890600401613451565b60006040518083038186803b1580156116b757600080fd5b505afa1580156116cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116f39190810190612b68565b610140810151909150600061012f826005811061172057634e487b7160e01b600052603260045260246000fd5b015490506000610134836005811061174857634e487b7160e01b600052603260045260246000fd5b0154905061175581611fd9565b8185600101546117659190613559565b4210156117845760405162461bcd60e51b81526004016106ac90613331565b60028501805460ff191690556000600186015584546001600160a01b031916855561011b54604051633af36fd760e01b81526001600160a01b0390911690633af36fd7906117d6908b90600401613451565b600060405180830381600087803b1580156117f057600080fd5b505af1158015611804573d6000803e3d6000fd5b505061011b546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd915061183d90309033908d90600401613221565b600060405180830381600087803b15801561185757600080fd5b505af115801561186b573d6000803e3d6000fd5b505050505050505050505050565b6000546001600160a01b031633146118a35760405162461bcd60e51b81526004016106ac906133b1565b6106c361011d82600961248c565b6101268160098110610f2b57600080fd5b61011a546118dc90839083906001600160a01b0316611b9b565b6118f85760405162461bcd60e51b81526004016106ac90613311565b60008381526101396020526040902080546001600160a01b031633146119305760405162461bcd60e51b81526004016106ac906133e1565b600281015460ff166119545760405162461bcd60e51b81526004016106ac90613441565b61013a5481600101546119679190613559565b4210156119865760405162461bcd60e51b81526004016106ac90613331565b61011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906119bb90309033908990600401613221565b600060405180830381600087803b1580156119d557600080fd5b505af11580156119e9573d6000803e3d6000fd5b505061011b546040516308e1555360e21b81526001600160a01b039091169250632385554c9150611a1e908790600401613451565b600060405180830381600087803b158015611a3857600080fd5b505af1158015611a4c573d6000803e3d6000fd5b50505050600201805460ff19169055505050565b6000546001600160a01b03163314611a8a5760405162461bcd60e51b81526004016106ac906133b1565b6020810151600a10801590611aa157508051600111155b611abd5760405162461bcd60e51b81526004016106ac906133c1565b806002856004811115611ae057634e487b7160e01b600052602160045260246000fd5b60058110611afe57634e487b7160e01b600052603260045260246000fd5b60380201846003811115611b2257634e487b7160e01b600052602160045260246000fd5b60048110611b4057634e487b7160e01b600052603260045260246000fd5b600e0201836006811115611b6457634e487b7160e01b600052602160045260246000fd5b60078110611b8257634e487b7160e01b600052603260045260246000fd5b60020201906002611b949291906124b9565b5050505050565b60008033604051602001611baf91906131c3565b6040516020818303038152906040528051906020012090506000611bd282612087565b90506000611c168288888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120b792505050565b90506001600160a01b03811615801590611c415750846001600160a01b0316816001600160a01b0316145b93505050505b9392505050565b600081815261011c6020526040902080546001600160a01b03163314611c865760405162461bcd60e51b81526004016106ac906133e1565b600381015460ff16611caa5760405162461bcd60e51b81526004016106ac90613351565b61011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611cdf90309033908790600401613221565b600060405180830381600087803b158015611cf957600080fd5b505af1158015611d0d573d6000803e3d6000fd5b505082546001600160a01b0319168355505060038101805460ff19169055600060029091015550565b61011d8160098110610f2b57600080fd5b6000546001600160a01b03163314611d715760405162461bcd60e51b81526004016106ac906133b1565b6106c3610134826005612391565b6000546001600160a01b03163314611da95760405162461bcd60e51b81526004016106ac906133b1565b600a811115611dca5760405162461bcd60e51b81526004016106ac906133c1565b8060016000846003811115611def57634e487b7160e01b600052602160045260246000fd5b6003811115611e0e57634e487b7160e01b600052602160045260246000fd5b81526020810191909152604001600020555050565b6000546001600160a01b03163314611e4d5760405162461bcd60e51b81526004016106ac906133b1565b6001600160a01b038116611e735760405162461bcd60e51b81526004016106ac90613321565b611e7c81612037565b50565b611e8a828233611b9b565b611ea65760405162461bcd60e51b81526004016106ac90613341565b61011b54604051631fe29ae960e11b81526001600160a01b0390911690633fc535d290611ed7908690600401613451565b60206040518083038186803b158015611eef57600080fd5b505afa158015611f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f279190612a3d565b15611f445760405162461bcd60e51b81526004016106ac906133a1565b600083815261013b60205260409020600281015460ff1615611f785760405162461bcd60e51b81526004016106ac906133f1565b60028101805460ff1916600190811790915581546001600160a01b031916339081178355429183019190915561011b546040516323b872dd60e01b81526001600160a01b0391909116916323b872dd916115a3919030908990600401613221565b80341015611ff95760405162461bcd60e51b81526004016106ac90613421565b80341115611e7c57336108fc61200f8334613571565b6040518115909202916000818181858888f193505050501580156106c3573d6000803e3d6000fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008160405160200161209a91906131d8565b604051602081830303815290604052805190602001209050919050565b60008060006120c685856120dd565b915091506120d38161214d565b5090505b92915050565b6000808251604114156121145760208301516040840151606085015160001a61210887828585612278565b94509450505050612146565b82516040141561213e5760208301516040840151612133868383612358565b935093505050612146565b506000905060025b9250929050565b600081600481111561216f57634e487b7160e01b600052602160045260246000fd5b14156121785750565b600181600481111561219a57634e487b7160e01b600052602160045260246000fd5b14156121b85760405162461bcd60e51b81526004016106ac906132e1565b60028160048111156121da57634e487b7160e01b600052602160045260246000fd5b14156121f85760405162461bcd60e51b81526004016106ac906132f1565b600381600481111561221a57634e487b7160e01b600052602160045260246000fd5b14156122385760405162461bcd60e51b81526004016106ac90613361565b600481600481111561225a57634e487b7160e01b600052602160045260246000fd5b1415611e7c5760405162461bcd60e51b81526004016106ac90613391565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156122af575060009050600361234f565b8460ff16601b141580156122c757508460ff16601c14155b156122d8575060009050600461234f565b6000600187878787604051600081526020016040526040516122fd94939291906132a3565b6020604051602081039080840390855afa15801561231f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166123485760006001925092505061234f565b9150600090505b94509492505050565b6000806001600160ff1b0383168161237560ff86901c601b613559565b905061238387828885612278565b935093505050935093915050565b82600581019282156123bf579160200282015b828111156123bf5782518255916020019190600101906123a4565b506123cb9291506124e6565b5090565b82805482825590600052602060002090601f016020900481019282156123bf5791602002820160005b8382111561245257835183826101000a81548160ff0219169083600681111561243157634e487b7160e01b600052602160045260246000fd5b021790555092602001926001016020816000010492830192600103026123f8565b801561247f5782816101000a81549060ff0219169055600101602081600001049283019260010302612452565b50506123cb9291506124e6565b82600981019282156123bf57916020028201828111156123bf5782518255916020019190600101906123a4565b82600281019282156123bf57916020028201828111156123bf5782518255916020019190600101906123a4565b5b808211156123cb57600081556001016124e7565b600061250e612509846134ec565b6134d0565b9050808382526020820190508285602086028201111561252d57600080fd5b60005b8581101561255957816125438882612847565b8452506020928301929190910190600101612530565b5050509392505050565b60006125716125098461350f565b9050808285602086028201111561258757600080fd5b60005b85811015612559578161259d88826129ae565b845250602092830192919091019060010161258a565b60006125c16125098461350f565b905080828560208602820111156125d757600080fd5b60005b8581101561255957816125ed88826129ae565b84525060209283019291909101906001016125da565b60006126116125098461350f565b9050808285602086028201111561262757600080fd5b60005b85811015612559578161263d88826129b9565b845250602092830192919091019060010161262a565b60006126616125098461350f565b9050808285602086028201111561267757600080fd5b60005b85811015612559578161268d88826129ae565b845250602092830192919091019060010161267a565b60006126b16125098461352f565b9050828152602081018484840111156126c957600080fd5b6126d48482856135b6565b509392505050565b60006126ea6125098461352f565b90508281526020810184848401111561270257600080fd5b6126d48482856135c2565b80356120d78161369d565b80516120d78161369d565b600082601f83011261273457600080fd5b81356127448482602086016124fb565b949350505050565b600082601f83011261275d57600080fd5b6002612744848285612563565b600082601f83011261277b57600080fd5b60056127448482856125b3565b600082601f83011261279957600080fd5b6007612744848285612603565b600082601f8301126127b757600080fd5b6009612744848285612653565b80516120d7816136b1565b60008083601f8401126127e157600080fd5b5081356001600160401b038111156127f857600080fd5b60208301915083600182028301111561214657600080fd5b80356120d7816136b9565b80516120d7816136b9565b80356120d7816136c6565b80516120d7816136c6565b80516120d7816136d3565b80356120d7816136e0565b600082601f83011261286357600080fd5b81356127448482602086016126a3565b600082601f83011261288457600080fd5b81516127448482602086016126dc565b600061022082840312156128a757600080fd5b6128b26101606134d0565b905060006128c0848461281b565b82525060206128d184848301612831565b60208301525060406128e58482850161283c565b60408301525060606128f9848285016129b9565b606083015250608061290d848285016127c4565b60808301525060a0612921848285016129b9565b60a08301525060c0612935848285016129b9565b60c08301525060e0612949848285016129b9565b60e0830152506101008201516001600160401b0381111561296957600080fd5b61297584828501612873565b6101008301525061012061298b84828501612788565b610120830152506102006129a1848285016129b9565b6101408301525092915050565b80356120d7816136ed565b80516120d7816136ed565b6000602082840312156129d657600080fd5b6000612744848461270d565b6000602082840312156129f457600080fd5b60006127448484612718565b600060a08284031215612a1257600080fd5b6000612744848461276a565b60006101208284031215612a3157600080fd5b600061274484846127a6565b600060208284031215612a4f57600080fd5b600061274484846127c4565b600080600060408486031215612a7057600080fd5b83356001600160401b03811115612a8657600080fd5b612a92868287016127cf565b93509350506020612aa58682870161270d565b9150509250925092565b600060208284031215612ac157600080fd5b6000612744848461281b565b60008060408385031215612ae057600080fd5b6000612aec8585612810565b9250506020612afd858286016129ae565b9150509250929050565b60008060008060a08587031215612b1d57600080fd5b6000612b298787612826565b9450506020612b3a87828801612810565b9350506040612b4b87828801612847565b9250506060612b5c8782880161274c565b91505092959194509250565b600060208284031215612b7a57600080fd5b81516001600160401b03811115612b9057600080fd5b61274484828501612894565b600060208284031215612bae57600080fd5b600061274484846129ae565b600060208284031215612bcc57600080fd5b600061274484846129b9565b60008060408385031215612beb57600080fd5b6000612bf785856129ae565b92505060208301356001600160401b03811115612c1357600080fd5b612afd85828601612723565b600080600060408486031215612c3457600080fd5b6000612c4086866129ae565b93505060208401356001600160401b03811115612c5c57600080fd5b612c68868287016127cf565b92509250509250925092565b60008060008060608587031215612c8a57600080fd5b6000612c9687876129ae565b94505060208501356001600160401b03811115612cb257600080fd5b612cbe87828801612852565b93505060408501356001600160401b03811115612cda57600080fd5b612ce6878288016127cf565b95989497509550505050565b612cfb81613588565b82525050565b612cfb612d0d82613588565b613639565b801515612cfb565b80612cfb565b612cfb816135a3565b612cfb816135ae565b6000612d3c825190565b808452602084019350612d538185602086016135c2565b601f01601f19169290920192915050565b601881526000602082017f45434453413a20696e76616c6964207369676e61747572650000000000000000815291505b5060200190565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081529150612d94565b60208082527f596f7520617265206e6f74206f776e6572206f66207468697320746f6b656e2e91019081526000612d94565b601281526000602082017124b73b30b634b21029b4b3b730ba3ab9329760711b81529150612d94565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015291505b5060400190565b60128152600060208201712737ba1030bb30b4b630b13632903737bb9760711b81529150612d94565b6011815260006020820170496e76616c6964207369676e617475726560781b81529150612d94565b60138152600060208201722cb7ba903234b23713ba103932b8bab2b9ba1760691b81529150612d94565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b60208201529150612e69565b601f81526000602082017f447261676f6e2073686f756c6420626520686174636865642066697273742e0081529150612d94565b60118152600060208201702737ba1032bc34b9ba39902a37b5b2b71760791b81529150612d94565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202776272076616c815261756560f01b60208201529150612e69565b601c81526000602082017f416c726561647920757067726164656420746f207370656369616c2e0000000081529150612d94565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000612d94565b600d81526000602082016c496e76616c69642076616c756560981b81529150612d94565b601281526000602082017120b63932b0b23c903932b8bab2b9ba32b21760711b81529150612d94565b60168152600060208201752cb7ba9030b932903737ba1027232a1037bbb732b91760511b81529150612d94565b600f81526000602082016e416c72656164792070656e64696e6760881b81529150612d94565b601a81526000602082017f4e6f20737461742063616e2062652075706772616461626c652e00000000000081529150612d94565b601a81526000602082017f596f75206e65656420746f20726571756573742066697273742e00000000000081529150612d94565b60168152600060208201752732b2b2103a379039b2b7321036b7b9329022aa241760511b81529150612d94565b600f81526000602082016e20b63932b0b23c90323930b3b7b71760891b81529150612d94565b601881526000602082017f53686f756c642062652070656e64696e672066697273742e000000000000000081529150612d94565b60ff8116612cfb565b60006131cf8284612d01565b50601401919050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c01600061320a8284612d1a565b50602001919050565b602081016120d78284612cf2565b6060810161322f8286612cf2565b61323c6020830185612cf2565b6127446040830184612d1a565b60a081016132578288612cf2565b6132646020830187612d1a565b6132716040830186612d12565b61327e6060830185612d1a565b61328b6080830184612d1a565b9695505050505050565b602081016120d78284612d12565b608081016132b18287612d1a565b6132be60208301866131ba565b6132cb6040830185612d1a565b6132d86060830184612d1a565b95945050505050565b602080825281016120d781612d64565b602080825281016120d781612d9b565b602080825281016120d781612dcf565b602080825281016120d781612e01565b602080825281016120d781612e2a565b602080825281016120d781612e70565b602080825281016120d781612e99565b602080825281016120d781612ec1565b602080825281016120d781612eeb565b602080825281016120d781612f2a565b602080825281016120d781612f5e565b602080825281016120d781612f86565b602080825281016120d781612fc5565b602080825281016120d781612ff9565b602080825281016120d78161302b565b602080825281016120d78161304f565b602080825281016120d781613078565b602080825281016120d7816130a5565b602080825281016120d7816130cb565b602080825281016120d7816130ff565b602080825281016120d781613133565b602080825281016120d781613160565b602080825281016120d781613186565b602081016120d78284612d1a565b6040810161346d8285612d1a565b611c476020830184612d20565b606081016134888286612d1a565b6134956020830185612d20565b6127446040830184612d29565b604081016134b08285612d1a565b81810360208301526127448184612d32565b602081016120d782846131ba565b60006134db60405190565b90506134e782826135f2565b919050565b60006001600160401b0382111561350557613505613677565b5060209081020190565b60006001600160401b0382111561352857613528613677565b5060200290565b60006001600160401b0382111561354857613548613677565b601f19601f83011660200192915050565b6000821982111561356c5761356c61364b565b500190565b6000828210156135835761358361364b565b500390565b60006001600160a01b0382166120d7565b806134e78161368d565b60006120d782613599565b6000816120d7565b82818337506000910152565b60005b838110156135dd5781810151838201526020016135c5565b838111156135ec576000848401525b50505050565b601f19601f83011681018181106001600160401b038211171561361757613617613677565b6040525050565b60006000198214156136325761363261364b565b5060010190565b60006120d78260006120d78260601b90565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60078110611e7c57611e7c613661565b6136a681613588565b8114611e7c57600080fd5b8015156136a6565b60048110611e7c57600080fd5b60058110611e7c57600080fd5b60028110611e7c57600080fd5b60078110611e7c57600080fd5b806136a656fea2646970667358221220bd48ed1472dc9849ccf2543194fdf2681cf35905c1ce8e47b14af056859524dd64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c80638da5cb5b1161010d578063b9ae46ab116100a0578063d07c63cf1161006f578063d07c63cf146105eb578063d7c1247c14610602578063e4d3b33914610622578063f2fde38b14610642578063fb7a21aa1461066257600080fd5b8063b9ae46ab14610569578063bd60b83f14610596578063c5ee6c68146105ab578063c9bfe036146105cb57600080fd5b80639ed4a4d7116100dc5780639ed4a4d7146104e7578063a0c307bc14610507578063a49062d414610527578063b7892dcb1461054957600080fd5b80638da5cb5b146104765780639021380814610494578063966fd1c7146104b45780639c9af7cb146104c757600080fd5b806352334fbe11610190578063689db9861161015f578063689db986146103e257806369d03738146104025780636c19e78314610422578063715018a6146104425780637ac3c02f1461045757600080fd5b806352334fbe14610325578063561aceae1461038f57806358970be7146103af5780635c10a858146103cf57600080fd5b8063238ac933116101cc578063238ac933146102805780632938ad50146102b757806347da0703146102d85780634fade0841461030557600080fd5b8063047e84e0146101fe578063082e8084146102205780631d2923a1146102405780631dc94a0c14610260575b600080fd5b34801561020a57600080fd5b5061021e610219366004612a00565b610682565b005b34801561022c57600080fd5b5061021e61023b366004612b9c565b6106c7565b34801561024c57600080fd5b5061021e61025b366004612bd8565b6107af565b34801561026c57600080fd5b5061021e61027b366004612a1e565b610ee2565b34801561028c57600080fd5b5061011a546102a1906001600160a01b031681565b6040516102ae9190613213565b60405180910390f35b3480156102c357600080fd5b5061011b546102a1906001600160a01b031681565b3480156102e457600080fd5b506102f86102f3366004612b9c565b610f1a565b6040516102ae9190613451565b34801561031157600080fd5b5061021e610320366004612b9c565b610f32565b34801561033157600080fd5b5061037e610340366004612b9c565b61011c60205260009081526040902080546002820154600383015460048401546005909401546001600160a01b0390931693919260ff909116919085565b6040516102ae959493929190613249565b34801561039b57600080fd5b5061021e6103aa366004612b9c565b611115565b3480156103bb57600080fd5b5061021e6103ca366004612b9c565b61114d565b61021e6103dd366004612c1f565b61117d565b3480156103ee57600080fd5b506102f86103fd366004612b9c565b611459565b34801561040e57600080fd5b5061021e61041d3660046129c4565b61146a565b34801561042e57600080fd5b5061021e61043d3660046129c4565b6114b7565b34801561044e57600080fd5b5061021e611504565b34801561046357600080fd5b5061011a546001600160a01b03166102a1565b34801561048257600080fd5b506000546001600160a01b03166102a1565b3480156104a057600080fd5b5061021e6104af366004612c74565b61153a565b61021e6104c2366004612c1f565b6115db565b3480156104d357600080fd5b5061021e6104e2366004612a1e565b611879565b3480156104f357600080fd5b506102f8610502366004612b9c565b6118b1565b34801561051357600080fd5b5061021e610522366004612c1f565b6118c2565b34801561053357600080fd5b5061053c600a81565b6040516102ae91906134c2565b34801561055557600080fd5b5061021e610564366004612b07565b611a60565b34801561057557600080fd5b50610589610584366004612a5b565b611b9b565b6040516102ae9190613295565b3480156105a257600080fd5b5061053c600181565b3480156105b757600080fd5b5061021e6105c6366004612b9c565b611c4e565b3480156105d757600080fd5b506102f86105e6366004612b9c565b611d36565b3480156105f757600080fd5b506102f861013a5481565b34801561060e57600080fd5b5061021e61061d366004612a00565b611d47565b34801561062e57600080fd5b5061021e61063d366004612acd565b611d7f565b34801561064e57600080fd5b5061021e61065d3660046129c4565b611e23565b34801561066e57600080fd5b5061021e61067d366004612c1f565b611e7f565b6000546001600160a01b031633146106b55760405162461bcd60e51b81526004016106ac906133b1565b60405180910390fd5b6106c361012f826005612391565b5050565b60008181526101396020526040902080546001600160a01b031633146106ff5760405162461bcd60e51b81526004016106ac906133e1565b600281015460ff166107235760405162461bcd60e51b81526004016106ac90613351565b61011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061075890309033908790600401613221565b600060405180830381600087803b15801561077257600080fd5b505af1158015610786573d6000803e3d6000fd5b505082546001600160a01b0319168355505060028101805460ff19169055600060019091015550565b61011b546040516331a9108f60e11b815233916001600160a01b031690636352211e906107e0908690600401613451565b60206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083091906129e2565b6001600160a01b0316146108565760405162461bcd60e51b81526004016106ac90613301565b61011b5460405163ced3e3f160e01b81526001600160a01b039091169063ced3e3f190610887908590600401613451565b60206040518083038186803b15801561089f57600080fd5b505afa1580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d79190612a3d565b6108f35760405162461bcd60e51b81526004016106ac90613371565b600082815261011c60205260409020600381015460ff16156109275760405162461bcd60e51b81526004016106ac906133d1565b61011b5460405163e0bb933b60e01b81526000916001600160a01b03169063e0bb933b90610959908790600401613451565b60006040518083038186803b15801561097157600080fd5b505afa158015610985573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ad9190810190612b68565b9050600080600080600087516001600160401b038111156109de57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610a07578160200160208202803683370190505b50905060005b8851811015610e0b5761011b5489516000916001600160a01b031690633a04e2f2908d908d9086908110610a5157634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401610a7692919061345f565b60206040518083038186803b158015610a8e57600080fd5b505afa158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac69190612bba565b61011b5460405163071b804560e11b81529192506000916001600160a01b0390911690630e37008a90610afd908f90600401613451565b60206040518083038186803b158015610b1557600080fd5b505afa158015610b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4d9190612aaf565b9050600060028a602001516004811115610b7757634e487b7160e01b600052602160045260246000fd5b60058110610b9557634e487b7160e01b600052603260045260246000fd5b603802018a600001516003811115610bbd57634e487b7160e01b600052602160045260246000fd5b60048110610bdb57634e487b7160e01b600052603260045260246000fd5b600e02018c8581518110610bff57634e487b7160e01b600052603260045260246000fd5b60200260200101516006811115610c2657634e487b7160e01b600052602160045260246000fd5b60078110610c4457634e487b7160e01b600052603260045260246000fd5b604080518082019182905292600292830201919082845b815481526020019060010190808311610c5b575050505050905060016000836003811115610c9957634e487b7160e01b600052602160045260246000fd5b6003811115610cb857634e487b7160e01b600052602160045260246000fd5b81526020019081526020016000205483108015610cd85750602081015183105b15610df5576001985061011d610cee8a85613571565b60098110610d0c57634e487b7160e01b600052603260045260246000fd5b0154610d189089613559565b9750610126610d28600185613571565b60098110610d4657634e487b7160e01b600052603260045260246000fd5b0154610d529088613559565b96508b8481518110610d7457634e487b7160e01b600052603260045260246000fd5b6020026020010151858781518110610d9c57634e487b7160e01b600052603260045260246000fd5b60200260200101906006811115610dc357634e487b7160e01b600052602160045260246000fd5b90816006811115610de457634e487b7160e01b600052602160045260246000fd5b90525085610df18161361e565b9650505b5050508080610e039061361e565b915050610a0d565b5084610e295760405162461bcd60e51b81526004016106ac90613401565b61011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610e5e90339030908e90600401613221565b600060405180830381600087803b158015610e7857600080fd5b505af1158015610e8c573d6000803e3d6000fd5b505088546001600160a01b03191633178955505060038701805460ff191660019081179091554260028901558151610ecb9189019060208401906123cf565b505050600485015560059093019290925550505050565b6000546001600160a01b03163314610f0c5760405162461bcd60e51b81526004016106ac906133b1565b6106c361012682600961248c565b6101348160058110610f2b57600080fd5b0154905081565b61011b546040516331a9108f60e11b815233916001600160a01b031690636352211e90610f63908590600401613451565b60206040518083038186803b158015610f7b57600080fd5b505afa158015610f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb391906129e2565b6001600160a01b031614610fd95760405162461bcd60e51b81526004016106ac90613301565b61011b5460405163ced3e3f160e01b81526001600160a01b039091169063ced3e3f19061100a908490600401613451565b60206040518083038186803b15801561102257600080fd5b505afa158015611036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105a9190612a3d565b156110775760405162461bcd60e51b81526004016106ac90613431565b61011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906110ac90339030908690600401613221565b600060405180830381600087803b1580156110c657600080fd5b505af11580156110da573d6000803e3d6000fd5b5050506000918252506101396020526040902080546001600160a01b0319163317815560028101805460ff1916600190811790915542910155565b600081815261013b6020526040902080546001600160a01b031633146106ff5760405162461bcd60e51b81526004016106ac906133e1565b6000546001600160a01b031633146111775760405162461bcd60e51b81526004016106ac906133b1565b61013a55565b61011a5461119790839083906001600160a01b0316611b9b565b6111b35760405162461bcd60e51b81526004016106ac90613311565b61011b5460405163ca8f8ff360e01b81526001600160a01b039091169063ca8f8ff3906111e4908690600401613451565b60206040518083038186803b1580156111fc57600080fd5b505afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190612a3d565b6112505760405162461bcd60e51b81526004016106ac90613381565b600083815261011c6020526040902080546001600160a01b031633146112885760405162461bcd60e51b81526004016106ac906133e1565b600381015460ff166112ac5760405162461bcd60e51b81526004016106ac90613411565b6112b98160040154611fd9565b806005015481600201546112cd9190613559565b4210156112ec5760405162461bcd60e51b81526004016106ac90613331565b61011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061132190309033908990600401613221565b600060405180830381600087803b15801561133b57600080fd5b505af115801561134f573d6000803e3d6000fd5b5050505060005b60018201548110156114235761011b546001830180546001600160a01b0390921691639585dae19188918590811061139e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff1660016040518463ffffffff1660e01b81526004016113de9392919061347a565b600060405180830381600087803b1580156113f857600080fd5b505af115801561140c573d6000803e3d6000fd5b50505050808061141b9061361e565b915050611356565b5060038101805460ff1916905560006002820181905581546001600160a01b031916825560058201819055600490910155505050565b61012f8160058110610f2b57600080fd5b6000546001600160a01b031633146114945760405162461bcd60e51b81526004016106ac906133b1565b61011b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146114e15760405162461bcd60e51b81526004016106ac906133b1565b61011a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461152e5760405162461bcd60e51b81526004016106ac906133b1565b6115386000612037565b565b61011a5461155490839083906001600160a01b0316611b9b565b6115705760405162461bcd60e51b81526004016106ac90613341565b61011b546040516314f9dbcb60e21b81526001600160a01b03909116906353e76f2c906115a390879087906004016134a2565b600060405180830381600087803b1580156115bd57600080fd5b505af11580156115d1573d6000803e3d6000fd5b5050505050505050565b61011a546115f590839083906001600160a01b0316611b9b565b6116115760405162461bcd60e51b81526004016106ac90613311565b600083815261013b6020526040902080546001600160a01b031633146116495760405162461bcd60e51b81526004016106ac906133e1565b600281015460ff1661166d5760405162461bcd60e51b81526004016106ac90613441565b61011b5460405163e0bb933b60e01b81526000916001600160a01b03169063e0bb933b9061169f908890600401613451565b60006040518083038186803b1580156116b757600080fd5b505afa1580156116cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116f39190810190612b68565b610140810151909150600061012f826005811061172057634e487b7160e01b600052603260045260246000fd5b015490506000610134836005811061174857634e487b7160e01b600052603260045260246000fd5b0154905061175581611fd9565b8185600101546117659190613559565b4210156117845760405162461bcd60e51b81526004016106ac90613331565b60028501805460ff191690556000600186015584546001600160a01b031916855561011b54604051633af36fd760e01b81526001600160a01b0390911690633af36fd7906117d6908b90600401613451565b600060405180830381600087803b1580156117f057600080fd5b505af1158015611804573d6000803e3d6000fd5b505061011b546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd915061183d90309033908d90600401613221565b600060405180830381600087803b15801561185757600080fd5b505af115801561186b573d6000803e3d6000fd5b505050505050505050505050565b6000546001600160a01b031633146118a35760405162461bcd60e51b81526004016106ac906133b1565b6106c361011d82600961248c565b6101268160098110610f2b57600080fd5b61011a546118dc90839083906001600160a01b0316611b9b565b6118f85760405162461bcd60e51b81526004016106ac90613311565b60008381526101396020526040902080546001600160a01b031633146119305760405162461bcd60e51b81526004016106ac906133e1565b600281015460ff166119545760405162461bcd60e51b81526004016106ac90613441565b61013a5481600101546119679190613559565b4210156119865760405162461bcd60e51b81526004016106ac90613331565b61011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906119bb90309033908990600401613221565b600060405180830381600087803b1580156119d557600080fd5b505af11580156119e9573d6000803e3d6000fd5b505061011b546040516308e1555360e21b81526001600160a01b039091169250632385554c9150611a1e908790600401613451565b600060405180830381600087803b158015611a3857600080fd5b505af1158015611a4c573d6000803e3d6000fd5b50505050600201805460ff19169055505050565b6000546001600160a01b03163314611a8a5760405162461bcd60e51b81526004016106ac906133b1565b6020810151600a10801590611aa157508051600111155b611abd5760405162461bcd60e51b81526004016106ac906133c1565b806002856004811115611ae057634e487b7160e01b600052602160045260246000fd5b60058110611afe57634e487b7160e01b600052603260045260246000fd5b60380201846003811115611b2257634e487b7160e01b600052602160045260246000fd5b60048110611b4057634e487b7160e01b600052603260045260246000fd5b600e0201836006811115611b6457634e487b7160e01b600052602160045260246000fd5b60078110611b8257634e487b7160e01b600052603260045260246000fd5b60020201906002611b949291906124b9565b5050505050565b60008033604051602001611baf91906131c3565b6040516020818303038152906040528051906020012090506000611bd282612087565b90506000611c168288888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120b792505050565b90506001600160a01b03811615801590611c415750846001600160a01b0316816001600160a01b0316145b93505050505b9392505050565b600081815261011c6020526040902080546001600160a01b03163314611c865760405162461bcd60e51b81526004016106ac906133e1565b600381015460ff16611caa5760405162461bcd60e51b81526004016106ac90613351565b61011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611cdf90309033908790600401613221565b600060405180830381600087803b158015611cf957600080fd5b505af1158015611d0d573d6000803e3d6000fd5b505082546001600160a01b0319168355505060038101805460ff19169055600060029091015550565b61011d8160098110610f2b57600080fd5b6000546001600160a01b03163314611d715760405162461bcd60e51b81526004016106ac906133b1565b6106c3610134826005612391565b6000546001600160a01b03163314611da95760405162461bcd60e51b81526004016106ac906133b1565b600a811115611dca5760405162461bcd60e51b81526004016106ac906133c1565b8060016000846003811115611def57634e487b7160e01b600052602160045260246000fd5b6003811115611e0e57634e487b7160e01b600052602160045260246000fd5b81526020810191909152604001600020555050565b6000546001600160a01b03163314611e4d5760405162461bcd60e51b81526004016106ac906133b1565b6001600160a01b038116611e735760405162461bcd60e51b81526004016106ac90613321565b611e7c81612037565b50565b611e8a828233611b9b565b611ea65760405162461bcd60e51b81526004016106ac90613341565b61011b54604051631fe29ae960e11b81526001600160a01b0390911690633fc535d290611ed7908690600401613451565b60206040518083038186803b158015611eef57600080fd5b505afa158015611f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f279190612a3d565b15611f445760405162461bcd60e51b81526004016106ac906133a1565b600083815261013b60205260409020600281015460ff1615611f785760405162461bcd60e51b81526004016106ac906133f1565b60028101805460ff1916600190811790915581546001600160a01b031916339081178355429183019190915561011b546040516323b872dd60e01b81526001600160a01b0391909116916323b872dd916115a3919030908990600401613221565b80341015611ff95760405162461bcd60e51b81526004016106ac90613421565b80341115611e7c57336108fc61200f8334613571565b6040518115909202916000818181858888f193505050501580156106c3573d6000803e3d6000fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008160405160200161209a91906131d8565b604051602081830303815290604052805190602001209050919050565b60008060006120c685856120dd565b915091506120d38161214d565b5090505b92915050565b6000808251604114156121145760208301516040840151606085015160001a61210887828585612278565b94509450505050612146565b82516040141561213e5760208301516040840151612133868383612358565b935093505050612146565b506000905060025b9250929050565b600081600481111561216f57634e487b7160e01b600052602160045260246000fd5b14156121785750565b600181600481111561219a57634e487b7160e01b600052602160045260246000fd5b14156121b85760405162461bcd60e51b81526004016106ac906132e1565b60028160048111156121da57634e487b7160e01b600052602160045260246000fd5b14156121f85760405162461bcd60e51b81526004016106ac906132f1565b600381600481111561221a57634e487b7160e01b600052602160045260246000fd5b14156122385760405162461bcd60e51b81526004016106ac90613361565b600481600481111561225a57634e487b7160e01b600052602160045260246000fd5b1415611e7c5760405162461bcd60e51b81526004016106ac90613391565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156122af575060009050600361234f565b8460ff16601b141580156122c757508460ff16601c14155b156122d8575060009050600461234f565b6000600187878787604051600081526020016040526040516122fd94939291906132a3565b6020604051602081039080840390855afa15801561231f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166123485760006001925092505061234f565b9150600090505b94509492505050565b6000806001600160ff1b0383168161237560ff86901c601b613559565b905061238387828885612278565b935093505050935093915050565b82600581019282156123bf579160200282015b828111156123bf5782518255916020019190600101906123a4565b506123cb9291506124e6565b5090565b82805482825590600052602060002090601f016020900481019282156123bf5791602002820160005b8382111561245257835183826101000a81548160ff0219169083600681111561243157634e487b7160e01b600052602160045260246000fd5b021790555092602001926001016020816000010492830192600103026123f8565b801561247f5782816101000a81549060ff0219169055600101602081600001049283019260010302612452565b50506123cb9291506124e6565b82600981019282156123bf57916020028201828111156123bf5782518255916020019190600101906123a4565b82600281019282156123bf57916020028201828111156123bf5782518255916020019190600101906123a4565b5b808211156123cb57600081556001016124e7565b600061250e612509846134ec565b6134d0565b9050808382526020820190508285602086028201111561252d57600080fd5b60005b8581101561255957816125438882612847565b8452506020928301929190910190600101612530565b5050509392505050565b60006125716125098461350f565b9050808285602086028201111561258757600080fd5b60005b85811015612559578161259d88826129ae565b845250602092830192919091019060010161258a565b60006125c16125098461350f565b905080828560208602820111156125d757600080fd5b60005b8581101561255957816125ed88826129ae565b84525060209283019291909101906001016125da565b60006126116125098461350f565b9050808285602086028201111561262757600080fd5b60005b85811015612559578161263d88826129b9565b845250602092830192919091019060010161262a565b60006126616125098461350f565b9050808285602086028201111561267757600080fd5b60005b85811015612559578161268d88826129ae565b845250602092830192919091019060010161267a565b60006126b16125098461352f565b9050828152602081018484840111156126c957600080fd5b6126d48482856135b6565b509392505050565b60006126ea6125098461352f565b90508281526020810184848401111561270257600080fd5b6126d48482856135c2565b80356120d78161369d565b80516120d78161369d565b600082601f83011261273457600080fd5b81356127448482602086016124fb565b949350505050565b600082601f83011261275d57600080fd5b6002612744848285612563565b600082601f83011261277b57600080fd5b60056127448482856125b3565b600082601f83011261279957600080fd5b6007612744848285612603565b600082601f8301126127b757600080fd5b6009612744848285612653565b80516120d7816136b1565b60008083601f8401126127e157600080fd5b5081356001600160401b038111156127f857600080fd5b60208301915083600182028301111561214657600080fd5b80356120d7816136b9565b80516120d7816136b9565b80356120d7816136c6565b80516120d7816136c6565b80516120d7816136d3565b80356120d7816136e0565b600082601f83011261286357600080fd5b81356127448482602086016126a3565b600082601f83011261288457600080fd5b81516127448482602086016126dc565b600061022082840312156128a757600080fd5b6128b26101606134d0565b905060006128c0848461281b565b82525060206128d184848301612831565b60208301525060406128e58482850161283c565b60408301525060606128f9848285016129b9565b606083015250608061290d848285016127c4565b60808301525060a0612921848285016129b9565b60a08301525060c0612935848285016129b9565b60c08301525060e0612949848285016129b9565b60e0830152506101008201516001600160401b0381111561296957600080fd5b61297584828501612873565b6101008301525061012061298b84828501612788565b610120830152506102006129a1848285016129b9565b6101408301525092915050565b80356120d7816136ed565b80516120d7816136ed565b6000602082840312156129d657600080fd5b6000612744848461270d565b6000602082840312156129f457600080fd5b60006127448484612718565b600060a08284031215612a1257600080fd5b6000612744848461276a565b60006101208284031215612a3157600080fd5b600061274484846127a6565b600060208284031215612a4f57600080fd5b600061274484846127c4565b600080600060408486031215612a7057600080fd5b83356001600160401b03811115612a8657600080fd5b612a92868287016127cf565b93509350506020612aa58682870161270d565b9150509250925092565b600060208284031215612ac157600080fd5b6000612744848461281b565b60008060408385031215612ae057600080fd5b6000612aec8585612810565b9250506020612afd858286016129ae565b9150509250929050565b60008060008060a08587031215612b1d57600080fd5b6000612b298787612826565b9450506020612b3a87828801612810565b9350506040612b4b87828801612847565b9250506060612b5c8782880161274c565b91505092959194509250565b600060208284031215612b7a57600080fd5b81516001600160401b03811115612b9057600080fd5b61274484828501612894565b600060208284031215612bae57600080fd5b600061274484846129ae565b600060208284031215612bcc57600080fd5b600061274484846129b9565b60008060408385031215612beb57600080fd5b6000612bf785856129ae565b92505060208301356001600160401b03811115612c1357600080fd5b612afd85828601612723565b600080600060408486031215612c3457600080fd5b6000612c4086866129ae565b93505060208401356001600160401b03811115612c5c57600080fd5b612c68868287016127cf565b92509250509250925092565b60008060008060608587031215612c8a57600080fd5b6000612c9687876129ae565b94505060208501356001600160401b03811115612cb257600080fd5b612cbe87828801612852565b93505060408501356001600160401b03811115612cda57600080fd5b612ce6878288016127cf565b95989497509550505050565b612cfb81613588565b82525050565b612cfb612d0d82613588565b613639565b801515612cfb565b80612cfb565b612cfb816135a3565b612cfb816135ae565b6000612d3c825190565b808452602084019350612d538185602086016135c2565b601f01601f19169290920192915050565b601881526000602082017f45434453413a20696e76616c6964207369676e61747572650000000000000000815291505b5060200190565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081529150612d94565b60208082527f596f7520617265206e6f74206f776e6572206f66207468697320746f6b656e2e91019081526000612d94565b601281526000602082017124b73b30b634b21029b4b3b730ba3ab9329760711b81529150612d94565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015291505b5060400190565b60128152600060208201712737ba1030bb30b4b630b13632903737bb9760711b81529150612d94565b6011815260006020820170496e76616c6964207369676e617475726560781b81529150612d94565b60138152600060208201722cb7ba903234b23713ba103932b8bab2b9ba1760691b81529150612d94565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b60208201529150612e69565b601f81526000602082017f447261676f6e2073686f756c6420626520686174636865642066697273742e0081529150612d94565b60118152600060208201702737ba1032bc34b9ba39902a37b5b2b71760791b81529150612d94565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202776272076616c815261756560f01b60208201529150612e69565b601c81526000602082017f416c726561647920757067726164656420746f207370656369616c2e0000000081529150612d94565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000612d94565b600d81526000602082016c496e76616c69642076616c756560981b81529150612d94565b601281526000602082017120b63932b0b23c903932b8bab2b9ba32b21760711b81529150612d94565b60168152600060208201752cb7ba9030b932903737ba1027232a1037bbb732b91760511b81529150612d94565b600f81526000602082016e416c72656164792070656e64696e6760881b81529150612d94565b601a81526000602082017f4e6f20737461742063616e2062652075706772616461626c652e00000000000081529150612d94565b601a81526000602082017f596f75206e65656420746f20726571756573742066697273742e00000000000081529150612d94565b60168152600060208201752732b2b2103a379039b2b7321036b7b9329022aa241760511b81529150612d94565b600f81526000602082016e20b63932b0b23c90323930b3b7b71760891b81529150612d94565b601881526000602082017f53686f756c642062652070656e64696e672066697273742e000000000000000081529150612d94565b60ff8116612cfb565b60006131cf8284612d01565b50601401919050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c01600061320a8284612d1a565b50602001919050565b602081016120d78284612cf2565b6060810161322f8286612cf2565b61323c6020830185612cf2565b6127446040830184612d1a565b60a081016132578288612cf2565b6132646020830187612d1a565b6132716040830186612d12565b61327e6060830185612d1a565b61328b6080830184612d1a565b9695505050505050565b602081016120d78284612d12565b608081016132b18287612d1a565b6132be60208301866131ba565b6132cb6040830185612d1a565b6132d86060830184612d1a565b95945050505050565b602080825281016120d781612d64565b602080825281016120d781612d9b565b602080825281016120d781612dcf565b602080825281016120d781612e01565b602080825281016120d781612e2a565b602080825281016120d781612e70565b602080825281016120d781612e99565b602080825281016120d781612ec1565b602080825281016120d781612eeb565b602080825281016120d781612f2a565b602080825281016120d781612f5e565b602080825281016120d781612f86565b602080825281016120d781612fc5565b602080825281016120d781612ff9565b602080825281016120d78161302b565b602080825281016120d78161304f565b602080825281016120d781613078565b602080825281016120d7816130a5565b602080825281016120d7816130cb565b602080825281016120d7816130ff565b602080825281016120d781613133565b602080825281016120d781613160565b602080825281016120d781613186565b602081016120d78284612d1a565b6040810161346d8285612d1a565b611c476020830184612d20565b606081016134888286612d1a565b6134956020830185612d20565b6127446040830184612d29565b604081016134b08285612d1a565b81810360208301526127448184612d32565b602081016120d782846131ba565b60006134db60405190565b90506134e782826135f2565b919050565b60006001600160401b0382111561350557613505613677565b5060209081020190565b60006001600160401b0382111561352857613528613677565b5060200290565b60006001600160401b0382111561354857613548613677565b601f19601f83011660200192915050565b6000821982111561356c5761356c61364b565b500190565b6000828210156135835761358361364b565b500390565b60006001600160a01b0382166120d7565b806134e78161368d565b60006120d782613599565b6000816120d7565b82818337506000910152565b60005b838110156135dd5781810151838201526020016135c5565b838111156135ec576000848401525b50505050565b601f19601f83011681018181106001600160401b038211171561361757613617613677565b6040525050565b60006000198214156136325761363261364b565b5060010190565b60006120d78260006120d78260601b90565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60078110611e7c57611e7c613661565b6136a681613588565b8114611e7c57600080fd5b8015156136a6565b60048110611e7c57600080fd5b60058110611e7c57600080fd5b60028110611e7c57600080fd5b60078110611e7c57600080fd5b806136a656fea2646970667358221220bd48ed1472dc9849ccf2543194fdf2681cf35905c1ce8e47b14af056859524dd64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8500,
        "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
        "label": "ageLimitInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_enum(Age)8448,t_uint256)"
      },
      {
        "astId": 8510,
        "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
        "label": "stateRanges",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_array(t_array(t_array(t_uint256)2_storage)7_storage)4_storage)5_storage"
      },
      {
        "astId": 7034,
        "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
        "label": "signer",
        "offset": 0,
        "slot": "282",
        "type": "t_address"
      },
      {
        "astId": 7036,
        "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
        "label": "dragonNFTAddress",
        "offset": 0,
        "slot": "283",
        "type": "t_address"
      },
      {
        "astId": 7041,
        "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
        "label": "pendingToUpgradeInfo",
        "offset": 0,
        "slot": "284",
        "type": "t_mapping(t_uint256,t_struct(PendingToUpgradeState)7032_storage)"
      },
      {
        "astId": 7055,
        "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
        "label": "pendingDurationForState",
        "offset": 0,
        "slot": "285",
        "type": "t_array(t_uint256)9_storage"
      },
      {
        "astId": 7069,
        "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
        "label": "feeForUpgradeState",
        "offset": 0,
        "slot": "294",
        "type": "t_array(t_uint256)9_storage"
      },
      {
        "astId": 7079,
        "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
        "label": "pendingDurationForSpecialSkill",
        "offset": 0,
        "slot": "303",
        "type": "t_array(t_uint256)5_storage"
      },
      {
        "astId": 7089,
        "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
        "label": "feeForUpgradeSpecial",
        "offset": 0,
        "slot": "308",
        "type": "t_array(t_uint256)5_storage"
      },
      {
        "astId": 7094,
        "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
        "label": "pendingToDragonInfo",
        "offset": 0,
        "slot": "313",
        "type": "t_mapping(t_uint256,t_struct(PendingToDragon)7010_storage)"
      },
      {
        "astId": 7097,
        "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
        "label": "durationForHatch",
        "offset": 0,
        "slot": "314",
        "type": "t_uint256"
      },
      {
        "astId": 7108,
        "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
        "label": "pendingToUpgradeSpecial",
        "offset": 0,
        "slot": "315",
        "type": "t_mapping(t_uint256,t_struct(PendingToUpgradeSpecial)7017_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_array(t_array(t_uint256)2_storage)7_storage)4_storage)5_storage": {
        "base": "t_array(t_array(t_array(t_uint256)2_storage)7_storage)4_storage",
        "encoding": "inplace",
        "label": "uint256[2][7][4][5]",
        "numberOfBytes": "8960"
      },
      "t_array(t_array(t_array(t_uint256)2_storage)7_storage)4_storage": {
        "base": "t_array(t_array(t_uint256)2_storage)7_storage",
        "encoding": "inplace",
        "label": "uint256[2][7][4]",
        "numberOfBytes": "1792"
      },
      "t_array(t_array(t_uint256)2_storage)7_storage": {
        "base": "t_array(t_uint256)2_storage",
        "encoding": "inplace",
        "label": "uint256[2][7]",
        "numberOfBytes": "448"
      },
      "t_array(t_enum(Stat)8456)dyn_storage": {
        "base": "t_enum(Stat)8456",
        "encoding": "dynamic_array",
        "label": "enum DragonBasic.Stat[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_uint256)9_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[9]",
        "numberOfBytes": "288"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Age)8448": {
        "encoding": "inplace",
        "label": "enum DragonBasic.Age",
        "numberOfBytes": "1"
      },
      "t_enum(Stat)8456": {
        "encoding": "inplace",
        "label": "enum DragonBasic.Stat",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(Age)8448,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Age)8448",
        "label": "mapping(enum DragonBasic.Age => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PendingToDragon)7010_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DragonUpdateManager.PendingToDragon)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingToDragon)7010_storage"
      },
      "t_mapping(t_uint256,t_struct(PendingToUpgradeSpecial)7017_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DragonUpdateManager.PendingToUpgradeSpecial)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingToUpgradeSpecial)7017_storage"
      },
      "t_mapping(t_uint256,t_struct(PendingToUpgradeState)7032_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DragonUpdateManager.PendingToUpgradeState)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingToUpgradeState)7032_storage"
      },
      "t_struct(PendingToDragon)7010_storage": {
        "encoding": "inplace",
        "label": "struct DragonUpdateManager.PendingToDragon",
        "members": [
          {
            "astId": 7005,
            "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7007,
            "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
            "label": "startAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7009,
            "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
            "label": "pending",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PendingToUpgradeSpecial)7017_storage": {
        "encoding": "inplace",
        "label": "struct DragonUpdateManager.PendingToUpgradeSpecial",
        "members": [
          {
            "astId": 7012,
            "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7014,
            "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
            "label": "startAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7016,
            "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
            "label": "pending",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PendingToUpgradeState)7032_storage": {
        "encoding": "inplace",
        "label": "struct DragonUpdateManager.PendingToUpgradeState",
        "members": [
          {
            "astId": 7019,
            "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7023,
            "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
            "label": "stats",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_enum(Stat)8456)dyn_storage"
          },
          {
            "astId": 7025,
            "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
            "label": "startAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7027,
            "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
            "label": "pending",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 7029,
            "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
            "label": "fee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7031,
            "contract": "contracts/DragonUpdateManager.sol:DragonUpdateManager",
            "label": "duration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}