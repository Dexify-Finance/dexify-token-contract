{
  "language": "Solidity",
  "sources": {
    "contracts/Avatar.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./library/StringUtils.sol\";\r\nimport \"./interface/ERC721A.sol\";\r\nimport \"./interface/AvatarBasic.sol\";\r\nimport \"hardhat/console.sol\";\r\n/**************************************************\r\n * Avatar NFT\r\n *\r\n * Created for Pyre by: Patrick Kishi\r\n * Audited by: Jill\r\n * Special thanks goes to: Jill\r\n ***************************************************\r\n */\r\n\r\ncontract Avatar is ERC721A, AvatarBasic, Ownable, ReentrancyGuard {\r\n    using Strings for uint256;\r\n    struct AvatarDataType {\r\n        bool isKeeper;\r\n        string name;\r\n        uint[7] ability;\r\n    }\r\n    \r\n    //sum of initial states\r\n    uint public initialSum = 35;\r\n    uint8 public constant MIN_LEVEL = 1;\r\n    uint8 public constant MAX_LEVEL = 10;\r\n    \r\n    // Minters\r\n    mapping(address => bool) private minters;\r\n    // Updaters\r\n    mapping(address => bool) private updaters;\r\n\r\n    mapping(uint => AvatarDataType) internal avatarInfo;\r\n    \r\n    // NFT Token Uris\r\n    mapping(uint => string) internal _tokenUris;\r\n    \r\n    modifier onlyMinter() {\r\n        require(minters[msg.sender], \"Caller should be minter.\");\r\n        _;\r\n    }\r\n    modifier onlyUpdater() {\r\n        require(updaters[msg.sender], \"Caller should be updater.\");\r\n        _;\r\n    }\r\n    modifier onlyOperator() {\r\n        require(minters[msg.sender] || updaters[msg.sender], \"Caller should be either minter or updater.\");\r\n        _;\r\n    }\r\n   \r\n    /**\r\n        @param maxBatchSize_ Max size for ERC721A batch mint.\r\n        @param collectionSize_ NFT collection size\r\n    */\r\n    constructor(\r\n        uint16 maxBatchSize_,\r\n        uint16 collectionSize_\r\n    ) ERC721A(\"Pyre-Avatar\", \"Avatar\", maxBatchSize_, collectionSize_) AvatarBasic() {\r\n    }\r\n\r\n    function mintNFT(\r\n        address to,\r\n        uint8 quantity,\r\n        uint8[][] memory values,\r\n        string[] memory metadataUris,\r\n        string[] memory names\r\n    )\r\n        external\r\n        nonReentrant\r\n        onlyMinter\r\n    {\r\n        require(totalSupply() + quantity <= collectionSize, \"Exceeds Max Supply\");\r\n        require(values.length == quantity, \"No match array size.\");\r\n        require(names.length == quantity, \"No match names size.\");\r\n\r\n        uint originalSupply = totalSupply();\r\n        _safeMint(to, quantity);\r\n        \r\n        for (uint i = 0; i < quantity ; i ++) {\r\n            require(getSum(values[i]) == initialSum, \"Invalid state values.\");\r\n            setAvatarState(originalSupply + i, values[i]);\r\n        }\r\n\r\n        for (uint i = 0; i < quantity; i ++) {\r\n            _tokenUris[originalSupply + i] = metadataUris[i];\r\n        }\r\n\r\n        for (uint i = 0; i < quantity; i ++) {\r\n            updateName(originalSupply + i, names[i]);\r\n        }\r\n    }\r\n\r\n    function getSum(uint8[] memory value) internal pure returns(uint sum) {\r\n        sum = 0;\r\n        for (uint i = 0; i < value.length; i ++) {\r\n            sum += value[i];\r\n        }\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n        return _tokenUris[tokenId];\r\n    }\r\n\r\n    function isKeeper(uint tokenId) public view returns(bool) {\r\n         require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n        AvatarDataType memory data = avatarInfo[tokenId];\r\n\r\n        return data.isKeeper;\r\n    }\r\n\r\n    function getKeepers(address sender) external view returns(uint[] memory) {\r\n        console.log('keepers: ');\r\n        uint balance = balanceOf(sender);\r\n        uint[] memory _keepers = new uint[](balance);\r\n        uint index = 0;\r\n        for (uint i = 0; i < balance; i ++) {\r\n            uint tokenId = tokenOfOwnerByIndex(sender, i);\r\n            if (isKeeper(tokenId)) {\r\n                _keepers[index] = tokenId;\r\n                index ++;\r\n            }\r\n        }\r\n\r\n        return _keepers;\r\n    }\r\n\r\n    // Advance human to keeper\r\n    function upgradeToKeeper(uint tokenId) public onlyUpdater {\r\n        require(!isKeeper(tokenId), \"Already upgraded to Keeper.\");\r\n\r\n        AvatarDataType storage data = avatarInfo[tokenId];\r\n        data.isKeeper = true;\r\n    }\r\n\r\n    function setAvatarState(uint _tokenId, uint8[] memory value) public onlyOperator {\r\n        require(_exists(_tokenId), \"Not exist NFT.\");\r\n\r\n        AvatarDataType storage data = avatarInfo[_tokenId];\r\n        for (uint i = 0; i < value.length ; i ++) {\r\n            require(value[i] >= MIN_LEVEL && value[i] <= MAX_LEVEL, \"Invalid stat value\");\r\n            data.ability[i] = value[i];\r\n        }\r\n    }\r\n\r\n    function setSingleAvatarState(uint _tokenId, Stat key, uint value) public onlyUpdater {\r\n        require(_exists(_tokenId), \"Not exist NFT.\");\r\n        require(value >= MIN_LEVEL && value <= MAX_LEVEL, \"Invalid value.\");\r\n\r\n        AvatarDataType storage data = avatarInfo[_tokenId];\r\n        uint[7] storage ability = data.ability;\r\n\r\n        ability[uint(key)] = value;\r\n    }\r\n\r\n    function upgradeState(uint _tokenId, Stat key, uint delta ) public onlyUpdater {\r\n        require(_exists(_tokenId), \"Not exist NFT.\");\r\n\r\n        AvatarDataType storage data = avatarInfo[_tokenId];\r\n        uint[7] storage ability = data.ability;\r\n\r\n        uint value = ability[uint(key)] + delta;\r\n        require(value >= MIN_LEVEL && value <= MAX_LEVEL, \"Invalid value.\");\r\n\r\n        ability[uint(key)] = value;\r\n        \r\n    }\r\n\r\n    function updateName(uint _tokenId, string memory name) public onlyOperator {\r\n        require(_exists(_tokenId), \"Not exists token\");\r\n        AvatarDataType storage data = avatarInfo[_tokenId];\r\n        data.name = name;\r\n    }\r\n\r\n    function getAvatar(uint _tokenId) public view returns (AvatarDataType memory) {\r\n        require(\r\n            _exists(_tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        return avatarInfo[_tokenId];\r\n    }\r\n\r\n    function getSingleState(uint _tokenId, Stat key) external view returns(uint) {\r\n        require(_exists(_tokenId), \"Not exist NFT.\");\r\n        AvatarDataType memory data = avatarInfo[_tokenId];\r\n\r\n        return data.ability[uint(key)];\r\n    }\r\n\r\n    function setTokenUri(uint tokenId, string memory uri) external onlyUpdater {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n        _tokenUris[tokenId] = uri;\r\n    }\r\n\r\n    // Admin actions\r\n    function addMinter(address _address) external onlyOwner {\r\n        require(!minters[_address], \"Already minter.\");\r\n        minters[_address] = true;\r\n    }\r\n\r\n    function addUpdater(address _address) external onlyOwner {\r\n        require(!updaters[_address], \"Already updater.\");\r\n        updaters[_address] = true;\r\n    }\r\n    function removeMinter (address _address) external onlyOwner {\r\n        require(minters[_address], \"Already removed.\");\r\n        minters[_address] = false;\r\n    }\r\n    function removeupdater(address _address) external onlyOwner {\r\n        require(updaters[_address], \"Already removed.\");\r\n        updaters[_address] = false;\r\n    }\r\n\r\n    // utility functions\r\n    function numberMinted(address owner) public view returns (uint256) {\r\n        return _numberMinted(owner);\r\n    }\r\n\r\n    function getOwnershipData(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (TokenOwnership memory)\r\n    {\r\n        return ownershipOf(tokenId);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/library/StringUtils.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\nlibrary StringUtils {\r\n    /// @dev Does a byte-by-byte lexicographical comparison of two strings.\r\n    /// @return a negative number if `_a` is smaller, zero if they are equal\r\n    /// and a positive numbe if `_b` is smaller.\r\n    function compare(string memory _a, string memory _b) public pure returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n    /// @dev Compares two strings and returns true iff they are equal.\r\n    function equal(string memory _a, string memory _b) public pure returns (bool) {\r\n        return compare(_a, _b) == 0;\r\n    }\r\n    /// @dev Finds the index of the first occurrence of _needle in _haystack\r\n    function indexOf(string memory _haystack, string memory _needle) public pure returns (int)\r\n    {\r\n    \tbytes memory h = bytes(_haystack);\r\n    \tbytes memory n = bytes(_needle);\r\n    \tif(h.length < 1 || n.length < 1 || (n.length > h.length)) \r\n    \t\treturn -1;\r\n    \telse if(h.length > (2**128 -1)) // since we have to be able to return -1 (if the char isn't found or input error), this function must return an \"int\" type with a max length of (2^128 - 1)\r\n    \t\treturn -1;\t\t\t\t\t\t\t\t\t\r\n    \telse\r\n    \t{\r\n    \t\tuint subindex = 0;\r\n    \t\tfor (uint i = 0; i < h.length; i ++)\r\n    \t\t{\r\n    \t\t\tif (h[i] == n[0]) // found the first char of b\r\n    \t\t\t{\r\n    \t\t\t\tsubindex = 1;\r\n    \t\t\t\twhile(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]) // search until the chars don't match or until we reach the end of a or b\r\n    \t\t\t\t{\r\n    \t\t\t\t\tsubindex++;\r\n    \t\t\t\t}\t\r\n    \t\t\t\tif(subindex == n.length)\r\n    \t\t\t\t\treturn int(i);\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\treturn -1;\r\n    \t}\t\r\n    }\r\n}"
    },
    "contracts/interface/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\r\n *\r\n * Assumes the number of issuable tokens (collection size) is capped and fits in a uint128.\r\n *\r\n * Does not support burning tokens to address(0).\r\n */\r\ncontract ERC721A is\r\n  Context,\r\n  ERC165,\r\n  IERC721,\r\n  IERC721Metadata,\r\n  IERC721Enumerable\r\n{\r\n  using Address for address;\r\n  using Strings for uint256;\r\n\r\n  struct TokenOwnership {\r\n    address addr;\r\n    uint64 startTimestamp;\r\n  }\r\n\r\n  struct AddressData {\r\n    uint128 balance;\r\n    uint128 numberMinted;\r\n  }\r\n\r\n  uint256 private currentIndex = 0;\r\n\r\n  uint256 internal immutable collectionSize;\r\n  uint256 internal immutable maxBatchSize;\r\n\r\n  // Token name\r\n  string private _name;\r\n\r\n  // Token symbol\r\n  string private _symbol;\r\n\r\n  // Mapping from token ID to ownership details\r\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\r\n  mapping(uint256 => TokenOwnership) private _ownerships;\r\n\r\n  // Mapping owner address to address data\r\n  mapping(address => AddressData) private _addressData;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping(uint256 => address) private _tokenApprovals;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n  /**\r\n   * @dev\r\n   * `maxBatchSize` refers to how much a minter can mint at a time.\r\n   * `collectionSize_` refers to how many tokens are in the collection.\r\n   */\r\n  constructor(\r\n    string memory name_,\r\n    string memory symbol_,\r\n    uint256 maxBatchSize_,\r\n    uint256 collectionSize_\r\n  ) {\r\n    require(\r\n      collectionSize_ > 0,\r\n      \"ERC721A: collection must have a nonzero supply\"\r\n    );\r\n    require(maxBatchSize_ > 0, \"ERC721A: max batch size must be nonzero\");\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    maxBatchSize = maxBatchSize_;\r\n    collectionSize = collectionSize_;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-totalSupply}.\r\n   */\r\n  function totalSupply() public view override returns (uint256) {\r\n    return currentIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-tokenByIndex}.\r\n   */\r\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\r\n    require(index < totalSupply(), \"ERC721A: global index out of bounds\");\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n   * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.\r\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\r\n   */\r\n  function tokenOfOwnerByIndex(address owner, uint256 index)\r\n    public\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    require(index < balanceOf(owner), \"ERC721A: owner index out of bounds\");\r\n    uint256 numMintedSoFar = totalSupply();\r\n    uint256 tokenIdsIdx = 0;\r\n    address currOwnershipAddr = address(0);\r\n    for (uint256 i = 0; i < numMintedSoFar; i++) {\r\n      TokenOwnership memory ownership = _ownerships[i];\r\n      if (ownership.addr != address(0)) {\r\n        currOwnershipAddr = ownership.addr;\r\n      }\r\n      if (currOwnershipAddr == owner) {\r\n        if (tokenIdsIdx == index) {\r\n          return i;\r\n        }\r\n        tokenIdsIdx++;\r\n      }\r\n    }\r\n    revert(\"ERC721A: unable to get token of owner by index\");\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(ERC165, IERC165)\r\n    returns (bool)\r\n  {\r\n    return\r\n      interfaceId == type(IERC721).interfaceId ||\r\n      interfaceId == type(IERC721Metadata).interfaceId ||\r\n      interfaceId == type(IERC721Enumerable).interfaceId ||\r\n      super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-balanceOf}.\r\n   */\r\n  function balanceOf(address owner) public view override returns (uint256) {\r\n    require(owner != address(0), \"ERC721A: balance query for the zero address\");\r\n    return uint256(_addressData[owner].balance);\r\n  }\r\n\r\n  function _numberMinted(address owner) internal view returns (uint256) {\r\n    require(\r\n      owner != address(0),\r\n      \"ERC721A: number minted query for the zero address\"\r\n    );\r\n    return uint256(_addressData[owner].numberMinted);\r\n  }\r\n\r\n  function ownershipOf(uint256 tokenId)\r\n    internal\r\n    view\r\n    returns (TokenOwnership memory)\r\n  {\r\n    require(_exists(tokenId), \"ERC721A: owner query for nonexistent token\");\r\n\r\n    uint256 lowestTokenToCheck;\r\n    if (tokenId >= maxBatchSize) {\r\n      lowestTokenToCheck = tokenId - maxBatchSize + 1;\r\n    }\r\n\r\n    for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\r\n      TokenOwnership memory ownership = _ownerships[curr];\r\n      if (ownership.addr != address(0)) {\r\n        return ownership;\r\n      }\r\n    }\r\n\r\n    revert(\"ERC721A: unable to determine the owner of token\");\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-ownerOf}.\r\n   */\r\n  function ownerOf(uint256 tokenId) public view override returns (address) {\r\n    return ownershipOf(tokenId).addr;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-name}.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-symbol}.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-tokenURI}.\r\n   */\r\n  function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n  {\r\n    require(\r\n      _exists(tokenId),\r\n      \"ERC721Metadata: URI query for nonexistent token\"\r\n    );\r\n\r\n    string memory baseURI = _baseURI();\r\n    return\r\n      bytes(baseURI).length > 0\r\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n        : \"\";\r\n  }\r\n\r\n  /**\r\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n   * by default, can be overriden in child contracts.\r\n   */\r\n  function _baseURI() internal view virtual returns (string memory) {\r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-approve}.\r\n   */\r\n  function approve(address to, uint256 tokenId) public override {\r\n    address owner = ERC721A.ownerOf(tokenId);\r\n    require(to != owner, \"ERC721A: approval to current owner\");\r\n\r\n    require(\r\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n      \"ERC721A: approve caller is not owner nor approved for all\"\r\n    );\r\n\r\n    _approve(to, tokenId, owner);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-getApproved}.\r\n   */\r\n  function getApproved(uint256 tokenId) public view override returns (address) {\r\n    require(_exists(tokenId), \"ERC721A: approved query for nonexistent token\");\r\n\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-setApprovalForAll}.\r\n   */\r\n  function setApprovalForAll(address operator, bool approved) public override {\r\n    require(operator != _msgSender(), \"ERC721A: approve to caller\");\r\n\r\n    _operatorApprovals[_msgSender()][operator] = approved;\r\n    emit ApprovalForAll(_msgSender(), operator, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-isApprovedForAll}.\r\n   */\r\n  function isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-transferFrom}.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public override {\r\n    _transfer(from, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public override {\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) public override {\r\n    _transfer(from, to, tokenId);\r\n    require(\r\n      _checkOnERC721Received(from, to, tokenId, _data),\r\n      \"ERC721A: transfer to non ERC721Receiver implementer\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether `tokenId` exists.\r\n   *\r\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n   *\r\n   * Tokens start existing when they are minted (`_mint`),\r\n   */\r\n  function _exists(uint256 tokenId) internal view returns (bool) {\r\n    return tokenId < currentIndex;\r\n  }\r\n\r\n  function _safeMint(address to, uint256 quantity) internal {\r\n    _safeMint(to, quantity, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Mints `quantity` tokens and transfers them to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - there must be `quantity` tokens remaining unminted in the total collection.\r\n   * - `to` cannot be the zero address.\r\n   * - `quantity` cannot be larger than the max batch size.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _safeMint(\r\n    address to,\r\n    uint256 quantity,\r\n    bytes memory _data\r\n  ) internal {\r\n    uint256 startTokenId = currentIndex;\r\n    require(to != address(0), \"ERC721A: mint to the zero address\");\r\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\r\n    require(!_exists(startTokenId), \"ERC721A: token already minted\");\r\n    require(quantity <= maxBatchSize, \"ERC721A: quantity to mint too high\");\r\n\r\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n    AddressData memory addressData = _addressData[to];\r\n    _addressData[to] = AddressData(\r\n      addressData.balance + uint128(quantity),\r\n      addressData.numberMinted + uint128(quantity)\r\n    );\r\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\r\n\r\n    uint256 updatedIndex = startTokenId;\r\n\r\n    for (uint256 i = 0; i < quantity; i++) {\r\n      emit Transfer(address(0), to, updatedIndex);\r\n      require(\r\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\r\n        \"ERC721A: transfer to non ERC721Receiver implementer\"\r\n      );\r\n      updatedIndex++;\r\n    }\r\n\r\n    currentIndex = updatedIndex;\r\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers `tokenId` from `from` to `to`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - `tokenId` token must be owned by `from`.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) private {\r\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n      getApproved(tokenId) == _msgSender() ||\r\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\r\n\r\n    require(\r\n      isApprovedOrOwner,\r\n      \"ERC721A: transfer caller is not owner nor approved\"\r\n    );\r\n\r\n    require(\r\n      prevOwnership.addr == from,\r\n      \"ERC721A: transfer from incorrect owner\"\r\n    );\r\n    require(to != address(0), \"ERC721A: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n    // Clear approvals from the previous owner\r\n    _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n    _addressData[from].balance -= 1;\r\n    _addressData[to].balance += 1;\r\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\r\n\r\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n    uint256 nextTokenId = tokenId + 1;\r\n    if (_ownerships[nextTokenId].addr == address(0)) {\r\n      if (_exists(nextTokenId)) {\r\n        _ownerships[nextTokenId] = TokenOwnership(\r\n          prevOwnership.addr,\r\n          prevOwnership.startTimestamp\r\n        );\r\n      }\r\n    }\r\n\r\n    emit Transfer(from, to, tokenId);\r\n    _afterTokenTransfers(from, to, tokenId, 1);\r\n  }\r\n\r\n  /**\r\n   * @dev Approve `to` to operate on `tokenId`\r\n   *\r\n   * Emits a {Approval} event.\r\n   */\r\n  function _approve(\r\n    address to,\r\n    uint256 tokenId,\r\n    address owner\r\n  ) private {\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(owner, to, tokenId);\r\n  }\r\n\r\n  uint256 public nextOwnerToExplicitlySet = 0;\r\n\r\n  /**\r\n   * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\r\n   */\r\n  function _setOwnersExplicit(uint256 quantity) internal {\r\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\r\n    require(quantity > 0, \"quantity must be nonzero\");\r\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\r\n    if (endIndex > collectionSize - 1) {\r\n      endIndex = collectionSize - 1;\r\n    }\r\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\r\n    require(_exists(endIndex), \"not enough minted yet for this cleanup\");\r\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\r\n      if (_ownerships[i].addr == address(0)) {\r\n        TokenOwnership memory ownership = ownershipOf(i);\r\n        _ownerships[i] = TokenOwnership(\r\n          ownership.addr,\r\n          ownership.startTimestamp\r\n        );\r\n      }\r\n    }\r\n    nextOwnerToExplicitlySet = endIndex + 1;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n   * The call is not executed if the target address is not a contract.\r\n   *\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param to target address that will receive the tokens\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return bool whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) private returns (bool) {\r\n    if (to.isContract()) {\r\n      try\r\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\r\n      returns (bytes4 retval) {\r\n        return retval == IERC721Receiver(to).onERC721Received.selector;\r\n      } catch (bytes memory reason) {\r\n        if (reason.length == 0) {\r\n          revert(\"ERC721A: transfer to non ERC721Receiver implementer\");\r\n        } else {\r\n          assembly {\r\n            revert(add(32, reason), mload(reason))\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n   *\r\n   * startTokenId - the first token id to be transferred\r\n   * quantity - the amount to be transferred\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n   * transferred to `to`.\r\n   * - When `from` is zero, `tokenId` will be minted for `to`.\r\n   */\r\n  function _beforeTokenTransfers(\r\n    address from,\r\n    address to,\r\n    uint256 startTokenId,\r\n    uint256 quantity\r\n  ) internal virtual {}\r\n\r\n  /**\r\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n   * minting.\r\n   *\r\n   * startTokenId - the first token id to be transferred\r\n   * quantity - the amount to be transferred\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero.\r\n   * - `from` and `to` are never both zero.\r\n   */\r\n  function _afterTokenTransfers(\r\n    address from,\r\n    address to,\r\n    uint256 startTokenId,\r\n    uint256 quantity\r\n  ) internal virtual {}\r\n}"
    },
    "contracts/interface/AvatarBasic.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\ncontract AvatarBasic {\r\n    \r\n    enum Stat {\r\n        Strength,\r\n        Agility,\r\n        Charisma,\r\n        Knowledge,\r\n        Intuition,\r\n        Endurance,\r\n        Magic\r\n    }\r\n\r\n    enum CustomizableTrait {\r\n        Tops,\r\n        Bottoms,\r\n        Hairstyles,\r\n        Tattoos,\r\n        Shoes,\r\n        Glasses\r\n    }\r\n\r\n    // Train types\r\n    enum TrainType {\r\n        Gym,\r\n        Study,\r\n        Obstacle,\r\n        Socialise,\r\n        MagicSchool\r\n    }\r\n\r\n    function indexToStat(uint index) internal pure returns(Stat) {\r\n        require(index < 7, \"Invalid stat index.\");\r\n\r\n        if (index == 0) {\r\n            return Stat.Strength;\r\n        } else if (index == 1) {\r\n            return Stat.Agility;\r\n        } else if (index == 2) {\r\n            return Stat.Charisma;\r\n        } else if (index == 3) {\r\n            return Stat.Knowledge;\r\n        } else if (index == 4) {\r\n            return Stat.Intuition;\r\n        } else if (index == 5) {\r\n            return Stat.Endurance;\r\n        } else {\r\n            return Stat.Magic;\r\n        }\r\n    }\r\n}"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/DragonSaleManger.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"./Dragon.sol\";\r\nimport \"./Avatar.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract DragonSaleManager is Ownable {\r\n    // sale signer\r\n    address public signer;\r\n\r\n    // Avatar NFT\r\n    address public nftAddress;\r\n\r\n    // nft price in ETH\r\n    uint public priceInEth;\r\n\r\n    // nft price in Token\r\n    uint public priceInToken;\r\n\r\n    // payment token\r\n    IERC20 public paymentToken;\r\n\r\n    // AvatarNFT address\r\n    address public avatarNFTAddress;\r\n\r\n    constructor(address _nftAddress, address _avatarAddress, IERC20 _token, address _signer) {\r\n        nftAddress = _nftAddress;\r\n        avatarNFTAddress = _avatarAddress;\r\n        paymentToken = _token;\r\n        signer = _signer;\r\n    }\r\n\r\n    // Mint NFT with ETH\r\n    function mintNFT(\r\n        uint8 quantity,\r\n        bytes calldata signature,\r\n        string[] memory names \r\n    ) external payable {\r\n        require(verifySigner(signature, signer), \"Invalid signature.\");\r\n        verifyIfHasKeeper(msg.sender);\r\n\r\n        Dragon(nftAddress).mintNFT(msg.sender, quantity, names);\r\n        refundIfOver(priceInEth * quantity);\r\n    }\r\n\r\n    // Mint NFT with Token\r\n    function mintNFTWithToken(\r\n        uint8 quantity,\r\n        bytes calldata signature,\r\n        string[] memory names\r\n    ) external {\r\n        require(verifySigner(signature, signer), \"Invalid signature.\");\r\n        verifyIfHasKeeper(msg.sender);\r\n        console.log('It has keeper');\r\n        Dragon(nftAddress).mintNFT(msg.sender, quantity, names);\r\n        IERC20(paymentToken).transferFrom(msg.sender, address(this), quantity * priceInToken);\r\n    }\r\n\r\n    function refundIfOver(uint256 price) private {\r\n        require(msg.value >= price, \"Need to send more ETH.\");\r\n        if (msg.value > price) {\r\n            payable(msg.sender).transfer(msg.value - price);\r\n        }\r\n    }\r\n\r\n    function verifySigner(bytes calldata signature, address _signer) \r\n        public view returns (bool) {\r\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender));\r\n        bytes32 message = ECDSA.toEthSignedMessageHash(hash);\r\n        address recoveredAddress = ECDSA.recover(message, signature);\r\n        return (recoveredAddress != address(0) && recoveredAddress == _signer);\r\n    }\r\n\r\n    function verifyIfHasKeeper(address owner) internal view {\r\n        uint[] memory keepers = Avatar(avatarNFTAddress).getKeepers(owner);\r\n        require(keepers.length > 0, \"You need to have keeper.\");\r\n    }\r\n\r\n    // Admin action\r\n    function setSigner (address _signer) external onlyOwner {\r\n        require(_signer != address(0), \"Invalid signer.\");\r\n        signer = _signer;\r\n    }\r\n\r\n    function getSigner() external view returns(address) {\r\n        return signer;\r\n    }\r\n\r\n    function setPaymentToken (IERC20 _token) external onlyOwner {\r\n        paymentToken = _token;\r\n    }\r\n\r\n    function setPriceInEth(uint _priceInEth) external onlyOwner {\r\n        priceInEth = _priceInEth;\r\n    }\r\n\r\n    function setPriceInToken (uint _priceInToken) external onlyOwner {\r\n        priceInToken = _priceInToken;\r\n    }\r\n\r\n    function setNFTAddress(address _nftAddress) external onlyOwner {\r\n        nftAddress = _nftAddress;\r\n    }\r\n\r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/Dragon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./interface/ERC721A.sol\";\r\nimport \"./interface/DragonBasic.sol\";\r\n/**************************************************\r\n * Dragon NFT\r\n *\r\n * Created for Pyre by: Patrick Kishi\r\n * Audited by: Jill\r\n * Special thanks goes to: Jill\r\n ***************************************************\r\n */\r\n\r\ncontract Dragon is ERC721A, DragonBasic, Ownable, ReentrancyGuard {\r\n    using Strings for uint256;\r\n\r\n    // Token URI. Token uri is different based on DragonType, Age and Gender\r\n    string[2][3][5] private tokenUris;\r\n    string[4] private eggUris;\r\n\r\n    // Min & Max level\r\n    uint8 public constant MIN_LEVEL = 1;\r\n    uint8 public constant MAX_LEVEL = 10;\r\n\r\n    // \r\n    uint public AdolescentAge = 2 days;\r\n    uint public AdultAge = 5 days;\r\n\r\n    // minters & updaters\r\n    mapping(address => bool) private minters;\r\n    mapping(address => bool) private updaters;\r\n\r\n    // DragonData token ID => data\r\n    mapping(uint => DragonData) private dragonInfo;\r\n\r\n    modifier onlyMinter() {\r\n        require(minters[msg.sender], \"Caller is not minter.\");\r\n        _;\r\n    }\r\n    modifier onlyUpdater() {\r\n        require(updaters[msg.sender], \"Caller should be updater.\");\r\n        _;\r\n    }\r\n   \r\n    /**\r\n        @param maxBatchSize_ Max size for ERC721A batch mint.\r\n        @param collectionSize_ NFT collection size\r\n        @param _tokenUris Dragon metadata uris\r\n        @param _eggUris egg metadata uris\r\n    */\r\n    constructor(\r\n        uint16 maxBatchSize_,\r\n        uint16 collectionSize_,\r\n        string[2][3][5] memory _tokenUris,\r\n        string[4] memory _eggUris,\r\n        uint[2][7][4][5] memory _stateRanges\r\n    ) ERC721A(\"Pyre-Dragon\", \"Dragon\", maxBatchSize_, collectionSize_) DragonBasic(){\r\n        tokenUris = _tokenUris;\r\n        eggUris = _eggUris;\r\n        stateRanges = _stateRanges;\r\n    }\r\n\r\n    function getSum(uint _tokenId) internal view returns(uint sum) {\r\n        require(_exists(_tokenId), \"Not exists token.\");\r\n\r\n        DragonData memory dragon = dragonInfo[_tokenId];\r\n        sum = 0;\r\n        for (uint i = 0 ; i < dragon.ability.length ; i ++) {\r\n            sum += dragon.ability[i];\r\n        }\r\n    }\r\n\r\n    function getAge(uint _tokenId) public view returns(Age) {\r\n        require(_exists(_tokenId), \"Not exist NFT.\");\r\n        DragonData memory dragon = dragonInfo[_tokenId];\r\n        if (!dragon.isDragon) return Age.Egg;\r\n\r\n        uint age = block.timestamp - dragon.birthday;\r\n        if (age >= AdultAge) return Age.Adult;\r\n        if (age >= AdolescentAge) return Age.Adolescent;\r\n        return Age.Hatchling;\r\n    }\r\n\r\n    function random() private view returns (uint) {\r\n        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, totalSupply())));\r\n    }\r\n\r\n    function setDragonIndividualAbility(uint _tokenId, Stat key, uint value) external onlyUpdater {\r\n        require(_exists(_tokenId), \"Not exist NFT.\");\r\n\r\n        Age age = getAge(_tokenId);\r\n\r\n        require(value >= MIN_LEVEL && value <= ageLimitInfo[age], \"Invalid value.\");\r\n        \r\n        DragonData storage dragon = dragonInfo[_tokenId];\r\n        uint[7] storage data = dragon.ability;\r\n        data[uint(key)] = value;\r\n    }\r\n\r\n    function upgradeDragonStat(uint _tokenId, Stat key, uint delta) external onlyUpdater {\r\n        require(_exists(_tokenId), \"Not exist NFT.\");\r\n        require(isHatched(_tokenId), \"Dragon should be hatched first.\");\r\n\r\n        DragonData storage data = dragonInfo[_tokenId];\r\n        uint[7] storage ability = data.ability;\r\n\r\n        uint value = ability[uint(key)] + delta;\r\n        require(value >= MIN_LEVEL && value <= ageLimitInfo[getAge(_tokenId)], \"Invalid value.\");\r\n\r\n        ability[uint(key)] = value;\r\n    }\r\n\r\n    function upgradeSpecialSkill(uint _tokenId) external onlyUpdater {\r\n        require(_exists(_tokenId), \"Not exists.\");\r\n        require(isHatched(_tokenId), \"Dragon should be hatched first.\");\r\n\r\n        DragonData storage dragon = dragonInfo[_tokenId];\r\n        require(dragon.rarity == RarityType.Rare || dragon.rarity == RarityType.Legendary, \"Only Rare and Legendary can have special skill.\");\r\n        require(getAge(_tokenId) != Age.Adult, \"Cannot upgrade special skill at Adult age.\");\r\n        require(dragon.specialPoint < 5, \"You already reached to max.\");\r\n        dragon.specialPoint ++;\r\n    }\r\n\r\n    function hasSpecial(uint _tokenId) external view returns(bool) {\r\n        require(_exists(_tokenId), \"Not exists.\");\r\n        DragonData memory dragon = dragonInfo[_tokenId];\r\n        return dragon.specialPoint == 5;\r\n    }\r\n\r\n    function generateRarity(uint randomNumber) internal pure returns(RarityType) {\r\n        uint number = randomNumber % 100;\r\n        if (number < 50) {\r\n            return RarityType.Common;\r\n        } else if (number >= 50 && number < 80) {\r\n            return RarityType.Uncommon;\r\n        } else if (number >= 80 && number < 95) {\r\n            return RarityType.Rare;\r\n        } else {\r\n            return RarityType.Legendary;\r\n        }\r\n    }\r\n\r\n    function generateDragonType(uint randomNumber) internal pure returns(DragonType) {\r\n        uint number = randomNumber % 5;\r\n        return indexToType(number);\r\n    }\r\n\r\n    function generateGender(uint randomNumber) internal pure returns(Gender) {\r\n        return randomNumber % 1000 <= 995 ? Gender.MALE : Gender.FEMALE; \r\n    }\r\n\r\n    function hatchEgg(uint tokenId) external onlyUpdater {\r\n        require(!isHatched(tokenId), \"Already hatched\");\r\n\r\n        DragonData storage dragon = dragonInfo[tokenId];\r\n        \r\n        dragon.isDragon = true;\r\n        dragon.birthday = block.timestamp;\r\n       \r\n        for (uint i = 0; i < 7 ; i ++) {\r\n            dragon.ability[i] = stateRanges[uint(dragon.species)][uint(dragon.rarity)][i][0];\r\n        }\r\n    }\r\n\r\n    function isHatched(uint tokenId) public view returns(bool) {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        DragonData memory dragon = dragonInfo[tokenId];\r\n        return dragon.isDragon;\r\n    }\r\n\r\n    function getDragon(uint tokenId) public view returns(DragonData memory) {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        return dragonInfo[tokenId];\r\n    }\r\n\r\n    function getIndividualDragonState(uint _tokenId, Stat key) external view returns(uint) {\r\n        require(_exists(_tokenId), \"Not exist NFT.\");\r\n\r\n        DragonData memory dragon = dragonInfo[_tokenId];\r\n        return dragon.ability[uint(key)];\r\n    }\r\n\r\n    function mintNFT(\r\n        address to,\r\n        uint8 quantity,\r\n        string[] memory names\r\n    )\r\n        external\r\n        nonReentrant\r\n        onlyMinter\r\n    {\r\n        require(totalSupply() + quantity <= collectionSize, \"Exceeds Max Supply\");\r\n        require(quantity == names.length, \"Not match array size.\");\r\n\r\n        uint currentSupply = totalSupply();\r\n\r\n        _safeMint(to, quantity);\r\n\r\n        for (uint i = 0 ; i < quantity ; i ++) {\r\n            uint randomNumber = random();\r\n\r\n            DragonType dragonType = generateDragonType(randomNumber);\r\n            Gender gender = generateGender(randomNumber); \r\n            RarityType rarity = generateRarity(randomNumber);\r\n\r\n            DragonData storage dragon = dragonInfo[currentSupply + i];\r\n            dragon.rarity = rarity;\r\n            dragon.species = dragonType;\r\n            dragon.gender = gender;\r\n            dragon.name = names[i];\r\n        }\r\n    }\r\n\r\n    function breeding(\r\n        address to,\r\n        uint fatherTokenId,\r\n        uint motherTokenId\r\n    )   \r\n        external\r\n        nonReentrant\r\n        onlyMinter\r\n    {\r\n        require(_exists(fatherTokenId), \"Not exists father.\");\r\n        require(_exists(motherTokenId), \"Not exists mother.\");\r\n\r\n        uint rn = random();\r\n        uint quantity = (rn % 100) == 99 ? 2 : 1; // 1% => 2, 99% => 1\r\n        uint restAmount = collectionSize - totalSupply();\r\n        require(restAmount > 0, \"Exceeds Max Supply.\");\r\n\r\n        quantity = quantity > restAmount ? restAmount : quantity;\r\n        uint currentSupply = totalSupply();\r\n\r\n        _safeMint(to, quantity);\r\n\r\n        DragonData memory father = dragonInfo[fatherTokenId];\r\n        DragonData storage mother = dragonInfo[motherTokenId];\r\n\r\n        for (uint i = 0 ; i < quantity ; i ++) {\r\n            uint randomNumber = random();\r\n\r\n            Gender gender = generateGender(randomNumber); \r\n            RarityType rarity = generateRarity(randomNumber);\r\n\r\n            DragonData storage dragon = dragonInfo[currentSupply + i];\r\n            dragon.rarity = rarity;\r\n            dragon.species = randomNumber > 50 ? father.species : mother.species;\r\n            dragon.gender = gender;\r\n            dragon.father = fatherTokenId;\r\n            dragon.mother = motherTokenId;\r\n            dragon.name = \"Breed\";\r\n        }\r\n        mother.lastBreed = block.timestamp;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        DragonData memory dragon = dragonInfo[tokenId];\r\n\r\n        if (!dragon.isDragon) {\r\n            return eggUris[uint(dragon.rarity)];\r\n        }\r\n\r\n        return tokenUris[uint(dragon.species)][uint(getAge(tokenId))][uint(dragon.gender)];\r\n    }\r\n    function updateName(uint _tokenId, string memory name) external onlyUpdater {\r\n        require(_exists(_tokenId), \"Not exists token\");\r\n        DragonData storage dragon = dragonInfo[_tokenId];\r\n        dragon.name = name;\r\n    }\r\n\r\n    // Admin actions\r\n    function setTokenUris(string[2][3][5] memory _tokenUris) external onlyOwner {\r\n        tokenUris = _tokenUris;\r\n    }\r\n\r\n    function setEggUris(string[4] memory _eggUris) external onlyOwner {\r\n            eggUris = _eggUris;\r\n    }\r\n    \r\n    function addMinter(address _address) external onlyOwner {\r\n        require(!minters[_address], \"Already minter.\");\r\n        minters[_address] = true;\r\n    }\r\n    function addUpdater(address _address) external onlyOwner {\r\n        require(!updaters[_address], \"Already updater.\");\r\n        updaters[_address] = true;\r\n    }\r\n\r\n    function removeMinter (address _address) external onlyOwner {\r\n        require(minters[_address], \"Already removed.\");\r\n        minters[_address] = false;\r\n    }\r\n    function removeupdater(address _address) external onlyOwner {\r\n        require(updaters[_address], \"Already removed.\");\r\n        updaters[_address] = false;\r\n    }\r\n    \r\n    function setStatRange(DragonType dragonType, RarityType rarity, Stat stat, uint[2] memory value) external onlyOwner{\r\n        require(value[1] <= MAX_LEVEL && value[0] >= MIN_LEVEL, \"Invalid value\");\r\n        stateRanges[uint(dragonType)][uint(rarity)][uint(stat)] = value;\r\n    }\r\n    function setLimitStatForAge(Age age, uint value) external onlyOwner {\r\n        require(value <= MAX_LEVEL, \"Invalid value\");\r\n        ageLimitInfo[age] = value;\r\n    }\r\n\r\n    // utility functions\r\n    function numberMinted(address owner) public view returns (uint256) {\r\n        return _numberMinted(owner);\r\n    }\r\n\r\n    function getOwnershipData(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (TokenOwnership memory)\r\n    {\r\n        return ownershipOf(tokenId);\r\n    }\r\n\r\n    function isExist(uint tokenId) external view returns(bool) {\r\n        return _exists(tokenId);\r\n    }\r\n}"
    },
    "contracts/interface/DragonBasic.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\ncontract DragonBasic {\r\n    // Rarity. Common 50%, Uncommon 30%, Rare 15%, Legendary 5%\r\n    enum RarityType {\r\n        Common,\r\n        Uncommon,\r\n        Rare,\r\n        Legendary\r\n    }\r\n\r\n    // Dragon Type: The same percent\r\n    enum DragonType {\r\n        Attack,\r\n        Healer,\r\n        Stealth,\r\n        Rescue,\r\n        Supply\r\n    }\r\n\r\n    // Male: 99.5%, Female: 0.5%\r\n    enum Gender {\r\n        MALE,\r\n        FEMALE\r\n    }\r\n\r\n    // Age\r\n    enum Age {\r\n        Egg,\r\n        Hatchling,\r\n        Adolescent,\r\n        Adult\r\n    }\r\n\r\n    // Stats\r\n    enum Stat {\r\n        Strength,\r\n        FireDamage,\r\n        Healing,\r\n        Agility,\r\n        Flight,\r\n        Magic,\r\n        Defense\r\n    }\r\n\r\n    // TrainTypes \r\n    enum TrainType {\r\n        Feed,\r\n        CastSpell,\r\n        SpecialSkill,\r\n\r\n        Study,\r\n        Spar,\r\n        Obstacle,\r\n        \r\n        Fight,\r\n        Hunt,\r\n        Rescue,\r\n        Race\r\n    }\r\n\r\n    struct DragonData {\r\n        RarityType rarity;\r\n        DragonType species;\r\n        Gender gender;\r\n        uint birthday;\r\n        bool isDragon;\r\n        uint lastBreed;\r\n        uint father;\r\n        uint mother;\r\n        string name;\r\n        uint[7] ability;\r\n        uint specialPoint; // increase to max 5. Should be developed before Adult age. \r\n    }\r\n\r\n    // states limit per age\r\n    mapping(Age => uint) internal ageLimitInfo; \r\n\r\n    // mapping(DragonType => mapping(RarityType => mapping(Stat => StateRange))) internal stateRanges;\r\n    uint[2][7][4][5] stateRanges;\r\n\r\n    constructor() {\r\n        ageLimitInfo[Age.Egg] = 0;\r\n        ageLimitInfo[Age.Hatchling] = 3;\r\n        ageLimitInfo[Age.Adolescent] = 5;\r\n        ageLimitInfo[Age.Adult] = 10;\r\n    }\r\n\r\n    function indexToStat(uint index) internal pure returns(Stat) {\r\n        require(index < 7, \"Invalid stat index.\");\r\n\r\n        if (index == 0) {\r\n            return Stat.Strength;\r\n        } else if (index == 1) {\r\n            return Stat.FireDamage;\r\n        } else if (index == 2) {\r\n            return Stat.Healing;\r\n        } else if (index == 3) {\r\n            return Stat.Agility;\r\n        } else if (index == 4) {\r\n            return Stat.Flight;\r\n        } else if (index == 5) {\r\n            return Stat.Magic;\r\n        } else {\r\n            return Stat.Defense;\r\n        }\r\n    }\r\n\r\n    function indexToType(uint index) internal pure returns(DragonType) {\r\n        require(index < 5, \"Invalid type index.\");\r\n\r\n        if (index == 0) {\r\n            return DragonType.Attack;\r\n        } else if (index == 1) {\r\n            return DragonType.Healer;\r\n        } else if (index == 2) {\r\n            return DragonType.Stealth;\r\n        } else if (index == 3) {\r\n            return DragonType.Rescue;\r\n        } else {\r\n            return DragonType.Supply;\r\n        }\r\n    }\r\n\r\n}"
    },
    "contracts/DragonUpdateManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"./Dragon.sol\";\r\n\r\ncontract DragonUpdateManager is Ownable, DragonBasic {\r\n    struct PendingToDragon {\r\n        address owner;\r\n        uint startAt;\r\n        bool pending;\r\n    }\r\n\r\n    struct PendingToUpgradeSpecial {\r\n        address owner;\r\n        uint startAt;\r\n        bool pending;\r\n    }\r\n\r\n    struct PendingToUpgradeState {\r\n        address owner;\r\n        Stat[] stats;\r\n        uint startAt;\r\n        bool pending;\r\n        uint fee;\r\n        uint duration;\r\n    }\r\n\r\n    // sale signer\r\n    address public signer;\r\n\r\n    // Avatar NFT address\r\n    address public dragonNFTAddress;\r\n\r\n    // Pending to upgrade states.\r\n    mapping(uint => PendingToUpgradeState) public pendingToUpgradeInfo;\r\n    // duration for upgrading states;\r\n    uint[9] public pendingDurationForState = \r\n        [ 1 days, 1 days, 1 days, 1 days, 1 days, 1 days, 2 days, 3 days, 4 days]; // level is between 1 and 10, so need 9 of duration values.\r\n    // fee for upgrading states;\r\n    uint[9] public feeForUpgradeState = [\r\n        0, 0, 0, 0, 0, 0, 5 ether, 10 ether, 15 ether\r\n    ];\r\n    // duration for upgrading special skill\r\n    uint[5] public pendingDurationForSpecialSkill = [\r\n        1 days, 1 days, 1 days, 1 days, 2 days\r\n    ]; // level 0 ~ 5\r\n    uint[5] public feeForUpgradeSpecial = [\r\n        0, 0, 0, 10 ether, 20 ether\r\n    ]; // level 0 ~ 5\r\n\r\n    // Pending to Dragon\r\n    mapping(uint => PendingToDragon) pendingToDragonInfo;\r\n    uint public durationForHatch = 3 days;\r\n\r\n    uint8 public constant MIN_LEVEL = 1;\r\n    uint8 public constant MAX_LEVEL = 10;\r\n\r\n    // pending to upgrade special skill\r\n    mapping(uint => PendingToUpgradeSpecial) pendingToUpgradeSpecial;\r\n\r\n    constructor(address _dragonNFTAddress, address _signer, uint[2][7][4][5] memory _stateRanges) DragonBasic() {\r\n        dragonNFTAddress = _dragonNFTAddress;\r\n        signer = _signer;\r\n        stateRanges = _stateRanges;\r\n    }\r\n\r\n    // Request for Egg => Dragon, Lock NFT to this contract.\r\n    function requestHatchEgg(uint tokenId) external {\r\n        require(Dragon(dragonNFTAddress).ownerOf(tokenId) == msg.sender, \"You are not owner of this token.\");\r\n        require(!Dragon(dragonNFTAddress).isHatched(tokenId), \"Already dragon.\");\r\n\r\n        Dragon(dragonNFTAddress).transferFrom(msg.sender, address(this), tokenId);\r\n\r\n        PendingToDragon storage data = pendingToDragonInfo[tokenId];\r\n        data.owner = msg.sender;\r\n        data.pending = true;\r\n        data.startAt = block.timestamp;\r\n    }\r\n\r\n    // Finalize to upgrade to Dragon.\r\n    function hatchEgg(uint tokenId, bytes calldata signature) external {\r\n        require(verifySigner(signature, signer), \"Invalid Signature.\");\r\n\r\n        PendingToDragon storage data = pendingToDragonInfo[tokenId];\r\n        require(data.owner == msg.sender, \"You are not NFT owner.\");\r\n        require(data.pending, \"Should be pending first.\");\r\n        require(block.timestamp >= data.startAt + durationForHatch, \"Not available now.\");\r\n\r\n        Dragon(dragonNFTAddress).transferFrom(address(this), msg.sender, tokenId);\r\n        Dragon(dragonNFTAddress).hatchEgg(tokenId);\r\n\r\n        data.pending = false;\r\n    }\r\n\r\n    // Cancel upgrade\r\n    function cancelHatchEgg(uint tokenId) external {\r\n        PendingToDragon storage data = pendingToDragonInfo[tokenId];\r\n        require(data.owner == msg.sender, \"You are not NFT owner.\");\r\n        require(data.pending, \"You didn't request.\");\r\n\r\n        Dragon(dragonNFTAddress).transferFrom(address(this), msg.sender, tokenId);\r\n        data.owner = address(0);\r\n        data.pending = false;\r\n        data.startAt = 0;\r\n    }\r\n\r\n    // Request upgrade state\r\n    function requestUpgradeState(uint tokenId, Stat[] memory keys) public {\r\n        require(Dragon(dragonNFTAddress).ownerOf(tokenId) == msg.sender, \"You are not owner of this token.\");\r\n        require(Dragon(dragonNFTAddress).isHatched(tokenId), \"Dragon should be hatched first.\");\r\n\r\n        PendingToUpgradeState storage data = pendingToUpgradeInfo[tokenId];\r\n        require(!data.pending, \"Already requested.\");\r\n        \r\n        DragonData memory dragon = Dragon(dragonNFTAddress).getDragon(tokenId);\r\n\r\n        bool upgradable = false;\r\n        uint duration = 0;\r\n        uint fee = 0;\r\n        uint index = 0;\r\n\r\n        Stat[] memory stats = new Stat[](keys.length);\r\n        for (uint i = 0; i < keys.length; i ++) {\r\n            uint currentValue = Dragon(dragonNFTAddress).getIndividualDragonState(tokenId, keys[i]);\r\n            Age age = Dragon(dragonNFTAddress).getAge(tokenId);\r\n\r\n            uint[2] memory stateRange =  stateRanges[uint(dragon.species)][uint(dragon.rarity)][uint(keys[i])];\r\n\r\n            if (currentValue < ageLimitInfo[age] && currentValue < stateRange[1]) {\r\n                upgradable = true;\r\n                duration += pendingDurationForState[currentValue - 1];\r\n                fee += feeForUpgradeState[currentValue - 1];\r\n                stats[index] = keys[i];\r\n                index ++;\r\n            }\r\n        }\r\n        require(upgradable, \"No stat can be upgradable.\");\r\n\r\n        Dragon(dragonNFTAddress).transferFrom(msg.sender, address(this), tokenId);\r\n    \r\n        data.owner = msg.sender;\r\n        data.pending = true;\r\n        data.startAt = block.timestamp;\r\n        data.stats = stats;\r\n        data.fee = fee;\r\n        data.duration = duration;\r\n    }\r\n\r\n    // Request upgrade state\r\n    function upgradeState(\r\n        uint tokenId,\r\n        bytes calldata signature\r\n    ) external payable {\r\n\r\n        require(verifySigner(signature, signer), \"Invalid Signature.\");\r\n        require(Dragon(dragonNFTAddress).isExist(tokenId), \"Not exists Token.\");\r\n\r\n        PendingToUpgradeState storage data = pendingToUpgradeInfo[tokenId];\r\n\r\n        require(data.owner == msg.sender, \"You are not NFT owner.\");\r\n        require(data.pending, \"You need to request first.\");\r\n\r\n\r\n        refundIfOver(data.fee);\r\n\r\n        require(block.timestamp >= data.startAt + data.duration, \"Not available now.\");\r\n\r\n        Dragon(dragonNFTAddress).transferFrom(address(this), msg.sender, tokenId);\r\n\r\n        for (uint i = 0; i < data.stats.length ; i ++ ) {\r\n            Dragon(dragonNFTAddress).upgradeDragonStat(tokenId, data.stats[i], 1);\r\n        }\r\n\r\n        data.pending = false;\r\n        data.startAt = 0;\r\n        data.owner = address(0);\r\n        data.duration = 0;\r\n        data.fee = 0;\r\n    }\r\n\r\n    function requestUpgradeSpecial(\r\n        uint tokenId,\r\n        bytes calldata signature\r\n    ) external {\r\n        require(verifySigner(signature, msg.sender), \"Invalid signature\");\r\n        require(!Dragon(dragonNFTAddress).hasSpecial(tokenId), \"Already upgraded to special.\");\r\n\r\n        PendingToUpgradeSpecial storage pendingSpecial = pendingToUpgradeSpecial[tokenId];\r\n        require(!pendingSpecial.pending, \"Already pending\");\r\n\r\n        pendingSpecial.pending = true;\r\n        pendingSpecial.owner = msg.sender;\r\n        pendingSpecial.startAt = block.timestamp;\r\n\r\n        Dragon(dragonNFTAddress).transferFrom(msg.sender, address(this), tokenId);\r\n    }\r\n\r\n    function upgradeSpecialSkill (\r\n        uint tokenId,\r\n        bytes calldata signature\r\n    ) external payable {\r\n        require(verifySigner(signature, signer), \"Invalid Signature.\");\r\n        PendingToUpgradeSpecial storage data = pendingToUpgradeSpecial[tokenId];\r\n\r\n        require(data.owner == msg.sender, \"You are not NFT owner.\");\r\n        require(data.pending, \"Should be pending first.\");\r\n\r\n        DragonData memory dragon = Dragon(dragonNFTAddress).getDragon(tokenId);\r\n        \r\n        uint currentValue = dragon.specialPoint;\r\n        uint pendingPeriod = pendingDurationForSpecialSkill[currentValue];\r\n        uint fee = feeForUpgradeSpecial[currentValue];\r\n\r\n        refundIfOver(fee);\r\n        require(block.timestamp >= data.startAt + pendingPeriod, \"Not available now.\");\r\n\r\n        data.pending = false;\r\n        data.startAt = 0;\r\n        data.owner = address(0);\r\n\r\n        Dragon(dragonNFTAddress).upgradeSpecialSkill(tokenId);\r\n        Dragon(dragonNFTAddress).transferFrom(address(this), msg.sender, tokenId);\r\n    }\r\n\r\n    // Cancel upgrade\r\n    function cancelUpgradeState(uint tokenId) external {\r\n        PendingToUpgradeState storage data = pendingToUpgradeInfo[tokenId];\r\n        require(data.owner == msg.sender, \"You are not NFT owner.\");\r\n        require(data.pending, \"You didn't request.\");\r\n\r\n        Dragon(dragonNFTAddress).transferFrom(address(this), msg.sender, tokenId);\r\n        data.owner = address(0);\r\n        data.pending = false;\r\n        data.startAt = 0;\r\n    }\r\n\r\n    // Cancel upgrade special\r\n    function cancelUpgradeSpecial(uint tokenId) external {\r\n        PendingToUpgradeSpecial storage data = pendingToUpgradeSpecial[tokenId];\r\n        require(data.owner == msg.sender, \"You are not NFT owner.\");\r\n        require(data.pending, \"You didn't request.\");\r\n\r\n        Dragon(dragonNFTAddress).transferFrom(address(this), msg.sender, tokenId);\r\n        data.owner = address(0);\r\n        data.pending = false;\r\n        data.startAt = 0;\r\n    }\r\n\r\n    function setStatRange(DragonType species, RarityType rarity, Stat stat, uint[2] memory value) external onlyOwner{\r\n        require(value[1] <= MAX_LEVEL && value[0] >= MIN_LEVEL, \"Invalid value\");\r\n        stateRanges[uint(species)][uint(rarity)][uint(stat)] = value;\r\n    }\r\n\r\n    function setLimitStatForAge(Age age, uint value) external onlyOwner {\r\n        require(value <= MAX_LEVEL, \"Invalid value\");\r\n        ageLimitInfo[age] = value;\r\n    }\r\n\r\n    function refundIfOver(uint256 price) private {\r\n        require(msg.value >= price, \"Need to send more ETH.\");\r\n        if (msg.value > price) {\r\n            payable(msg.sender).transfer(msg.value - price);\r\n        }\r\n    }\r\n\r\n    function verifySigner(bytes calldata signature, address _signer) \r\n        public view returns (bool) {\r\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender));\r\n        bytes32 message = ECDSA.toEthSignedMessageHash(hash);\r\n        address recoveredAddress = ECDSA.recover(message, signature);\r\n        return (recoveredAddress != address(0) && recoveredAddress == _signer);\r\n    }\r\n\r\n    function updateDragonName(uint _tokenId, string memory name, bytes calldata signature ) external {\r\n        require(verifySigner(signature, signer), \"Invalid signature\");\r\n        Dragon(dragonNFTAddress).updateName(_tokenId, name);\r\n    }\r\n\r\n    // Admin action\r\n    function setSigner(address _signer) external onlyOwner {\r\n        signer = _signer;\r\n    }\r\n\r\n    function getSigner() external view returns(address) {\r\n        return signer;\r\n    }\r\n\r\n    function setNFTAddress(address _address) external onlyOwner {\r\n        dragonNFTAddress = _address;\r\n    }\r\n\r\n    function setPendingDurationForState(uint[9] memory durations) external onlyOwner {\r\n        pendingDurationForState = durations;\r\n    }\r\n\r\n    function setFeeForUpgradeState(uint[9] memory fees) external onlyOwner {\r\n        feeForUpgradeState = fees;\r\n    }\r\n\r\n    function setPendingDurationForDragon (uint duration) external onlyOwner {\r\n        durationForHatch = duration;\r\n    }\r\n\r\n    function setPendingDurationForSpecial(uint[5] memory durations) external onlyOwner {\r\n        pendingDurationForSpecialSkill = durations;\r\n    }\r\n\r\n    function setFeeForUpgradeSpecial(uint[5] memory fees) external onlyOwner {\r\n        feeForUpgradeSpecial = fees;\r\n    }\r\n\r\n}"
    },
    "contracts/DragonBreedingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"./Dragon.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract DragonBreedingManager is Ownable, DragonBasic, ReentrancyGuard {\r\n    struct BreedLand {\r\n        uint id;\r\n        address owner;\r\n        uint father;\r\n        uint mother;\r\n        address fatherOwner;\r\n        address motherOwner;\r\n        uint startAt;\r\n        bool pending;\r\n        bool isRent;\r\n        uint rentOrder;\r\n    }\r\n\r\n    struct RentOrder {\r\n        uint id;\r\n        address owner;\r\n        uint tokenId;\r\n        uint fee;\r\n        bool enable;\r\n    }\r\n\r\n    // Dragon NFT address\r\n    address public dragonNFTAddress;\r\n\r\n    // Duration for re breeding for female.\r\n    uint durationRebreeding = 1 weeks;\r\n    uint duration = 2 weeks;\r\n    Age minAgeForBreeding = Age.Adult;\r\n\r\n    // Breeding ground;\r\n    BreedLand[] breedlands;\r\n\r\n    // RentOrder list\r\n    RentOrder[] rentOrders;\r\n\r\n    // token id => rent id\r\n    mapping(uint => uint) private rentIDs;\r\n\r\n    // token id => breed id\r\n    mapping(uint => uint) private breedIDs; \r\n\r\n    // Breeding ground counter;\r\n    uint public breedCount;\r\n\r\n    // Rent order count\r\n    uint public rentCount;\r\n\r\n    constructor(address _dragonNFTAddress) DragonBasic() {\r\n        dragonNFTAddress = _dragonNFTAddress;\r\n    }\r\n\r\n    function requestBreeding(uint fatherTokenId, uint motherTokenId) external {\r\n        require(Dragon(dragonNFTAddress).ownerOf(fatherTokenId) == msg.sender, \"You are not owner of this token.\");\r\n        require(Dragon(dragonNFTAddress).ownerOf(motherTokenId) == msg.sender, \"You are not owner of this token.\");\r\n\r\n        require(uint(Dragon(dragonNFTAddress).getAge(fatherTokenId)) >= uint(minAgeForBreeding), \"This dragon is too young.\");\r\n        require(uint(Dragon(dragonNFTAddress).getAge(motherTokenId)) >= uint(minAgeForBreeding), \"This dragon is too young.\");\r\n\r\n        DragonData memory father = Dragon(dragonNFTAddress).getDragon(fatherTokenId);\r\n        DragonData memory mother = Dragon(dragonNFTAddress).getDragon(motherTokenId);\r\n\r\n\r\n        require(father.gender != mother.gender, \"Gender should be opposite.\");\r\n\r\n        uint _motherTokenId;\r\n        uint _fatherTokenId;\r\n\r\n        if (father.gender == Gender.MALE) {\r\n            _motherTokenId = motherTokenId;\r\n            _fatherTokenId = fatherTokenId;\r\n        } else {\r\n            _motherTokenId = fatherTokenId;\r\n            _fatherTokenId = motherTokenId;\r\n        }\r\n\r\n        require(mother.lastBreed + durationRebreeding <= block.timestamp, \"Not available rebreeding for female.\");\r\n\r\n        breedIDs[fatherTokenId] = breedCount;\r\n        breedIDs[motherTokenId] = breedCount;\r\n\r\n        breedlands[breedCount] = BreedLand({\r\n            id: breedCount,\r\n            owner: msg.sender,\r\n            father: _fatherTokenId,\r\n            mother: _motherTokenId,\r\n            fatherOwner: msg.sender,\r\n            motherOwner: msg.sender,\r\n            startAt: block.timestamp,\r\n            pending: true,\r\n            isRent: false,\r\n            rentOrder: 0\r\n        });\r\n\r\n        breedCount ++;\r\n        Dragon(dragonNFTAddress).transferFrom(msg.sender, address(this), fatherTokenId);\r\n        Dragon(dragonNFTAddress).transferFrom(msg.sender, address(this), motherTokenId);\r\n    }\r\n\r\n    function breeding (uint breedId) external {\r\n        require(breedId < breedCount, \"Invalid breed ID.\");\r\n        BreedLand storage breedLand = breedlands[breedId];\r\n        \r\n        require(\r\n            breedLand.owner == msg.sender || msg.sender == breedLand.fatherOwner || msg.sender == breedLand.motherOwner, \r\n            \"You are not the owner or parent of this breed.\"\r\n        );\r\n\r\n        require(breedLand.startAt + duration <= block.timestamp, \"Still incubating.\");\r\n        require(breedLand.pending, \"You need to request first.\");\r\n\r\n        Dragon(dragonNFTAddress).breeding(breedLand.owner, breedLand.father, breedLand.mother);\r\n\r\n        if (breedLand.isRent) {\r\n            RentOrder storage rentOrder = rentOrders[breedLand.rentOrder];\r\n            uint rentTokenId = rentOrder.tokenId;\r\n            rentOrder.enable = true;\r\n\r\n            if (rentTokenId == breedLand.father) {\r\n                Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.motherOwner, breedLand.mother);\r\n            } else {\r\n                Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.fatherOwner, breedLand.father);\r\n            }\r\n        } else {\r\n            Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.fatherOwner, breedLand.father);\r\n            Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.motherOwner, breedLand.mother);\r\n        }\r\n\r\n        breedLand.father = 0;\r\n        breedLand.mother = 0;\r\n        breedLand.owner = address(0);\r\n        breedLand.pending = false;\r\n        breedLand.startAt = 0;\r\n        breedLand.fatherOwner = address(0);\r\n        breedLand.motherOwner = address(0);\r\n    }\r\n\r\n    function cancelBreeding (uint breedId) external {\r\n        require(breedId < breedCount, \"Invalid breed ID.\");\r\n        \r\n        BreedLand storage breedLand = breedlands[breedId];\r\n        require(breedLand.owner == msg.sender, \"You are not the owner of this breed.\");\r\n        \r\n        if (breedLand.isRent) {\r\n            RentOrder storage rentOrder = rentOrders[breedLand.rentOrder];\r\n            rentOrder.enable = true;\r\n            uint rentTokenId = rentOrder.tokenId;\r\n\r\n            if (rentTokenId == breedLand.father) {\r\n                Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.motherOwner, breedLand.mother);\r\n            } else {\r\n                Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.fatherOwner, breedLand.father);\r\n            }\r\n        } else {\r\n            if (breedLand.fatherOwner != address(0)) {\r\n                Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.fatherOwner, breedLand.father);\r\n            }\r\n            if (breedLand.motherOwner != address(0)) {\r\n                Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.motherOwner, breedLand.mother);\r\n            }\r\n        }\r\n\r\n        breedLand.father = 0;\r\n        breedLand.mother = 0;\r\n        breedLand.owner = address(0);\r\n        breedLand.pending = false;\r\n        breedLand.startAt = 0;\r\n        breedLand.fatherOwner = address(0);\r\n        breedLand.motherOwner = address(0);\r\n    }\r\n\r\n    function createNewBreedLandWithSingleDragon(uint tokenId) external {\r\n        require(Dragon(dragonNFTAddress).ownerOf(tokenId) == msg.sender, \"You are not owner of this token.\");\r\n        require(uint(Dragon(dragonNFTAddress).getAge(tokenId)) >= uint(minAgeForBreeding), \"This dragon is too young.\");\r\n\r\n        DragonData memory dragon = Dragon(dragonNFTAddress).getDragon(tokenId);\r\n\r\n        if (dragon.gender == Gender.FEMALE) {\r\n            require(dragon.lastBreed + durationRebreeding <= block.timestamp, \"Not available rebreeding for female.\");\r\n        }\r\n        breedIDs[tokenId] = breedCount;\r\n        breedlands[breedCount] = BreedLand({\r\n            id: breedCount,\r\n            owner: msg.sender,\r\n            father: dragon.gender == Gender.MALE ? tokenId : 0,\r\n            mother: dragon.gender == Gender.FEMALE ? tokenId : 0,\r\n            fatherOwner: dragon.gender == Gender.MALE ? msg.sender : address(0),\r\n            motherOwner: dragon.gender == Gender.FEMALE ? msg.sender : address(0),\r\n            startAt: 0,\r\n            pending: false,\r\n            isRent: false,\r\n            rentOrder: 0\r\n        });\r\n\r\n        breedCount ++;\r\n        Dragon(dragonNFTAddress).transferFrom(msg.sender, address(this), tokenId);\r\n    }\r\n\r\n    function borrowDragon(uint rentId, uint landId) external payable {\r\n        require(rentId < rentCount, \"Invalid rent id.\");\r\n        require(isRentOrderAvailable(rentId), \"This rent order is not available now.\");\r\n\r\n        RentOrder storage rentOrder = rentOrders[rentId];\r\n        require(Dragon(dragonNFTAddress).getApproved(rentOrder.tokenId) == address(this), \"Not approved.\");\r\n        require(Dragon(dragonNFTAddress).ownerOf(rentOrder.tokenId) == rentOrder.owner, \"Rent dragon's ownership has been changed.\");\r\n        require(uint(Dragon(dragonNFTAddress).getAge(rentOrder.tokenId)) >= uint(minAgeForBreeding), \"This dragon is too young.\");\r\n\r\n        DragonData memory rentedDragon = Dragon(dragonNFTAddress).getDragon(rentOrder.tokenId);\r\n        BreedLand storage breedLand = breedlands[landId];\r\n        \r\n        address fatherOwner = breedLand.fatherOwner;\r\n        address motherOwner = breedLand.motherOwner;\r\n        require(fatherOwner != address(0) || motherOwner != address(0), \"This breed land is not available.\");\r\n        require(fatherOwner == address(0) || motherOwner == address(0), \"This breed land is not available.\");\r\n        \r\n        if (fatherOwner != address(0)) {\r\n            require(rentedDragon.gender == Gender.FEMALE, \"Dragons should have opposite gender.\");\r\n            breedLand.motherOwner = rentOrder.owner;\r\n            breedLand.mother = rentOrder.tokenId;\r\n        } else {\r\n            require(rentedDragon.gender == Gender.MALE, \"Dragons should have opposite gender.\");\r\n            breedLand.fatherOwner = rentOrder.owner;\r\n            breedLand.father = rentOrder.tokenId;\r\n        }\r\n\r\n        refundIfOver(rentOrder.fee);\r\n\r\n        if (rentOrder.fee > 0) {\r\n            payable(rentOrder.owner).transfer(rentOrder.fee);\r\n        }\r\n\r\n        Dragon(dragonNFTAddress).transferFrom(rentOrder.owner, address(this), rentOrder.tokenId);\r\n\r\n        breedIDs[rentOrder.tokenId] = breedLand.id;\r\n\r\n        breedLand.startAt = block.timestamp;\r\n        breedLand.pending = true;\r\n        breedLand.isRent = true;\r\n        breedLand.rentOrder = rentId;\r\n\r\n        rentOrder.enable = false;\r\n    }\r\n\r\n\r\n    function createRentOrder(uint tokenId, uint fee) external {\r\n        require(Dragon(dragonNFTAddress).getApproved(tokenId) == address(this), \"Not approved.\");\r\n        require(isRentable(tokenId), \"This dragon is not rentable now.\");\r\n        require(uint(Dragon(dragonNFTAddress).getAge(tokenId)) >= uint(minAgeForBreeding), \"This dragon is too young.\");\r\n\r\n        rentIDs[tokenId] = rentCount;\r\n\r\n        rentOrders[rentCount] = RentOrder({\r\n            id: rentCount,\r\n            owner: msg.sender,\r\n            tokenId: tokenId,\r\n            fee: fee,\r\n            enable: true\r\n        });\r\n        rentCount ++;\r\n    }\r\n\r\n    function cancelRentOrder (uint rentId) external {\r\n        require(rentId < rentCount, \"Invalid rent id.\");\r\n        RentOrder storage rentOrder = rentOrders[rentId];\r\n        BreedLand memory land = breedlands[breedIDs[rentOrder.tokenId]];\r\n\r\n        require(!land.pending, \"Dragon is in pending.\");\r\n\r\n        rentOrder.enable = false;\r\n    }\r\n\r\n    function isRentOrderAvailable(uint rentId) public view returns(bool) {\r\n        require(rentId < rentCount, \"Invalid Rent ID.\");\r\n\r\n        RentOrder memory rentOrder = rentOrders[rentId];\r\n        return rentOrder.enable && isRentable(rentOrder.tokenId);\r\n    }\r\n\r\n    function isRentable(uint tokenId) public view returns(bool) {\r\n        DragonData memory dragon = Dragon(dragonNFTAddress).getDragon(tokenId);\r\n        if (dragon.gender == Gender.MALE) {\r\n            return true;\r\n        } else {\r\n            return dragon.lastBreed + durationRebreeding <= block.timestamp;\r\n        }\r\n    }\r\n\r\n    function getBreedLands(address owner) external view returns(BreedLand[] memory){\r\n        BreedLand[] memory lands = new BreedLand[](breedCount);\r\n        uint index = 0;\r\n        for (uint i = 0; i < breedlands.length; i ++) {\r\n            BreedLand memory land = breedlands[i];\r\n            if (land.owner == owner && land.pending) {\r\n                lands[index] = land;\r\n                index ++;\r\n            }\r\n        }\r\n\r\n        return lands;\r\n    }\r\n\r\n    function getRentOrders() external view returns(RentOrder[] memory) {\r\n        RentOrder[] memory orders = new RentOrder[](rentCount);\r\n        uint index = 0;\r\n        for (uint i = 0; i < orders.length; i ++) {\r\n            RentOrder memory order = orders[i];\r\n            if (order.enable) {\r\n                orders[index] = order;\r\n                index ++;\r\n            }\r\n        }\r\n\r\n        return orders;\r\n    }\r\n\r\n    function refundIfOver(uint256 price) private {\r\n        require(msg.value >= price, \"Need to send more ETH.\");\r\n        if (msg.value > price) {\r\n            payable(msg.sender).transfer(msg.value - price);\r\n        }\r\n    }\r\n}"
    },
    "contracts/AvatarAssets.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./library/StringUtils.sol\";\r\nimport \"./interface/ERC721A.sol\";\r\nimport \"./interface/AvatarBasic.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**************************************************\r\n * Avatar NFT\r\n *\r\n * Created for Pyre by: Patrick Kishi\r\n * Audited by: Jill\r\n * Special thanks goes to: Jill\r\n ***************************************************\r\n */\r\n\r\ncontract AvatarAssets is ERC721A, AvatarBasic, Ownable, ReentrancyGuard {\r\n    using Strings for uint256;\r\n\r\n    mapping(uint => CustomizableTrait) private assetType;\r\n    // prices\r\n    mapping(CustomizableTrait => uint) private pricesInEth;\r\n    mapping(CustomizableTrait => uint) private pricesInToken;\r\n    // price in token\r\n    string[] private baseUris;\r\n\r\n    IERC20 public paymentToken;\r\n    constructor(\r\n        uint16 maxBatchSize_,\r\n        uint16 collectionSize_,\r\n        string[] memory _baseUris,\r\n        address _paymentToken\r\n    ) ERC721A(\"AvatarAsset\", \"AvatarAsset\", maxBatchSize_, collectionSize_) AvatarBasic() {\r\n        require(_baseUris.length == 6, \"Invalid base uris length\");\r\n        baseUris = _baseUris;\r\n        paymentToken = IERC20(_paymentToken);\r\n    }\r\n\r\n    function _mint(\r\n        address to,\r\n        uint8 quantity,\r\n        CustomizableTrait _assetType\r\n    ) internal {\r\n        uint originalSupply = totalSupply();\r\n        _safeMint(to, quantity);\r\n\r\n        for (uint i = 0; i < quantity; i ++) {\r\n            assetType[originalSupply + i] = _assetType;\r\n        }\r\n    }\r\n\r\n    function mintNFT(\r\n        uint8 quantity,\r\n        CustomizableTrait _assetType\r\n    )\r\n        external\r\n        nonReentrant\r\n        payable\r\n    {\r\n        require(totalSupply() + quantity <= collectionSize, \"Exceeds Max Supply\");\r\n        _mint(msg.sender, quantity, _assetType);\r\n        refundIfOver(pricesInEth[_assetType] * quantity);\r\n    }\r\n\r\n    function refundIfOver(uint256 price) private {\r\n        require(msg.value >= price, \"Need to send more ETH.\");\r\n        if (msg.value > price) {\r\n            payable(msg.sender).transfer(msg.value - price);\r\n        }\r\n    }\r\n\r\n    function mintNFTWithToken(\r\n        uint8 quantity,\r\n        CustomizableTrait _assetType\r\n    )\r\n    external\r\n    nonReentrant\r\n    {\r\n         require(totalSupply() + quantity <= collectionSize, \"Exceeds Max Supply\");\r\n         paymentToken.transferFrom(msg.sender, address(this), quantity * pricesInToken[_assetType]);\r\n        _mint(msg.sender, quantity, _assetType);\r\n    }\r\n\r\n    // admin action\r\n    function setPaymentToken (IERC20 _token) external onlyOwner {\r\n        paymentToken = _token;\r\n    }\r\n\r\n    function setPriceInEth(uint _priceInEth, CustomizableTrait _assetType) external onlyOwner {\r\n        pricesInEth[_assetType] = _priceInEth;\r\n    }\r\n\r\n    function setPriceInToken (uint _priceInToken, CustomizableTrait _assetType) external onlyOwner {\r\n        pricesInToken[_assetType] = _priceInToken;\r\n    }\r\n\r\n    function adminMint(\r\n        address to,\r\n        uint8 quantity,\r\n        CustomizableTrait _assetType\r\n    ) external onlyOwner { \r\n         require(totalSupply() + quantity <= collectionSize, \"Exceeds Max Supply\");\r\n        _mint(to, quantity, _assetType);\r\n    }\r\n\r\n    function getTrait(uint tokenId) public view returns(CustomizableTrait) {\r\n        require(_exists(tokenId), \"Not exists NFT.\");\r\n        return assetType[tokenId];\r\n    }\r\n\r\n}"
    },
    "contracts/AvatarUpdateManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"./Avatar.sol\";\r\nimport \"./AvatarAssets.sol\";\r\n\r\ncontract AvatarUpdateManager is Ownable, AvatarBasic {\r\n    struct PendingToKeeper {\r\n        address owner;\r\n        uint startAt;\r\n        bool pending;\r\n    }\r\n\r\n    struct PendingToUpgradeState {\r\n        address owner;\r\n        Stat[] states;\r\n        uint startAt;\r\n        uint duration;\r\n        uint fee;\r\n        bool pending;\r\n    }\r\n\r\n    // sale signer\r\n    address public signer;\r\n\r\n    // Avatar NFT address\r\n    address public avatarNFTAddress;\r\n\r\n    // Avatar Asset NFT address\r\n    address public avatarAssetNFTAddress;\r\n\r\n    // Pending to upgrade states.\r\n    mapping(uint => PendingToUpgradeState) public pendingToUpgradeInfo;\r\n    // duration, fee for upgrading states;\r\n    uint[9] public pendingDurationForState = \r\n        [ 1 days, 1 days, 1 days, 1 days, 1 days, 1 days, 2 days, 3 days, 4 days]; // level is between 1 and 10, so need 9 of duration values.\r\n     // fee for upgrading states;\r\n    uint[9] public feeForUpgradeState = [\r\n        0, 0, 0, 0, 0, 0, 5 ether, 10 ether, 15 ether\r\n    ];\r\n\r\n    // Pending to keeper\r\n    mapping(uint => PendingToKeeper) pendingToKeeperInfo;\r\n    uint public pendingToKeeperLockDuration = 1 weeks;\r\n\r\n    // storage for stroring component NFTs. traits\r\n    mapping(address => mapping(CustomizableTrait => uint)) private reservedTraits;\r\n\r\n    constructor(address _avatarNFTAddress, address _signer) AvatarBasic() {\r\n        avatarNFTAddress = _avatarNFTAddress;\r\n        signer = _signer;\r\n    }\r\n\r\n    // Request for Human => Keeper, Lock NFT to this contract.\r\n    function requestUpgradeToKeeper(uint tokenId) external {\r\n        require(Avatar(avatarNFTAddress).ownerOf(tokenId) == msg.sender, \"You are not owner of this token.\");\r\n        require(!Avatar(avatarNFTAddress).isKeeper(tokenId), \"Already keeper.\");\r\n\r\n        Avatar(avatarNFTAddress).transferFrom(msg.sender, address(this), tokenId);\r\n\r\n        PendingToKeeper storage data = pendingToKeeperInfo[tokenId];\r\n        data.owner = msg.sender;\r\n        data.pending = true;\r\n        data.startAt = block.timestamp;\r\n    }\r\n\r\n    // Finalize to upgrade to Keeper.\r\n    function upgradeToKeeper(uint tokenId, string memory metadataUri, bytes calldata signature) external {\r\n        require(verifySigner(signature, signer), \"Invalid Signature.\");\r\n\r\n        PendingToKeeper storage data = pendingToKeeperInfo[tokenId];\r\n        require(data.owner == msg.sender, \"You are not NFT owner.\");\r\n        require(data.pending, \"Should be pending first.\");\r\n        require(block.timestamp >= data.startAt + pendingToKeeperLockDuration, \"Not available now.\");\r\n\r\n        Avatar(avatarNFTAddress).transferFrom(address(this), msg.sender, tokenId);\r\n        Avatar(avatarNFTAddress).upgradeToKeeper(tokenId);\r\n        Avatar(avatarNFTAddress).setTokenUri(tokenId, metadataUri);\r\n        data.pending = false;\r\n    }\r\n\r\n    // Cancel upgrade\r\n    function cancelToKeeper(uint tokenId) external {\r\n        PendingToKeeper storage data = pendingToKeeperInfo[tokenId];\r\n        require(data.owner == msg.sender, \"You are not NFT owner.\");\r\n        require(data.pending, \"You didn't request.\");\r\n\r\n        Avatar(avatarNFTAddress).transferFrom(address(this), msg.sender, tokenId);\r\n        data.owner = address(0);\r\n        data.pending = false;\r\n        data.startAt = 0;\r\n    }\r\n\r\n    // Request upgrade state\r\n    function requestUpgradeState(uint tokenId, Stat[] memory keys) external {\r\n        require(Avatar(avatarNFTAddress).ownerOf(tokenId) == msg.sender, \"You are not owner of this token.\");\r\n        PendingToUpgradeState storage data = pendingToUpgradeInfo[tokenId];\r\n        require(!data.pending, \"Already requested.\");\r\n        \r\n        bool upgradable = false;\r\n        uint duration = 0;\r\n        uint fee = 0;\r\n        uint index = 0;\r\n\r\n        Stat[] memory stats = new Stat[](keys.length);\r\n        for (uint i = 0; i < keys.length; i ++) {\r\n            uint currentValue =  Avatar(avatarNFTAddress).getSingleState(tokenId, keys[i]);\r\n            if (currentValue <= 9) {\r\n                upgradable = true;\r\n                duration += pendingDurationForState[currentValue - 1];\r\n                fee += feeForUpgradeState[currentValue - 1];\r\n                stats[index] = keys[i];\r\n                index ++;\r\n            }\r\n        }\r\n        require(upgradable, \"No stat can be upgradable.\");\r\n        \r\n        Avatar(avatarNFTAddress).transferFrom(msg.sender, address(this), tokenId);\r\n\r\n    \r\n        data.owner = msg.sender;\r\n        data.pending = true;\r\n        data.startAt = block.timestamp;\r\n        data.states = stats;\r\n        data.duration = duration;\r\n        data.fee = fee;\r\n    }\r\n\r\n    // upgrade state\r\n    function upgradeState(\r\n        uint tokenId,\r\n        bytes calldata signature\r\n    ) external payable {\r\n\r\n        require(verifySigner(signature, signer), \"Invalid Signature.\");\r\n\r\n        PendingToUpgradeState storage data = pendingToUpgradeInfo[tokenId];\r\n\r\n        require(data.owner == msg.sender, \"You are not NFT owner.\");\r\n        require(data.pending, \"Should be pending first.\");\r\n\r\n        refundIfOver(data.fee);\r\n        require(block.timestamp >= data.startAt + data.duration, \"Not available now.\");\r\n\r\n        for (uint i = 0; i < data.states.length ; i ++ ) {\r\n            Avatar(avatarNFTAddress).upgradeState(tokenId, data.states[i], 1);\r\n        }\r\n\r\n        Avatar(avatarNFTAddress).transferFrom(address(this), msg.sender, tokenId);\r\n\r\n        data.pending = false;\r\n        data.owner = address(0);\r\n        data.duration = 0;\r\n        data.fee = 0;\r\n    }\r\n\r\n    // Cancel upgrade\r\n    function cancelUpgradeState(uint tokenId) external {\r\n        PendingToUpgradeState storage data = pendingToUpgradeInfo[tokenId];\r\n        require(data.owner == msg.sender, \"You are not NFT owner.\");\r\n        require(data.pending, \"You didn't request.\");\r\n\r\n        Avatar(avatarNFTAddress).transferFrom(address(this), msg.sender, tokenId);\r\n        data.owner = address(0);\r\n        data.pending = false;\r\n        data.startAt = 0;\r\n    }\r\n\r\n    function updateMetadata(uint tokenId, CustomizableTrait trait, uint assetTokenId, string memory uri, bytes calldata signature) external {\r\n        require(verifySigner(signature, signer), \"Invalid signature\");\r\n        require(Avatar(avatarNFTAddress).ownerOf(tokenId) == msg.sender, \"You are not owner of this Avatar.\");\r\n        require(AvatarAssets(avatarAssetNFTAddress).ownerOf(assetTokenId) == msg.sender, \"You are not owner of this asset.\");\r\n        require(AvatarAssets(avatarAssetNFTAddress).getTrait(assetTokenId) == trait, \"Invalid asset token.\");\r\n        \r\n        uint prevTokenId = reservedTraits[msg.sender][trait];\r\n        if (prevTokenId != 0) {\r\n            IERC721(avatarAssetNFTAddress).transferFrom(address(this), msg.sender, prevTokenId);\r\n        }\r\n        Avatar(avatarNFTAddress).setTokenUri(tokenId, uri);\r\n        IERC721(avatarAssetNFTAddress).transferFrom(msg.sender, address(this), assetTokenId);\r\n        reservedTraits[msg.sender][trait] = assetTokenId;\r\n    }\r\n\r\n    function updateAvatarName(uint _tokenId, string memory name, bytes calldata signature ) external {\r\n        require(verifySigner(signature, signer), \"Invalid signature\");\r\n        Avatar(avatarNFTAddress).updateName(_tokenId, name);\r\n    }\r\n\r\n    function setAssetNFTAddress(address nftAddress) external onlyOwner {\r\n        avatarAssetNFTAddress = nftAddress;\r\n    } \r\n\r\n    function refundIfOver(uint256 price) private {\r\n        require(msg.value >= price, \"Need to send more ETH.\");\r\n        if (msg.value > price) {\r\n            payable(msg.sender).transfer(msg.value - price);\r\n        }\r\n    }\r\n\r\n    function verifySigner(bytes calldata signature, address _signer) \r\n        public view returns (bool) {\r\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender));\r\n        bytes32 message = ECDSA.toEthSignedMessageHash(hash);\r\n        address recoveredAddress = ECDSA.recover(message, signature);\r\n        return (recoveredAddress != address(0) && recoveredAddress == _signer);\r\n    }\r\n\r\n    function getSigner() external view returns(address) {\r\n        return signer;\r\n    }\r\n    \r\n    // Admin action\r\n    function setSigner(address _signer) external onlyOwner {\r\n        signer = _signer;\r\n    }\r\n\r\n    function setAvatarNFTAddress(address _address) external onlyOwner {\r\n        avatarNFTAddress = _address;\r\n    }\r\n\r\n    function setPendingDurationForState(uint[9] memory durations) external onlyOwner {\r\n        pendingDurationForState = durations;\r\n    }\r\n\r\n    function setFeeForUpgradeState(uint[9] memory fees) external onlyOwner {\r\n        feeForUpgradeState = fees;\r\n    }\r\n\r\n    function setPendingDurationForKeeper (uint duration) external onlyOwner {\r\n        pendingToKeeperLockDuration = duration;\r\n    }\r\n\r\n}"
    },
    "contracts/AvatarSaleManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"./Avatar.sol\";\r\n\r\ncontract AvatarSaleManager is Ownable {\r\n    // sale signer\r\n    address public signer;\r\n\r\n    // Avatar NFT\r\n    address public nftAddress;\r\n\r\n    // nft price in ETH\r\n    uint public priceInEth;\r\n\r\n    // nft price in Token\r\n    uint public priceInToken;\r\n\r\n    // payment token\r\n    IERC20 public paymentToken;\r\n\r\n    constructor(address _nftAddress, IERC20 _token, address _signer) {\r\n        nftAddress = _nftAddress;\r\n        paymentToken = _token;\r\n        signer = _signer;\r\n    }\r\n\r\n    function batchUpdateMetadata(uint from, uint to, string[] memory uris) internal {\r\n        uint index = 0;\r\n        for (uint i = from; i < to; i ++) {\r\n            Avatar(nftAddress).setTokenUri(i, uris[index]);\r\n            index ++;\r\n        }\r\n    }\r\n\r\n    // Mint NFT with ETH\r\n    function mintNFT(\r\n        uint8 quantity,\r\n        uint8[][] memory values,\r\n        string[] memory metadataUris,\r\n        bytes calldata signature ,\r\n        string[] memory names\r\n    ) external payable {\r\n        require(verifySigner(signature, signer), \"Invalid signature.\");\r\n        require(metadataUris.length == quantity, \"Metadata length should be same as quantity.\");\r\n\r\n        Avatar(nftAddress).mintNFT(msg.sender, quantity, values, metadataUris, names);\r\n        refundIfOver(priceInEth * quantity);\r\n    }\r\n\r\n    // Mint NFT with Token\r\n    function mintNFTWithToken(\r\n        uint8 quantity,\r\n        uint8[][] memory values,\r\n        string[] memory metadataUris,\r\n        bytes calldata signature,\r\n        string[] memory names\r\n    ) external {\r\n        require(verifySigner(signature, signer), \"Invalid signature.\");\r\n        require(metadataUris.length == quantity, \"Metadata\");\r\n\r\n        Avatar(nftAddress).mintNFT(msg.sender, quantity, values, metadataUris, names);\r\n        IERC20(paymentToken).transferFrom(msg.sender, address(this), quantity * priceInToken);\r\n    }\r\n\r\n    function refundIfOver(uint256 price) private {\r\n        require(msg.value >= price, \"Need to send more ETH.\");\r\n        if (msg.value > price) {\r\n            payable(msg.sender).transfer(msg.value - price);\r\n        }\r\n    }\r\n\r\n    function verifySigner(bytes calldata signature, address _signer) \r\n        public view returns (bool) {\r\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender));\r\n        bytes32 message = ECDSA.toEthSignedMessageHash(hash);\r\n        address recoveredAddress = ECDSA.recover(message, signature);\r\n        return (recoveredAddress != address(0) && recoveredAddress == _signer);\r\n    }\r\n\r\n    function getSigner() external view returns(address) {\r\n        return signer;\r\n    }\r\n    \r\n    // Admin action\r\n    function setSigner (address _signer) external onlyOwner {\r\n        require(_signer != address(0), \"Invalid signer.\");\r\n        signer = _signer;\r\n    }\r\n\r\n    function setPaymentToken (IERC20 _token) external onlyOwner {\r\n        paymentToken = _token;\r\n    }\r\n\r\n    function setPriceInEth(uint _priceInEth) external onlyOwner {\r\n        priceInEth = _priceInEth;\r\n    }\r\n\r\n    function setPriceInToken (uint _priceInToken) external onlyOwner {\r\n        priceInToken = _priceInToken;\r\n    }\r\n\r\n    function setNFTAddress(address _nftAddress) external onlyOwner {\r\n        nftAddress = _nftAddress;\r\n    }\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": false
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}