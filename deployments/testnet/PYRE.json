{
  "address": "0xDF528584B780c7396A62E24Af3e33cFAD55146b0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charity",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_routerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minTokensBeforeSwap",
          "type": "uint256"
        }
      ],
      "name": "MinTokensBeforeSwapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSwapped",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethReceived",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensIntoLiqudity",
          "type": "uint256"
        }
      ],
      "name": "SwapAndLiquify",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SwapAndLiquifyEnabledUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURN_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHARITY_WALLET",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DROP_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_buyBackPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_buyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_buyFeeChangePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_buyTransactions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_liquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_marketFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_minFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_sellFeeChangePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_sellTransactions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_taxFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_totalBurned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        }
      ],
      "name": "deliver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "excludeFromFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "excludeFromReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "geUnlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "includeInFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "includeInReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcludedFromFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcludedFromReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "deductTransferFee",
          "type": "bool"
        }
      ],
      "name": "reflectionFromToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "buyFee",
          "type": "uint256"
        }
      ],
      "name": "setBuyFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_charityWallet",
          "type": "address"
        }
      ],
      "name": "setCharityWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_DROP_DIVISOR",
          "type": "uint256"
        }
      ],
      "name": "setDropDivisor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liq_holder",
          "type": "address"
        }
      ],
      "name": "setLiqHolder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidityFee",
          "type": "uint256"
        }
      ],
      "name": "setLiquidityFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setLiquifyAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setMarketFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minFee",
          "type": "uint256"
        }
      ],
      "name": "setMinFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapV2Pair",
          "type": "address"
        }
      ],
      "name": "setPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "routerAddress",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sellFee",
          "type": "uint256"
        }
      ],
      "name": "setSellFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setSwapAndLiquifyEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taxFee",
          "type": "uint256"
        }
      ],
      "name": "setTaxFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAndLiquifyEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAmount",
          "type": "uint256"
        }
      ],
      "name": "tokenFromReflection",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDonated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "transferXS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ERC20address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAnyToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe82f8e897c8433c76c85720b25a2c3a9030b4fbe1601e84903b4971dbbd7d0cf",
  "receipt": {
    "to": null,
    "from": "0xc09eAC15f9Ba6462e8E4612af7C431E1cfe08b87",
    "contractAddress": "0xDF528584B780c7396A62E24Af3e33cFAD55146b0",
    "transactionIndex": 0,
    "gasUsed": "6901738",
    "logsBloom": "0x
    "blockHash": "0x2546e0f637294899d69267b16b80483a43503c4c38acfeb67b0aa826e7a8bb4d",
    "transactionHash": "0xe82f8e897c8433c76c85720b25a2c3a9030b4fbe1601e84903b4971dbbd7d0cf",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 26893148,
        "transactionHash": "0xe82f8e897c8433c76c85720b25a2c3a9030b4fbe1601e84903b4971dbbd7d0cf",
        "address": "0xDF528584B780c7396A62E24Af3e33cFAD55146b0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c09eac15f9ba6462e8e4612af7c431e1cfe08b87"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2546e0f637294899d69267b16b80483a43503c4c38acfeb67b0aa826e7a8bb4d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 26893148,
        "transactionHash": "0xe82f8e897c8433c76c85720b25a2c3a9030b4fbe1601e84903b4971dbbd7d0cf",
        "address": "0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32",
        "topics": [
          "0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9",
          "0x0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270",
          "0x000000000000000000000000df528584b780c7396a62e24af3e33cfad55146b0"
        ],
        "data": "0x00000000000000000000000089c8a1974978a7a441d5e82421bd55f4651e6d630000000000000000000000000000000000000000000000000000000000001088",
        "logIndex": 1,
        "blockHash": "0x2546e0f637294899d69267b16b80483a43503c4c38acfeb67b0aa826e7a8bb4d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 26893148,
        "transactionHash": "0xe82f8e897c8433c76c85720b25a2c3a9030b4fbe1601e84903b4971dbbd7d0cf",
        "address": "0xDF528584B780c7396A62E24Af3e33cFAD55146b0",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c09eac15f9ba6462e8e4612af7c431e1cfe08b87"
        ],
        "data": "0x000000000000000000000000000000000000000c9f2c9cd04674edea40000000",
        "logIndex": 2,
        "blockHash": "0x2546e0f637294899d69267b16b80483a43503c4c38acfeb67b0aa826e7a8bb4d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 26893148,
        "transactionHash": "0xe82f8e897c8433c76c85720b25a2c3a9030b4fbe1601e84903b4971dbbd7d0cf",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c09eac15f9ba6462e8e4612af7c431e1cfe08b87",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002f434b3fd73e57e00000000000000000000000000000000000000000000000022f6f8fc1e6f4678000000000000000000000000000000000000000000000516fcef59cd3e6fb48a0000000000000000000000000000000000000000000000002002c44820fb60fa000000000000000000000000000000000000000000000516ffe38e813be39a08",
        "logIndex": 3,
        "blockHash": "0x2546e0f637294899d69267b16b80483a43503c4c38acfeb67b0aa826e7a8bb4d"
      }
    ],
    "blockNumber": 26893148,
    "cumulativeGasUsed": "6901738",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc09eAC15f9Ba6462e8E4612af7C431E1cfe08b87",
    "0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff"
  ],
  "numDeployments": 1,
  "solcInputHash": "aea2ebd7a47d0e789e376d691da81b7c",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHARITY_WALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DROP_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBackPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFeeChangePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_buyTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFeeChangePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_sellTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charityWallet\",\"type\":\"address\"}],\"name\":\"setCharityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_DROP_DIVISOR\",\"type\":\"uint256\"}],\"name\":\"setDropDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liq_holder\",\"type\":\"address\"}],\"name\":\"setLiqHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLiquifyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMarketFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minFee\",\"type\":\"uint256\"}],\"name\":\"setMinFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Pair\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"name\":\"setSellFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDonated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferXS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ERC20address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAnyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PYRE.sol\":\"PYRE\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PYRE.sol\":{\"content\":\"pragma solidity ^0.6.12;\\r\\n// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\nimport \\\"./library/Context.sol\\\";\\r\\nimport \\\"./interface/IERC20.sol\\\";\\r\\nimport \\\"./library/Ownable.sol\\\";\\r\\nimport \\\"./library/SafeMath.sol\\\";\\r\\nimport \\\"./library/Address.sol\\\";\\r\\nimport \\\"./interface/IUniswapFactory.sol\\\";\\r\\nimport \\\"./interface/IUniswapRouter.sol\\\";\\r\\nimport \\\"./interface/IUniswapPair.sol\\\";\\r\\n// 1. buy fee: 10% => 3% in 2 weeks (14 days)\\r\\n// 2. sell fee: 15% => 3% in 2 months (61 days)\\r\\n// 3. Tax of buying amount of token more than current balance will be 10%.\\r\\n// 4. Tax distribution: 48% is for rewards to holders. 48% is for adding liquidity automatically, 4% is for treasury\\r\\n// 5. Buy back fee (in 2 hours) is 3%\\r\\n// 6. Receiving from wallet will be treated as buy\\r\\n\\r\\ncontract PYRE is IERC20, Ownable {\\r\\n    struct Transaction {\\r\\n        uint time;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    enum Transaction_Type {\\r\\n        SELL,\\r\\n        BUY,\\r\\n        TRANSFER\\r\\n    }\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    mapping (address => uint256) private _rOwned;\\r\\n    mapping (address => uint256) private _tOwned;\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n    mapping (address => Transaction[]) public _buyTransactions;\\r\\n    mapping (address => Transaction[]) public _sellTransactions;\\r\\n    mapping (address => bool) private _isExcludedFromFee;\\r\\n\\r\\n    mapping (address => bool) private _isExcluded;\\r\\n    address[] private _excluded;\\r\\n   \\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 private _tTotal = 10**12 * 10**18; // 1T\\r\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n    uint256 private _tFeeTotal;\\r\\n\\r\\n    string private _name = \\\"PYRE\\\";\\r\\n    string private _symbol = \\\"PYRE\\\";\\r\\n    uint8 private _decimals = 18;\\r\\n    \\r\\n    uint256 public _minFee = 300;                   // 3%\\r\\n    uint256 public _buyFee = 1000;                  //10% Buy Fee\\r\\n    uint256 public _sellFee = 1500;                 //15% Sell Fee\\r\\n\\r\\n    uint256 public _sellFeeChangePeriod = 61 * 86400; // 2 months default\\r\\n    uint256 public _buyFeeChangePeriod = 14 * 86400; // 2 weeks default\\r\\n    uint256 public _buyBackPeriod = 2 * 3600; // 2 hr default\\r\\n\\r\\n\\r\\n    uint256 public _taxFee = 48;                    // 48% of Total Fee\\r\\n    uint256 public _liquidityFee = 48;             // 48% of Total Fee\\r\\n    uint256 public _marketFee = 4;                 // 4% of Total Fee\\r\\n\\r\\n    uint256 private _previousTaxFee = _taxFee;\\r\\n    uint256 private _previousLiquidityFee = _liquidityFee;\\r\\n    uint256 private _previousMarketFee = _marketFee;\\r\\n\\r\\n    uint256 public totalDonated;\\r\\n    address public CHARITY_WALLET;\\r\\n    address private LIQUIDITY_HOLDER;\\r\\n\\r\\n    uint public _totalBurned;\\r\\n\\r\\n    uint256 public DROP_DIVISOR = 20;\\r\\n\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address public uniswapV2Pair;\\r\\n    \\r\\n    bool inSwapAndLiquify = false;\\r\\n    bool public swapAndLiquifyEnabled = true;\\r\\n\\r\\n    uint256 private numTokensSellToAddToLiquidity = 1 * 10**6 * 10**18;\\r\\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\r\\n    \\r\\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\\r\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n    \\r\\n    modifier lockTheSwap {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n    \\r\\n    constructor (address _charity, address _routerAddress) public {\\r\\n        _rOwned[_msgSender()] = _rTotal.div(2);\\r\\n        _rOwned[BURN_ADDRESS] = _rTotal.div(2);\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_routerAddress); // V2 Router \\r\\n         // Create a uniswap pair for this new token\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), _uniswapV2Router.WETH());    \\r\\n\\r\\n        // set the rest of the contract variables\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        \\r\\n        //exclude owner and this contract from fee\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n\\r\\n        CHARITY_WALLET = _charity;\\r\\n        LIQUIDITY_HOLDER = address(this);\\r\\n        \\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n    }\\r\\n\\r\\n    function setPair(address _uniswapV2Pair) public onlyOwner() { \\r\\n        uniswapV2Pair = _uniswapV2Pair;\\r\\n    }\\r\\n\\r\\n    function setLiqHolder(address liq_holder) public onlyOwner() { \\r\\n        LIQUIDITY_HOLDER = liq_holder;\\r\\n    }\\r\\n\\r\\n    function setRouter(address routerAddress) public onlyOwner() { \\r\\n        uniswapV2Router = IUniswapV2Router02(routerAddress);\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcluded[account]) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromReward(address account) public view returns (bool) {\\r\\n        return _isExcluded[account];\\r\\n    }\\r\\n\\r\\n    function totalFees() public view returns (uint256) {\\r\\n        return _tFeeTotal;\\r\\n    }\\r\\n\\r\\n    function deliver(uint256 tAmount) public {\\r\\n        address sender = _msgSender();\\r\\n        require(!_isExcluded[sender], \\\"Excluded addresses cannot call this function\\\");\\r\\n        (uint256 rAmount,,,) = _getValues(tAmount, Transaction_Type.TRANSFER, uniswapV2Pair);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rTotal = _rTotal.sub(rAmount);\\r\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\r\\n    }\\r\\n\\r\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public returns(uint256) {\\r\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n        if (!deductTransferFee) {\\r\\n            (uint256 rAmount,,,) = _getValues(tAmount, Transaction_Type.TRANSFER, uniswapV2Pair);\\r\\n            return rAmount;\\r\\n        } else {\\r\\n            (,uint256 rTransferAmount,,) = _getValues(tAmount, Transaction_Type.TRANSFER, uniswapV2Pair);\\r\\n            return rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\r\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\r\\n        uint256 currentRate =  _getRate();\\r\\n        return rAmount.div(currentRate);\\r\\n    }\\r\\n\\r\\n    function excludeFromReward(address account) public onlyOwner() {\\r\\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, \\\"We can not exclude Uniswap router.\\\");\\r\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        if(_rOwned[account] > 0) {\\r\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n        }\\r\\n        _isExcluded[account] = true;\\r\\n        _excluded.push(account);\\r\\n    }\\r\\n\\r\\n    function includeInReward(address account) external onlyOwner() {\\r\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                _tOwned[account] = 0;\\r\\n                _isExcluded[account] = false;\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount, Transaction_Type tType) private {\\r\\n        address _address = sender;\\r\\n        \\r\\n        if(tType == Transaction_Type.BUY)\\r\\n            _address = recipient;\\r\\n        \\r\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing) = _getValues(tAmount, tType, _address);\\r\\n        uint256 currentRate = _getRate();\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(tAmount.mul(currentRate));\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(tTransferAmount.mul(currentRate));        \\r\\n        _tOwned[CHARITY_WALLET] = _tOwned[CHARITY_WALLET].add(tMarketing);\\r\\n        _rOwned[CHARITY_WALLET] = _rOwned[CHARITY_WALLET].add(tMarketing.mul(currentRate));\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _reflectFee(tFee.mul(currentRate), tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n    \\r\\n    function excludeFromFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = true;\\r\\n    }\\r\\n    \\r\\n    function includeInFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = false;\\r\\n    }\\r\\n    \\r\\n    function setMinFeePercent(uint256 minFee) external onlyOwner() {\\r\\n        require(_minFee <= 300, \\\"Fee too high\\\");  // max buy fee of 10%\\r\\n        _minFee = minFee;\\r\\n    }\\r\\n\\r\\n    function setBuyFeePercent(uint256 buyFee) external onlyOwner() {\\r\\n        require(_buyFee <= 1000, \\\"Fee too high\\\");  // max buy fee of 10%\\r\\n        _buyFee = buyFee;\\r\\n    }\\r\\n    \\r\\n    function setSellFeePercent(uint256 sellFee) external onlyOwner() {\\r\\n        require(sellFee <= 1500, \\\"Fee too high\\\");  // max tax fee of 15%\\r\\n        _sellFee = sellFee;\\r\\n    }\\r\\n    \\r\\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\\r\\n        require(taxFee <= 50, \\\"Fee too high\\\");\\r\\n        _taxFee = taxFee;\\r\\n    }\\r\\n    \\r\\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\\r\\n        require(liquidityFee <= 50, \\\"Fee too high\\\"); \\r\\n        _liquidityFee = liquidityFee;\\r\\n    }\\r\\n\\r\\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\r\\n        swapAndLiquifyEnabled = _enabled;\\r\\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\\r\\n    }\\r\\n    \\r\\n     //to recieve ETH from uniswapV2Router when swapping\\r\\n    receive() external payable {}\\r\\n\\r\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\r\\n        _rTotal = _rTotal.sub(rFee);\\r\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\r\\n    }\\r\\n\\r\\n    function _burn(address sender, uint tBurnAmount, uint rBurnAmount) private {\\r\\n       if (_rOwned[address(sender)] <= rBurnAmount){\\r\\n            _rOwned[address(sender)] = 0;\\r\\n        } else { \\r\\n        _rOwned[address(sender)] -= rBurnAmount;\\r\\n       }\\r\\n        _tTotal = _tTotal.sub(tBurnAmount);\\r\\n        _rTotal = _rTotal.sub(rBurnAmount);\\r\\n        _totalBurned = _totalBurned.add(tBurnAmount);\\r\\n\\r\\n        emit Transfer(sender, address(0), tBurnAmount);\\r\\n    }\\r\\n    \\r\\n    function burn(uint amount) public returns(bool) {\\r\\n        require(amount <= balanceOf(msg.sender), \\\"insufficient amount\\\");\\r\\n        require(amount > 0, \\\"must be greater than 0\\\");\\r\\n        \\r\\n        uint _currentRate = _getRate();\\r\\n        uint tBurnAmount = amount;\\r\\n        uint rBurnAmount = tBurnAmount.mul(_currentRate);\\r\\n        _burn(msg.sender, tBurnAmount, rBurnAmount);\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _getValues(uint256 tAmount, Transaction_Type tType, address _address) private returns (uint256, uint256, uint256, uint256) {\\r\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing) = _getTValues(tAmount, tType, _address);\\r\\n        return (tTransferAmount, tFee, tLiquidity, tMarketing);\\r\\n    }\\r\\n\\r\\n    function _getTValues(uint256 tAmount, Transaction_Type tType, address _address) private returns (uint256, uint256, uint256, uint256) {\\r\\n        uint256 _fee = _minFee;\\r\\n        uint256 amount = tAmount;\\r\\n       \\r\\n        if(tType == Transaction_Type.SELL) //sell\\r\\n        {\\r\\n            _fee = _getSellFee(tAmount, _address);\\r\\n\\r\\n        } else if (tType == Transaction_Type.BUY) // buy\\r\\n        {\\r\\n           _fee = _getBuyFee(tAmount, _address);\\r\\n        }\\r\\n        \\r\\n        uint256 tFee = calculateTaxFee(tAmount, _fee);\\r\\n        uint256 tLiquidity = calculateLiquidityFee(tAmount, _fee);\\r\\n        uint256 tMarketing = calculateMarketingFee(tAmount, _fee);\\r\\n\\r\\n        uint256 tTransferAmount = amount.sub(tFee).sub(tLiquidity).sub(tMarketing);\\r\\n\\r\\n        return (tTransferAmount, tFee, tLiquidity, tMarketing);\\r\\n    }\\r\\n\\r\\n    function _getSellFee(uint amount, address _address) internal returns(uint256) {\\r\\n        Transaction[] memory buyTrans = _buyTransactions[_address];\\r\\n        uint256 tmpAmount = 0;\\r\\n        uint256 totalFee = 0;\\r\\n        uint length = buyTrans.length;\\r\\n        uint _fee = _minFee;\\r\\n\\r\\n        if (length > 0) {\\r\\n            for(uint i = 0; i < length; i ++){\\r\\n                if(tmpAmount >= amount)\\r\\n                    break;\\r\\n\\r\\n                uint256 val = 0;\\r\\n\\r\\n                if((amount.sub(tmpAmount)) >= buyTrans[i].amount){\\r\\n                    val = buyTrans[i].amount;\\r\\n                    tmpAmount = tmpAmount + buyTrans[i].amount;\\r\\n                    _buyTransactions[_address][i].amount = 0;\\r\\n                }\\r\\n                else {\\r\\n                    val = amount.sub(tmpAmount);\\r\\n                    tmpAmount = amount;\\r\\n                    _buyTransactions[_address][i].amount = buyTrans[i].amount.sub(val);\\r\\n                }\\r\\n\\r\\n                if(now - buyTrans[i].time >= _sellFeeChangePeriod)\\r\\n                    totalFee = totalFee + val.mul(_minFee);\\r\\n                else\\r\\n                    totalFee = totalFee + _getFeeAtPeriod(now - buyTrans[i].time, val, Transaction_Type.SELL);\\r\\n            }\\r\\n            if(tmpAmount < amount)\\r\\n                totalFee = totalFee + (amount.sub(tmpAmount)).mul(_sellFee);\\r\\n            _fee = totalFee.div(amount);\\r\\n        } else {\\r\\n            _fee = _sellFee;\\r\\n        }\\r\\n        \\r\\n        return _fee;\\r\\n    }\\r\\n\\r\\n    function _getBuyFee(uint amount, address _address) internal returns(uint256) {\\r\\n        uint256 _fee = _minFee;\\r\\n        Transaction[] memory buyTrans = _buyTransactions[_address];\\r\\n        uint256 _tAmount = amount;\\r\\n        // process buyback in 2 hours\\r\\n        uint _amount = _preProcessBuyBack(_address, amount);\\r\\n\\r\\n        if (_amount >= amount) {\\r\\n            _fee = _minFee;\\r\\n            return _fee;\\r\\n        }\\r\\n        \\r\\n        amount = amount.sub(_amount);\\r\\n        \\r\\n        uint totalFee = _amount.mul(_minFee);\\r\\n        if (balanceOf(_address) < amount) {\\r\\n            if (buyTrans.length > 0) {\\r\\n                totalFee = totalFee +  _getFeeAtPeriod(now - buyTrans[0].time, balanceOf(_address), Transaction_Type.BUY);\\r\\n                totalFee = totalFee + (amount.sub(balanceOf(_address))).mul(_buyFee);\\r\\n            } else {\\r\\n                totalFee = totalFee + amount.mul(_buyFee);\\r\\n            }\\r\\n            _fee = totalFee.div(_tAmount);\\r\\n        } else {\\r\\n            uint length = buyTrans.length;\\r\\n\\r\\n            if (length > 0) {\\r\\n                if (now - buyTrans[0].time < _buyFeeChangePeriod) {\\r\\n                    totalFee = totalFee + _getFeeAtPeriod(now - buyTrans[0].time, amount, Transaction_Type.BUY);\\r\\n                } else {\\r\\n                    totalFee = totalFee + amount.mul(_minFee); \\r\\n                }\\r\\n            } else {\\r\\n                totalFee = totalFee +  amount.mul(_buyFee);\\r\\n            }\\r\\n            _fee = totalFee.div(_tAmount);\\r\\n        }\\r\\n        return _fee;\\r\\n    }\\r\\n\\r\\n    function _preProcessBuyBack(address _address, uint256 amount) internal returns(uint256) {\\r\\n        Transaction[] memory sellTrans = _sellTransactions[_address];\\r\\n\\r\\n        uint256 tmpAmount = 0;\\r\\n        \\r\\n        if (sellTrans.length > 0) {\\r\\n\\r\\n            for (uint i = sellTrans.length; i > 0 ; i--) {\\r\\n                uint j = i - 1;\\r\\n                if(tmpAmount >= amount || (now - sellTrans[j].time > _buyBackPeriod))\\r\\n                    break;\\r\\n                \\r\\n                if((amount.sub(tmpAmount)) >= sellTrans[j].amount){\\r\\n                    tmpAmount = tmpAmount + sellTrans[j].amount;\\r\\n                    _sellTransactions[_address][j].amount = 0;\\r\\n                } else {\\r\\n                    _sellTransactions[_address][j].amount = sellTrans[j].amount.sub((amount.sub(tmpAmount)));\\r\\n                    tmpAmount = amount;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return tmpAmount;\\r\\n    }\\r\\n\\r\\n    function _getFeeAtPeriod(uint256 timeInterval, uint256 amount, Transaction_Type txType) internal view returns(uint) {\\r\\n        uint256 fee = _minFee;\\r\\n        if (txType == Transaction_Type.BUY) {\\r\\n            if (timeInterval >= _buyFeeChangePeriod) {\\r\\n                fee = amount.mul(_minFee);\\r\\n            } else {\\r\\n                fee = amount.mul(_buyFee.sub(timeInterval.mul(_buyFee - _minFee).div(_buyFeeChangePeriod))); \\r\\n            }\\r\\n        } else if (txType == Transaction_Type.SELL) {\\r\\n            if (timeInterval >= _sellFeeChangePeriod) {\\r\\n                fee = amount.mul(_minFee);\\r\\n            } else {\\r\\n                fee = amount.mul(_sellFee.sub(timeInterval.mul(_sellFee - _minFee).div(_sellFeeChangePeriod))); \\r\\n            }\\r\\n        }\\r\\n\\r\\n        return fee;\\r\\n    }\\r\\n\\r\\n    function _getRate() private view returns(uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply.div(tSupply);\\r\\n    }\\r\\n\\r\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;      \\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\r\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\r\\n        }\\r\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n    \\r\\n    function _takeLiquidity(uint256 tLiquidity) private {\\r\\n        uint256 currentRate =  _getRate();\\r\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\r\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\\r\\n        if(_isExcluded[address(this)])\\r\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\\r\\n    }\\r\\n    \\r\\n    function calculateTaxFee(uint256 _amount, uint256 _fee) private view returns (uint256) {\\r\\n        return _amount.mul(_fee).mul(_taxFee).div(\\r\\n            1000000\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function calculateLiquidityFee(uint256 _amount, uint256 _fee) private view returns (uint256) {\\r\\n        return _amount.mul(_fee).mul(_liquidityFee).div(\\r\\n            1000000\\r\\n        );    \\r\\n    }\\r\\n    \\r\\n    function calculateMarketingFee(uint256 _amount, uint256 _fee) private view returns (uint256) {\\r\\n        return _amount.mul(_fee).mul(_marketFee).div(\\r\\n            1000000\\r\\n        );    \\r\\n    }\\r\\n    \\r\\n    function removeAllFee() private {\\r\\n        if(_taxFee == 0 && _liquidityFee == 0 && _marketFee == 0) return;\\r\\n        \\r\\n        _previousTaxFee = _taxFee;\\r\\n        _previousLiquidityFee = _liquidityFee;\\r\\n        _previousMarketFee = _marketFee;\\r\\n        \\r\\n        _taxFee = 0;\\r\\n        _liquidityFee = 0;\\r\\n        _marketFee = 0;\\r\\n    }\\r\\n    \\r\\n    function restoreAllFee() private {\\r\\n        _taxFee = _previousTaxFee;\\r\\n        _liquidityFee = _previousLiquidityFee;\\r\\n        _marketFee = _previousMarketFee;\\r\\n    }\\r\\n    \\r\\n    function isExcludedFromFee(address account) public view returns(bool) {\\r\\n        return _isExcludedFromFee[account];\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\r\\n        uint256 currentSupply = totalSupply();\\r\\n\\r\\n        if(to == uniswapV2Pair && !_isExcludedFromFee[from]){\\r\\n            require(amount <= currentSupply.div(DROP_DIVISOR), \\\"Sell amount too high bro\\\"); // revert more than 5% of total supply\\r\\n        }\\r\\n\\r\\n        // if buying, assign sell cool-off block to buyer \\r\\n        if(!_isExcludedFromFee[to] || !_isExcludedFromFee[from]) {\\r\\n            \\r\\n        }\\r\\n\\r\\n        // is the token balance of this contract address over the min number of\\r\\n        // tokens that we need to initiate a swap + liquidity lock?\\r\\n        // also, don\\\"t get caught in a circular liquidity event.\\r\\n        // also, don\\\"t swap & liquify if sender is uniswap pair.\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        \\r\\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\\r\\n        if (\\r\\n            overMinTokenBalance &&\\r\\n            !inSwapAndLiquify &&\\r\\n            from != uniswapV2Pair &&\\r\\n            swapAndLiquifyEnabled\\r\\n        ) {\\r\\n            contractTokenBalance = numTokensSellToAddToLiquidity;\\r\\n            //add liquidity\\r\\n            swapAndLiquify(contractTokenBalance);\\r\\n        }\\r\\n\\r\\n        //indicates if fee should be deducted from transfer\\r\\n        bool takeFee = true;\\r\\n        \\r\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        // or min supply has been reached\\r\\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        //transfer amount, it will take tax, burn, liquidity fee\\r\\n        _tokenTransfer(from,to,amount,takeFee);\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\r\\n        // split the contract balance into halves\\r\\n        uint256 half = contractTokenBalance.div(2);\\r\\n        uint256 otherHalf = contractTokenBalance.sub(half);\\r\\n\\r\\n        // capture the contract\\\"s current ETH balance.\\r\\n        // this is so that we can capture exactly the amount of ETH that the\\r\\n        // swap creates, and not make the liquidity event include any ETH that\\r\\n        // has been manually sent to the contract\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        // swap tokens for ETH\\r\\n        swapTokensForEth(half);\\r\\n\\r\\n        // how much ETH did we just swap into?\\r\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n        // add liquidity to uniswap\\r\\n        addLiquidity(otherHalf, newBalance);\\r\\n        \\r\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            LIQUIDITY_HOLDER,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //this method is responsible for taking all fee, if takeFee is true\\r\\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\\r\\n        if(!takeFee)\\r\\n            removeAllFee();\\r\\n\\r\\n        Transaction_Type transferType = Transaction_Type.TRANSFER;\\r\\n\\r\\n        if (recipient == uniswapV2Pair) {\\r\\n            transferType = Transaction_Type.SELL;\\r\\n        } else if (sender == uniswapV2Pair) {\\r\\n            transferType = Transaction_Type.BUY;\\r\\n        }\\r\\n\\r\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n\\r\\n            _transferFromExcluded(sender, recipient, amount, transferType);    \\r\\n\\r\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n\\r\\n            _transferToExcluded(sender, recipient, amount, transferType);  \\r\\n\\r\\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\\r\\n\\r\\n            _transferStandard(sender, recipient, amount, transferType);   \\r\\n\\r\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\r\\n\\r\\n            _transferBothExcluded(sender, recipient, amount, transferType);\\r\\n                \\r\\n        } else {\\r\\n\\r\\n            _transferStandard(sender, recipient, amount, transferType);    \\r\\n            \\r\\n        }\\r\\n        \\r\\n        if(recipient == uniswapV2Pair)\\r\\n        {\\r\\n            _sellTransactions[sender].push(Transaction(now, amount));\\r\\n        }\\r\\n        else if(sender == uniswapV2Pair){\\r\\n            _buyTransactions[recipient].push(Transaction(now, amount));\\r\\n        } else {\\r\\n            _buyTransactions[recipient].push(Transaction(now, amount));\\r\\n        }\\r\\n        \\r\\n        if(!takeFee)\\r\\n            restoreAllFee();\\r\\n    }\\r\\n\\r\\n    function _transferStandard(address sender, address recipient, uint256 tAmount, Transaction_Type tType) private {\\r\\n        address _address = sender;\\r\\n        if(tType == Transaction_Type.BUY)\\r\\n            _address = recipient;\\r\\n        \\r\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing) = _getValues(tAmount, tType, _address);\\r\\n        uint256 currentRate =  _getRate();\\r\\n\\r\\n        _rOwned[sender] = _rOwned[sender].sub(tAmount.mul(currentRate));\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(tTransferAmount.mul(currentRate));\\r\\n        \\r\\n        _rOwned[CHARITY_WALLET] = _rOwned[CHARITY_WALLET].add(tMarketing.mul(currentRate));\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _reflectFee(tFee.mul(currentRate), tFee);\\r\\n\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount, Transaction_Type tType) private {\\r\\n        address _address = sender;\\r\\n        \\r\\n        if(tType == Transaction_Type.BUY)\\r\\n            _address = recipient;\\r\\n        \\r\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing) = _getValues(tAmount, tType, _address);\\r\\n        uint256 currentRate = _getRate();\\r\\n        _rOwned[sender] = _rOwned[sender].sub(tAmount.mul(currentRate));\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(tTransferAmount.mul(currentRate));\\r\\n\\r\\n        _rOwned[CHARITY_WALLET] = _rOwned[CHARITY_WALLET].add(tMarketing.mul(currentRate));\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _reflectFee(tFee.mul(currentRate), tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount, Transaction_Type tType) private {\\r\\n        //0: sell\\r\\n        //1: buy\\r\\n        //2: transfer\\r\\n        address _address = sender;\\r\\n        \\r\\n        if(tType == Transaction_Type.BUY)\\r\\n            _address = recipient;\\r\\n        \\r\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tMarketing) = _getValues(tAmount, tType, _address);\\r\\n        uint256 currentRate = _getRate();\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(tAmount.mul(currentRate));\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(tTransferAmount.mul(currentRate));   \\r\\n\\r\\n        _rOwned[CHARITY_WALLET] = _rOwned[CHARITY_WALLET].add(tMarketing.mul(currentRate));\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _reflectFee(tFee.mul(currentRate), tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function setLiquifyAmount(uint256 amount) public onlyOwner {\\r\\n        numTokensSellToAddToLiquidity = amount;\\r\\n    }\\r\\n    \\r\\n    function setMarketFee(uint256 amount) public onlyOwner {\\r\\n        _marketFee = amount;\\r\\n    }\\r\\n\\r\\n    function setDropDivisor(uint256 _DROP_DIVISOR) public onlyOwner {\\r\\n        require(_DROP_DIVISOR > 0,\\\"need: divvies with privvies\\\");\\r\\n        DROP_DIVISOR = _DROP_DIVISOR;\\r\\n    }\\r\\n\\r\\n    function setCharityWallet(address _charityWallet) public onlyOwner {\\r\\n        CHARITY_WALLET = _charityWallet;\\r\\n    }\\r\\n\\r\\n    function withdrawAnyToken(address _recipient, address _ERC20address, uint256 _amount) public onlyOwner returns(bool) {\\r\\n        require(_ERC20address != uniswapV2Pair, \\\"Can't transfer out LP tokens!\\\");\\r\\n        require(_ERC20address != address(this), \\\"Can't transfer out contract tokens!\\\");\\r\\n        IERC20(_ERC20address).transfer(_recipient, _amount); //use of the _ERC20 traditional transfer\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferXS(address payable recipient) public onlyOwner {\\r\\n        recipient.transfer(address(this).balance);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x607d426c20e26016fe1d19e99273675735e56320af7f9a4a73578faff2a48c19\",\"license\":\"Unlicensed\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\",\"keccak256\":\"0x37b4eb717193af41a6a163a0af1daf21e60738f704cf7bd73f6f56fd336ba21a\",\"license\":\"Unlicensed\"},\"contracts/interface/IUniswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\",\"keccak256\":\"0x6c2bf0eb08227a687f78873057b28a01c639b9c77ce981d2b9828018389a1a53\",\"license\":\"MIT\"},\"contracts/interface/IUniswapPair.sol\":{\"content\":\"pragma solidity ^0.6.12;\\r\\n// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\",\"keccak256\":\"0x87643acf579cc720919d17020b3daa9e65dfce61a04425b6a0fbe2731df42c01\",\"license\":\"Unlicensed\"},\"contracts/interface/IUniswapRouter.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./IUniswapRouter01.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x93df00210cd8b4959c3f849d4c5babe21e90744da325519e427f70b2cfe0d0f0\",\"license\":\"MIT\"},\"contracts/interface/IUniswapRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0x132e2a6ef22153a1d9d4bfebd2badda2558a6e2bd369e96420b2f731bb21de36\",\"license\":\"MIT\"},\"contracts/library/Address.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity ^0.6.12;\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256('')`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash && codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x50731d328d8175a3cc74c278147e5f3530c081b85f63c81aae84a1f1600c0c6f\",\"license\":\"Unlicensed\"},\"contracts/library/Context.sol\":{\"content\":\"pragma solidity ^0.6.12;\\r\\n// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb6698864c800ca9aabe193a04e957b4ed079112bf02169b875b6464c121d7803\",\"license\":\"Unlicensed\"},\"contracts/library/Ownable.sol\":{\"content\":\"pragma solidity ^0.6.12;\\r\\n// SPDX-License-Identifier: Unlicensed\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    address private _previousOwner;\\r\\n    uint256 private _lockTime;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n\\r\\n    function geUnlockTime() public view returns (uint256) {\\r\\n        return _lockTime;\\r\\n    }\\r\\n\\r\\n    //Locks the contract for owner for the amount of time provided\\r\\n    function lock(uint256 time) public virtual onlyOwner {\\r\\n        _previousOwner = _owner;\\r\\n        _owner = address(0);\\r\\n        _lockTime = now + time;\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n    }\\r\\n    \\r\\n    //Unlocks the contract for owner when _lockTime is exceeds\\r\\n    function unlock() public virtual {\\r\\n        require(_previousOwner == msg.sender, \\\"You don't have permission to unlock\\\");\\r\\n        require(now > _lockTime , \\\"Contract is locked until 7 days\\\");\\r\\n        emit OwnershipTransferred(_owner, _previousOwner);\\r\\n        _owner = _previousOwner;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x470a27884b969e0ea984680d9dba756cb6c745574ffaceb78db206aec2a948b3\",\"license\":\"Unlicensed\"},\"contracts/library/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.12;\\r\\n// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n    \\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x44ded2a498d2f3c4655effb139c69e6e5c95a482021182714f9abf15f773c941\",\"license\":\"Unlicensed\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103b05760003560e01c806366c03ae0116101e7578063a437a7381161010d578063d2dfc22e116100a0578063ea2f0b371161006f578063ea2f0b3714610d3a578063f2fde38b14610d6d578063fccc281314610da0578063fd01bd4c14610db5576103b7565b8063d2dfc22e14610c69578063dcae818e14610c9c578063dd46706414610cd5578063dd62ed3e14610cff576103b7565b8063b6c52324116100dc578063b6c5232414610ba3578063c0d7865514610bb8578063c49b9a8014610beb578063d23e02b414610c17576103b7565b8063a437a73814610b07578063a457c2d714610b1c578063a69df4b514610b55578063a9059cbb14610b6a576103b7565b806384d6ff2f116101855780638ee88c53116101545780638ee88c5314610a74578063950eb5d514610a9e57806395d89b4114610ac8578063a2b8a94714610add576103b7565b806384d6ff2f14610a0257806388f8202014610a175780638c20daaf14610a4a5780638da5cb5b14610a5f576103b7565b80636bc87c3a116101c15780636bc87c3a1461097257806370a0823114610987578063715018a6146109ba5780638187f516146109cf576103b7565b806366c03ae01461091e57806369c98469146109335780636a526ef51461095d576103b7565b80633b124fe7116102d75780634a7d8cc11161026a5780635e1d6804116102395780635e1d68041461087e5780635ff1897b146108c157806361f5836d146108d657806365dadf1714610909576103b7565b80634a7d8cc1146107d957806352390c02146108035780635342acb414610836578063590f897e14610869576103b7565b8063437823ec116102a6578063437823ec1461074a5780634549b0391461077d57806349bd5a5e146107af5780634a74bb02146107c4576103b7565b80633b124fe7146106cc5780633bd5d173146106e157806340b9a54b1461070b57806342966c6814610720576103b7565b806323b872dd1161034f57806330563bd71161031e57806330563bd714610602578063313ce567146106355780633685d419146106605780633950935114610693576103b7565b806323b872dd1461054157806326b825d2146105845780632931610f146105ae5780632d838119146105d8576103b7565b8063095ea7b31161038b578063095ea7b31461049957806313114a9d146104e65780631694505e146104fb57806318160ddd1461052c576103b7565b8062b37044146103bc578063061c82d0146103e357806306fdde031461040f576103b7565b366103b757005b600080fd5b3480156103c857600080fd5b506103d1610dca565b60408051918252519081900360200190f35b3480156103ef57600080fd5b5061040d6004803603602081101561040657600080fd5b5035610dd0565b005b34801561041b57600080fd5b50610424610e72565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561045e578181015183820152602001610446565b50505050905090810190601f16801561048b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104a557600080fd5b506104d2600480360360408110156104bc57600080fd5b506001600160a01b038135169060200135610f08565b604080519115158252519081900360200190f35b3480156104f257600080fd5b506103d1610f26565b34801561050757600080fd5b50610510610f2c565b604080516001600160a01b039092168252519081900360200190f35b34801561053857600080fd5b506103d1610f3b565b34801561054d57600080fd5b506104d26004803603606081101561056457600080fd5b506001600160a01b03813581169160208101359091169060400135610f41565b34801561059057600080fd5b5061040d600480360360208110156105a757600080fd5b5035610fc8565b3480156105ba57600080fd5b5061040d600480360360208110156105d157600080fd5b5035611025565b3480156105e457600080fd5b506103d1600480360360208110156105fb57600080fd5b50356110ca565b34801561060e57600080fd5b5061040d6004803603602081101561062557600080fd5b50356001600160a01b031661112c565b34801561064157600080fd5b5061064a6111a6565b6040805160ff9092168252519081900360200190f35b34801561066c57600080fd5b5061040d6004803603602081101561068357600080fd5b50356001600160a01b03166111af565b34801561069f57600080fd5b506104d2600480360360408110156106b657600080fd5b506001600160a01b038135169060200135611370565b3480156106d857600080fd5b506103d16113be565b3480156106ed57600080fd5b5061040d6004803603602081101561070457600080fd5b50356113c4565b34801561071757600080fd5b506103d16114ad565b34801561072c57600080fd5b506104d26004803603602081101561074357600080fd5b50356114b3565b34801561075657600080fd5b5061040d6004803603602081101561076d57600080fd5b50356001600160a01b0316611587565b34801561078957600080fd5b506103d1600480360360408110156107a057600080fd5b50803590602001351515611603565b3480156107bb57600080fd5b506105106116b5565b3480156107d057600080fd5b506104d26116c4565b3480156107e557600080fd5b5061040d600480360360208110156107fc57600080fd5b50356116d4565b34801561080f57600080fd5b5061040d6004803603602081101561082657600080fd5b50356001600160a01b0316611786565b34801561084257600080fd5b506104d26004803603602081101561085957600080fd5b50356001600160a01b031661190c565b34801561087557600080fd5b506103d161192a565b34801561088a57600080fd5b506104d2600480360360608110156108a157600080fd5b506001600160a01b03813581169160208101359091169060400135611930565b3480156108cd57600080fd5b506103d1611ac2565b3480156108e257600080fd5b5061040d600480360360208110156108f957600080fd5b50356001600160a01b0316611ac8565b34801561091557600080fd5b506103d1611b55565b34801561092a57600080fd5b506103d1611b5b565b34801561093f57600080fd5b5061040d6004803603602081101561095657600080fd5b5035611b61565b34801561096957600080fd5b506103d1611bbe565b34801561097e57600080fd5b506103d1611bc4565b34801561099357600080fd5b506103d1600480360360208110156109aa57600080fd5b50356001600160a01b0316611bca565b3480156109c657600080fd5b5061040d611c2c565b3480156109db57600080fd5b5061040d600480360360208110156109f257600080fd5b50356001600160a01b0316611cbc565b348015610a0e57600080fd5b506103d1611d36565b348015610a2357600080fd5b506104d260048036036020811015610a3a57600080fd5b50356001600160a01b0316611d3c565b348015610a5657600080fd5b50610510611d5a565b348015610a6b57600080fd5b50610510611d69565b348015610a8057600080fd5b5061040d60048036036020811015610a9757600080fd5b5035611d78565b348015610aaa57600080fd5b5061040d60048036036020811015610ac157600080fd5b5035611e1a565b348015610ad457600080fd5b50610424611ebf565b348015610ae957600080fd5b5061040d60048036036020811015610b0057600080fd5b5035611f20565b348015610b1357600080fd5b506103d1611fc3565b348015610b2857600080fd5b506104d260048036036040811015610b3f57600080fd5b506001600160a01b038135169060200135611fc9565b348015610b6157600080fd5b5061040d612031565b348015610b7657600080fd5b506104d260048036036040811015610b8d57600080fd5b506001600160a01b03813516906020013561211f565b348015610baf57600080fd5b506103d1612133565b348015610bc457600080fd5b5061040d60048036036020811015610bdb57600080fd5b50356001600160a01b0316612139565b348015610bf757600080fd5b5061040d60048036036020811015610c0e57600080fd5b503515156121b3565b348015610c2357600080fd5b50610c5060048036036040811015610c3a57600080fd5b506001600160a01b03813516906020013561225e565b6040805192835260208301919091528051918290030190f35b348015610c7557600080fd5b5061040d60048036036020811015610c8c57600080fd5b50356001600160a01b0316612297565b348015610ca857600080fd5b50610c5060048036036040811015610cbf57600080fd5b506001600160a01b038135169060200135612311565b348015610ce157600080fd5b5061040d60048036036020811015610cf857600080fd5b503561232a565b348015610d0b57600080fd5b506103d160048036036040811015610d2257600080fd5b506001600160a01b03813581169160200135166123c8565b348015610d4657600080fd5b5061040d60048036036020811015610d5d57600080fd5b50356001600160a01b03166123f3565b348015610d7957600080fd5b5061040d60048036036020811015610d9057600080fd5b50356001600160a01b031661246c565b348015610dac57600080fd5b50610510612552565b348015610dc157600080fd5b506103d1612558565b601d5481565b610dd86125a7565b6000546001600160a01b03908116911614610e28576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b6032811115610e6d576040805162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b604482015290519081900360640190fd5b601755565b600e8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610efe5780601f10610ed357610100808354040283529160200191610efe565b820191906000526020600020905b815481529060010190602001808311610ee157829003601f168201915b5050505050905090565b6000610f1c610f156125a7565b84846125ab565b5060015b92915050565b600d5490565b6022546001600160a01b031681565b600b5490565b6000610f4e848484612697565b610fbe84610f5a6125a7565b610fb98560405180606001604052806028815260200161416b602891396001600160a01b038a16600090815260056020526040812090610f986125a7565b6001600160a01b03168152602081019190915260400160002054919061291a565b6125ab565b5060019392505050565b610fd06125a7565b6000546001600160a01b03908116911614611020576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b601955565b61102d6125a7565b6000546001600160a01b0390811691161461107d576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b61012c60115411156110c5576040805162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b604482015290519081900360640190fd5b601155565b6000600c5482111561110d5760405162461bcd60e51b815260040180806020018281038252602a8152602001806140d8602a913960400191505060405180910390fd5b60006111176129b1565b9050611123838261255e565b9150505b919050565b6111346125a7565b6000546001600160a01b03908116911614611184576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b601e80546001600160a01b0319166001600160a01b0392909216919091179055565b60105460ff1690565b6111b76125a7565b6000546001600160a01b03908116911614611207576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526009602052604090205460ff16611274576040805162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c7265616479206578636c756465640000000000604482015290519081900360640190fd5b60005b600a5481101561136c57816001600160a01b0316600a828154811061129857fe5b6000918252602090912001546001600160a01b0316141561136457600a805460001981019081106112c557fe5b600091825260209091200154600a80546001600160a01b0390921691839081106112eb57fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559184168152600482526040808220829055600990925220805460ff19169055600a80548061133d57fe5b600082815260209020810160001990810180546001600160a01b031916905501905561136c565b600101611277565b5050565b6000610f1c61137d6125a7565b84610fb9856005600061138e6125a7565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906129d4565b60175481565b60006113ce6125a7565b6001600160a01b03811660009081526009602052604090205490915060ff16156114295760405162461bcd60e51b815260040180806020018281038252602c815260200180614268602c913960400191505060405180910390fd5b6023546000906114469084906002906001600160a01b0316612a2e565b5050506001600160a01b03831660009081526003602052604090205490915061146f9082612a5a565b6001600160a01b038316600090815260036020526040902055600c546114959082612a5a565b600c55600d546114a590846129d4565b600d55505050565b60125481565b60006114be33611bca565b821115611508576040805162461bcd60e51b81526020600482015260136024820152721a5b9cdd59999a58da595b9d08185b5bdd5b9d606a1b604482015290519081900360640190fd5b60008211611556576040805162461bcd60e51b815260206004820152601660248201527506d7573742062652067726561746572207468616e20360541b604482015290519081900360640190fd5b60006115606129b1565b905082600061156f8284612a9c565b905061157c338383612af5565b506001949350505050565b61158f6125a7565b6000546001600160a01b039081169116146115df576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600860205260409020805460ff19166001179055565b6000600b5483111561165c576040805162461bcd60e51b815260206004820152601f60248201527f416d6f756e74206d757374206265206c657373207468616e20737570706c7900604482015290519081900360640190fd5b8161168b5760235460009061167e9085906002906001600160a01b0316612a2e565b50919350610f2092505050565b6023546000906116a89085906002906001600160a01b0316612a2e565b50909350610f2092505050565b6023546001600160a01b031681565b602354600160a81b900460ff1681565b6116dc6125a7565b6000546001600160a01b0390811691161461172c576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b60008111611781576040805162461bcd60e51b815260206004820152601b60248201527f6e6565643a206469767669657320776974682070726976766965730000000000604482015290519081900360640190fd5b602155565b61178e6125a7565b6000546001600160a01b039081169116146117de576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526009602052604090205460ff161561184c576040805162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c7265616479206578636c756465640000000000604482015290519081900360640190fd5b6001600160a01b038116600090815260036020526040902054156118a6576001600160a01b03811660009081526003602052604090205461188c906110ca565b6001600160a01b0382166000908152600460205260409020555b6001600160a01b03166000818152600960205260408120805460ff19166001908117909155600a805491820181559091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b0319169091179055565b6001600160a01b031660009081526008602052604090205460ff1690565b60135481565b600061193a6125a7565b6000546001600160a01b0390811691161461198a576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b6023546001600160a01b03848116911614156119ed576040805162461bcd60e51b815260206004820152601d60248201527f43616e2774207472616e73666572206f7574204c5020746f6b656e7321000000604482015290519081900360640190fd5b6001600160a01b038316301415611a355760405162461bcd60e51b81526004018080602001828103825260238152602001806141fc6023913960400191505060405180910390fd5b826001600160a01b031663a9059cbb85846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611a8c57600080fd5b505af1158015611aa0573d6000803e3d6000fd5b505050506040513d6020811015611ab657600080fd5b50600195945050505050565b60115481565b611ad06125a7565b6000546001600160a01b03908116911614611b20576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b6040516001600160a01b038216904780156108fc02916000818181858888f1935050505015801561136c573d6000803e3d6000fd5b60215481565b60165481565b611b696125a7565b6000546001600160a01b03908116911614611bb9576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b602455565b60145481565b60185481565b6001600160a01b03811660009081526009602052604081205460ff1615611c0a57506001600160a01b038116600090815260046020526040902054611127565b6001600160a01b038216600090815260036020526040902054610f20906110ca565b611c346125a7565b6000546001600160a01b03908116911614611c84576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116906000805160206141b3833981519152908390a3600080546001600160a01b0319169055565b611cc46125a7565b6000546001600160a01b03908116911614611d14576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b602380546001600160a01b0319166001600160a01b0392909216919091179055565b60195481565b6001600160a01b031660009081526009602052604090205460ff1690565b601e546001600160a01b031681565b6000546001600160a01b031690565b611d806125a7565b6000546001600160a01b03908116911614611dd0576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b6032811115611e15576040805162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b604482015290519081900360640190fd5b601855565b611e226125a7565b6000546001600160a01b03908116911614611e72576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b6103e86012541115611eba576040805162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b604482015290519081900360640190fd5b601255565b600f8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610efe5780601f10610ed357610100808354040283529160200191610efe565b611f286125a7565b6000546001600160a01b03908116911614611f78576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b6105dc811115611fbe576040805162461bcd60e51b815260206004820152600c60248201526b08ccaca40e8dede40d0d2ced60a31b604482015290519081900360640190fd5b601355565b60155481565b6000610f1c611fd66125a7565b84610fb9856040518060600160405280602581526020016142b760259139600560006120006125a7565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919061291a565b6001546001600160a01b0316331461207a5760405162461bcd60e51b81526004018080602001828103825260238152602001806142946023913960400191505060405180910390fd5b60025442116120d0576040805162461bcd60e51b815260206004820152601f60248201527f436f6e7472616374206973206c6f636b656420756e74696c2037206461797300604482015290519081900360640190fd5b600154600080546040516001600160a01b0393841693909116916000805160206141b383398151915291a3600154600080546001600160a01b0319166001600160a01b03909216919091179055565b6000610f1c61212c6125a7565b8484612697565b60025490565b6121416125a7565b6000546001600160a01b03908116911614612191576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b602280546001600160a01b0319166001600160a01b0392909216919091179055565b6121bb6125a7565b6000546001600160a01b0390811691161461220b576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b60238054821515600160a81b810260ff60a81b199092169190911790915560408051918252517f53726dfcaf90650aa7eb35524f4d3220f07413c8d6cb404cc8c18bf5591bc1599181900360200190a150565b6007602052816000526040600020818154811061227757fe5b600091825260209091206002909102018054600190910154909250905082565b61229f6125a7565b6000546001600160a01b039081169116146122ef576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b601f80546001600160a01b0319166001600160a01b0392909216919091179055565b6006602052816000526040600020818154811061227757fe5b6123326125a7565b6000546001600160a01b03908116911614612382576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b60008054600180546001600160a01b03199081166001600160a01b0384161790915516815542820160025560405181906000805160206141b3833981519152908290a350565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b6123fb6125a7565b6000546001600160a01b0390811691161461244b576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600860205260409020805460ff19169055565b6124746125a7565b6000546001600160a01b039081169116146124c4576040805162461bcd60e51b81526020600482018190526024820152600080516020614193833981519152604482015290519081900360640190fd5b6001600160a01b0381166125095760405162461bcd60e51b81526004018080602001828103825260268152602001806141026026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216916000805160206141b383398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b61dead81565b60205481565b60006125a083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612bcb565b9392505050565b3390565b6001600160a01b0383166125f05760405162461bcd60e51b81526004018080602001828103825260248152602001806142446024913960400191505060405180910390fd5b6001600160a01b0382166126355760405162461bcd60e51b81526004018080602001828103825260228152602001806141286022913960400191505060405180910390fd5b6001600160a01b03808416600081815260056020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166126dc5760405162461bcd60e51b815260040180806020018281038252602581526020018061421f6025913960400191505060405180910390fd5b6001600160a01b0382166127215760405162461bcd60e51b81526004018080602001828103825260238152602001806140b56023913960400191505060405180910390fd5b600081116127605760405162461bcd60e51b81526004018080602001828103825260298152602001806141d36029913960400191505060405180910390fd5b600061276a610f3b565b6023549091506001600160a01b0384811691161480156127a357506001600160a01b03841660009081526008602052604090205460ff16155b1561280a576021546127b690829061255e565b82111561280a576040805162461bcd60e51b815260206004820152601860248201527f53656c6c20616d6f756e7420746f6f20686967682062726f0000000000000000604482015290519081900360640190fd5b6001600160a01b03831660009081526008602052604090205460ff16158061284b57506001600160a01b03841660009081526008602052604090205460ff16155b50600061285730611bca565b602454909150811080159081906128785750602354600160a01b900460ff16155b801561289257506023546001600160a01b03878116911614155b80156128a75750602354600160a81b900460ff165b156128ba5760245491506128ba82612c30565b6001600160a01b03861660009081526008602052604090205460019060ff16806128fc57506001600160a01b03861660009081526008602052604090205460ff165b15612905575060005b61291187878784612cd6565b50505050505050565b600081848411156129a95760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561296e578181015183820152602001612956565b50505050905090810190601f16801561299b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008060006129be612fac565b90925090506129cd828261255e565b9250505090565b6000828201838110156125a0576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600080600080600080600080612a458b8b8b61310f565b929e919d509b50909950975050505050505050565b60006125a083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061291a565b600082612aab57506000610f20565b82820282848281612ab857fe5b04146125a05760405162461bcd60e51b815260040180806020018281038252602181526020018061414a6021913960400191505060405180910390fd5b6001600160a01b0383166000908152600360205260409020548110612b32576001600160a01b038316600090815260036020526040812055612b52565b6001600160a01b0383166000908152600360205260409020805482900390555b600b54612b5f9083612a5a565b600b55600c54612b6f9082612a5a565b600c55602054612b7f90836129d4565b60209081556040805184815290516000926001600160a01b038716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3505050565b60008183612c1a5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561296e578181015183820152602001612956565b506000838581612c2657fe5b0495945050505050565b6023805460ff60a01b1916600160a01b1790556000612c5082600261255e565b90506000612c5e8383612a5a565b905047612c6a836131b7565b6000612c764783612a5a565b9050612c828382613365565b604080518581526020810183905280820185905290517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a150506023805460ff60a01b19169055505050565b80612ce357612ce3613423565b6023546002906001600160a01b0385811691161415612d0457506000612d1e565b6023546001600160a01b0386811691161415612d1e575060015b6001600160a01b03851660009081526009602052604090205460ff168015612d5f57506001600160a01b03841660009081526009602052604090205460ff16155b15612d7557612d708585858461346c565b612e77565b6001600160a01b03851660009081526009602052604090205460ff16158015612db657506001600160a01b03841660009081526009602052604090205460ff165b15612dc757612d708585858461362c565b6001600160a01b03851660009081526009602052604090205460ff16158015612e0957506001600160a01b03841660009081526009602052604090205460ff16155b15612e1a57612d70858585846136d2565b6001600160a01b03851660009081526009602052604090205460ff168015612e5a57506001600160a01b03841660009081526009602052604090205460ff165b15612e6b57612d708585858461371c565b612e77858585846136d2565b6023546001600160a01b0385811691161415612ee0576001600160a01b0385166000908152600760209081526040808320815180830190925242825281830187815281546001818101845592865293909420915160029093029091019182559151910155612f98565b6023546001600160a01b0386811691161415612f49576001600160a01b0384166000908152600660209081526040808320815180830190925242825281830187815281546001818101845592865293909420915160029093029091019182559151910155612f98565b6001600160a01b03841660009081526006602090815260408083208151808301909252428252818301878152815460018181018455928652939094209151600290930290910191825591519101555b81612fa557612fa5613860565b5050505050565b600c54600b546000918291825b600a548110156130dd578260036000600a8481548110612fd557fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902054118061303a57508160046000600a848154811061301357fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902054115b1561305157600c54600b549450945050505061310b565b61309160036000600a848154811061306557fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020548490612a5a565b92506130d360046000600a84815481106130a757fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020548390612a5a565b9150600101612fb9565b50600b54600c546130ed9161255e565b82101561310557600c54600b5493509350505061310b565b90925090505b9091565b601154600090819081908190878288600281111561312957fe5b1415613140576131398988613874565b9150613161565b600188600281111561314e57fe5b14156131615761315e8988613af7565b91505b600061316d8a84613cf4565b9050600061317b8b85613d1c565b905060006131898c86613d3e565b905060006131a38261319d85818989612a5a565b90612a5a565b9d939c50919a509850909650505050505050565b604080516002808252606080830184529260208301908036833701905050905030816000815181106131e557fe5b6001600160a01b03928316602091820292909201810191909152602254604080516315ab88c960e31b81529051919093169263ad5c4648926004808301939192829003018186803b15801561323957600080fd5b505afa15801561324d573d6000803e3d6000fd5b505050506040513d602081101561326357600080fd5b505181518290600190811061327457fe5b6001600160a01b03928316602091820292909201015260225461329a91309116846125ab565b60225460405163791ac94760e01b8152600481018481526000602483018190523060648401819052426084850181905260a060448601908152875160a487015287516001600160a01b039097169663791ac947968a968a9594939092909160c40190602080880191028083838b5b83811015613320578181015183820152602001613308565b505050509050019650505050505050600060405180830381600087803b15801561334957600080fd5b505af115801561335d573d6000803e3d6000fd5b505050505050565b60225461337d9030906001600160a01b0316846125ab565b602254601f546040805163f305d71960e01b81523060048201526024810186905260006044820181905260648201526001600160a01b0392831660848201524260a48201529051919092169163f305d71991849160c48082019260609290919082900301818588803b1580156133f257600080fd5b505af1158015613406573d6000803e3d6000fd5b50505050506040513d606081101561341d57600080fd5b50505050565b6017541580156134335750601854155b801561343f5750601954155b156134495761346a565b60178054601a5560188054601b5560198054601c5560009283905590829055555b565b83600182600281111561347b57fe5b14156134845750825b600080600080613495878787612a2e565b935093509350935060006134a76129b1565b6001600160a01b038b166000908152600460205260409020549091506134cd9089612a5a565b6001600160a01b038b166000908152600460205260409020556135126134f38983612a9c565b6001600160a01b038c1660009081526003602052604090205490612a5a565b6001600160a01b038b166000908152600360205260409020556135576135388683612a9c565b6001600160a01b038b16600090815260036020526040902054906129d4565b6001600160a01b038a1660009081526003602052604090205561359e61357d8383612a9c565b601e546001600160a01b0316600090815260036020526040902054906129d4565b601e546001600160a01b03166000908152600360205260409020556135c283613d60565b6135d56135cf8583612a9c565b85613de9565b886001600160a01b03168a6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a350505050505050505050565b83600182600281111561363b57fe5b14156136445750825b600080600080613655878787612a2e565b935093509350935060006136676129b1565b90506136766134f38983612a9c565b6001600160a01b03808c16600090815260036020908152604080832094909455918c168152600490915220546136ac90866129d4565b6001600160a01b038a166000908152600460205260409020556135576135388683612a9c565b8360018260028111156136e157fe5b14156136ea5750825b6000806000806136fb878787612a2e565b9350935093509350600061370d6129b1565b90506135126134f38983612a9c565b83600182600281111561372b57fe5b14156137345750825b600080600080613745878787612a2e565b935093509350935060006137576129b1565b6001600160a01b038b1660009081526004602052604090205490915061377d9089612a5a565b6001600160a01b038b166000908152600460205260409020556137a36134f38983612a9c565b6001600160a01b03808c16600090815260036020908152604080832094909455918c168152600490915220546137d990866129d4565b6001600160a01b038a166000908152600460205260409020556137ff6135388683612a9c565b6001600160a01b03808b16600090815260036020908152604080832094909455601e5490921681526004909152205461383890836129d4565b601e546001600160a01b031660009081526004602052604090205561359e61357d8383612a9c565b601a54601755601b54601855601c54601955565b6001600160a01b03811660009081526006602090815260408083208054825181850281018501909352808352606093859084015b828210156138ee578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906138a8565b505082516011549394506000938493509091508115613ae75760005b82811015613ab15788851061391e57613ab1565b600086828151811061392c57fe5b60200260200101516020015161394b878c612a5a90919063ffffffff16565b106139d25786828151811061395c57fe5b602002602001015160200151905086828151811061397657fe5b602002602001015160200151860195506000600660008b6001600160a01b03166001600160a01b0316815260200190815260200160002083815481106139b857fe5b906000526020600020906002020160010181905550613a45565b6139dc8a87612a5a565b9050899550613a0b818884815181106139f157fe5b602002602001015160200151612a5a90919063ffffffff16565b6001600160a01b038a166000908152600660205260409020805484908110613a2f57fe5b9060005260206000209060020201600101819055505b601454878381518110613a5457fe5b602002602001015160000151420310613a7e57601154613a75908290612a9c565b85019450613aa8565b613aa3878381518110613a8d57fe5b6020026020010151600001514203826000613e0d565b850194505b5060010161390a565b5087841015613ad657601354613ad190613acb8a87612a5a565b90612a9c565b830192505b613ae0838961255e565b9050613aec565b506013545b979650505050505050565b6011546001600160a01b03821660009081526006602090815260408083208054825181850281018501909352808352939493606093869084015b82821015613b7757838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190613b31565b50505050905060008590506000613b8e8688613ee6565b9050868110613ba65750506011549250610f20915050565b613bb08782612a5a565b96506000613bc960115483612a9c90919063ffffffff16565b905087613bd588611bca565b1015613c5457835115613c3357613c1084600081518110613bf257fe5b6020026020010151600001514203613c0989611bca565b6001613e0d565b81019050613c2d601254613acb613c268a611bca565b8b90612a5a565b01613c43565b601254613c41908990612a9c565b015b613c4d818461255e565b9450613ce8565b83518015613cc75760155485600081518110613c6c57fe5b60200260200101516000015142031015613caf57613ca685600081518110613c9057fe5b60200260200101516000015142038a6001613e0d565b82019150613cc2565b601154613cbd908a90612a9c565b820191505b613cda565b601254613cd5908a90612a9c565b820191505b613ce4828561255e565b9550505b50929695505050505050565b60006125a0620f4240613d16601754613acb8688612a9c90919063ffffffff16565b9061255e565b60006125a0620f4240613d16601854613acb8688612a9c90919063ffffffff16565b60006125a0620f4240613d16601954613acb8688612a9c90919063ffffffff16565b6000613d6a6129b1565b90506000613d788383612a9c565b30600090815260036020526040902054909150613d9590826129d4565b3060009081526003602090815260408083209390935560099052205460ff1615613de45730600090815260046020526040902054613dd390846129d4565b306000908152600460205260409020555b505050565b600c54613df69083612a5a565b600c55600d54613e0690826129d4565b600d555050565b6011546000906001836002811115613e2157fe5b1415613e82576015548510613e4557601154613e3e908590612a9c565b9050613e7d565b613e7a613e73613e6a601554613d16601154601254038a612a9c90919063ffffffff16565b60125490612a5a565b8590612a9c565b90505b613ede565b6000836002811115613e9057fe5b1415613ede576014548510613ead57601154613e7a908590612a9c565b613edb613e73613ed2601454613d16601154601354038a612a9c90919063ffffffff16565b60135490612a5a565b90505b949350505050565b6001600160a01b03821660009081526007602090815260408083208054825181850281018501909352808352606093859084015b82821015613f6057838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190613f1a565b50505050905060008082511115613ede5781515b80156140ab5760001981018583101580613fa85750601654848281518110613f9857fe5b6020026020010151600001514203115b15613fb357506140ab565b838181518110613fbf57fe5b602002602001015160200151613fde8488612a5a90919063ffffffff16565b1061404b57838181518110613fef57fe5b60200260200101516020015183019250600060076000896001600160a01b03166001600160a01b03168152602001908152602001600020828154811061403157fe5b9060005260206000209060020201600101819055506140a1565b6140646140588785612a5a565b8583815181106139f157fe5b6001600160a01b038816600090815260076020526040902080548390811061408857fe5b9060005260206000209060020201600101819055508592505b5060001901613f74565b5094935050505056fe45524332303a207472616e7366657220746f20746865207a65726f2061646472657373416d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05472616e7366657220616d6f756e74206d7573742062652067726561746572207468616e207a65726f43616e2774207472616e73666572206f757420636f6e747261637420746f6b656e732145524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573734578636c75646564206164647265737365732063616e6e6f742063616c6c20746869732066756e6374696f6e596f7520646f6e27742068617665207065726d697373696f6e20746f20756e6c6f636b45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220d4de8cb7c3e29079e825e0dfd9a217d861f0c06af5faf5ae3111f2d4a38ade9d64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4176,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4178,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_previousOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4180,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_lockTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 32,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_rOwned",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 36,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_tOwned",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 42,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_allowances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 47,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_buyTransactions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(Transaction)18_storage)dyn_storage)"
      },
      {
        "astId": 52,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_sellTransactions",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(Transaction)18_storage)dyn_storage)"
      },
      {
        "astId": 56,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_isExcludedFromFee",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 60,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_isExcluded",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 63,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_excluded",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 79,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_tTotal",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 88,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_rTotal",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 90,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_tFeeTotal",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 93,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_name",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 96,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_symbol",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 99,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_decimals",
        "offset": 0,
        "slot": "16",
        "type": "t_uint8"
      },
      {
        "astId": 102,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_minFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 105,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_buyFee",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 108,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_sellFee",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 113,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_sellFeeChangePeriod",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 118,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_buyFeeChangePeriod",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 123,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_buyBackPeriod",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 126,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_taxFee",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 129,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_liquidityFee",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 132,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_marketFee",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 135,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_previousTaxFee",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 138,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_previousLiquidityFee",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 141,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_previousMarketFee",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 143,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "totalDonated",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 145,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "CHARITY_WALLET",
        "offset": 0,
        "slot": "30",
        "type": "t_address"
      },
      {
        "astId": 147,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "LIQUIDITY_HOLDER",
        "offset": 0,
        "slot": "31",
        "type": "t_address"
      },
      {
        "astId": 149,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "_totalBurned",
        "offset": 0,
        "slot": "32",
        "type": "t_uint256"
      },
      {
        "astId": 152,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "DROP_DIVISOR",
        "offset": 0,
        "slot": "33",
        "type": "t_uint256"
      },
      {
        "astId": 154,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "34",
        "type": "t_contract(IUniswapV2Router02)3635"
      },
      {
        "astId": 156,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "uniswapV2Pair",
        "offset": 0,
        "slot": "35",
        "type": "t_address"
      },
      {
        "astId": 159,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "inSwapAndLiquify",
        "offset": 20,
        "slot": "35",
        "type": "t_bool"
      },
      {
        "astId": 162,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "swapAndLiquifyEnabled",
        "offset": 21,
        "slot": "35",
        "type": "t_bool"
      },
      {
        "astId": 173,
        "contract": "contracts/PYRE.sol:PYRE",
        "label": "numTokensSellToAddToLiquidity",
        "offset": 0,
        "slot": "36",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Transaction)18_storage)dyn_storage": {
        "base": "t_struct(Transaction)18_storage",
        "encoding": "dynamic_array",
        "label": "struct PYRE.Transaction[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUniswapV2Router02)3635": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Transaction)18_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PYRE.Transaction[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Transaction)18_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Transaction)18_storage": {
        "encoding": "inplace",
        "label": "struct PYRE.Transaction",
        "members": [
          {
            "astId": 15,
            "contract": "contracts/PYRE.sol:PYRE",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17,
            "contract": "contracts/PYRE.sol:PYRE",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}