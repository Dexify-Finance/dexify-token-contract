{
  "address": "0x1BcefaDf8213Fb9Fc6418edF99E106bd61272744",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "maxBatchSize_",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "collectionSize_",
          "type": "uint16"
        },
        {
          "internalType": "string[2][3][5]",
          "name": "_tokenUris",
          "type": "string[2][3][5]"
        },
        {
          "internalType": "string[4]",
          "name": "_eggUris",
          "type": "string[4]"
        },
        {
          "internalType": "uint256[2][7][4][5]",
          "name": "_stateRanges",
          "type": "uint256[2][7][4][5]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AdolescentAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AdultAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_LEVEL",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_LEVEL",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fatherTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "motherTokenId",
          "type": "uint256"
        }
      ],
      "name": "breeding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAge",
      "outputs": [
        {
          "internalType": "enum DragonBasic.Age",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDragon",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum DragonBasic.RarityType",
              "name": "rarity",
              "type": "uint8"
            },
            {
              "internalType": "enum DragonBasic.DragonType",
              "name": "species",
              "type": "uint8"
            },
            {
              "internalType": "enum DragonBasic.Gender",
              "name": "gender",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isDragon",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "lastBreed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "father",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mother",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256[7]",
              "name": "ability",
              "type": "uint256[7]"
            },
            {
              "internalType": "uint256",
              "name": "specialPoint",
              "type": "uint256"
            }
          ],
          "internalType": "struct DragonBasic.DragonData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum DragonBasic.Stat",
          "name": "key",
          "type": "uint8"
        }
      ],
      "name": "getIndividualDragonState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getOwnershipData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            }
          ],
          "internalType": "struct ERC721A.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "hasSpecial",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "hatchEgg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isHatched",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "quantity",
          "type": "uint8"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        }
      ],
      "name": "mintNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOwnerToExplicitlySet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "numberMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeupdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum DragonBasic.Stat",
          "name": "key",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setDragonIndividualAbility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[4]",
          "name": "_eggUris",
          "type": "string[4]"
        }
      ],
      "name": "setEggUris",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DragonBasic.Age",
          "name": "age",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setLimitStatForAge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DragonBasic.DragonType",
          "name": "dragonType",
          "type": "uint8"
        },
        {
          "internalType": "enum DragonBasic.RarityType",
          "name": "rarity",
          "type": "uint8"
        },
        {
          "internalType": "enum DragonBasic.Stat",
          "name": "stat",
          "type": "uint8"
        },
        {
          "internalType": "uint256[2]",
          "name": "value",
          "type": "uint256[2]"
        }
      ],
      "name": "setStatRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[2][3][5]",
          "name": "_tokenUris",
          "type": "string[2][3][5]"
        }
      ],
      "name": "setTokenUris",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "updateName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum DragonBasic.Stat",
          "name": "key",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "upgradeDragonStat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "upgradeSpecialSkill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b086cc44cc3d3f960c43237d9e5aa7a88a92b51348aa352985d032dc61572e2",
  "receipt": {
    "to": null,
    "from": "0xc09eAC15f9Ba6462e8E4612af7C431E1cfe08b87",
    "contractAddress": "0x1BcefaDf8213Fb9Fc6418edF99E106bd61272744",
    "transactionIndex": 4,
    "gasUsed": "14547619",
    "logsBloom": "0x
    "blockHash": "0x75a369c8226b68a86abccf35fba4f88d0d560e23a7f207e1f5002e5286cf6726",
    "transactionHash": "0x6b086cc44cc3d3f960c43237d9e5aa7a88a92b51348aa352985d032dc61572e2",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 26893150,
        "transactionHash": "0x6b086cc44cc3d3f960c43237d9e5aa7a88a92b51348aa352985d032dc61572e2",
        "address": "0x1BcefaDf8213Fb9Fc6418edF99E106bd61272744",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c09eac15f9ba6462e8e4612af7c431e1cfe08b87"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x75a369c8226b68a86abccf35fba4f88d0d560e23a7f207e1f5002e5286cf6726"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 26893150,
        "transactionHash": "0x6b086cc44cc3d3f960c43237d9e5aa7a88a92b51348aa352985d032dc61572e2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c09eac15f9ba6462e8e4612af7c431e1cfe08b87",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000639f212b4a1b6090000000000000000000000000000000000000000000000002002c4481e1a3194000000000000000000000000000000000000000000000517034110ccf653cbdf00000000000000000000000000000000000000000000000019c8d23569787b8b000000000000000000000000000000000000000000000517097b02dfaaf581e8",
        "logIndex": 7,
        "blockHash": "0x75a369c8226b68a86abccf35fba4f88d0d560e23a7f207e1f5002e5286cf6726"
      }
    ],
    "blockNumber": 26893150,
    "cumulativeGasUsed": "19232203",
    "status": 1,
    "byzantium": true
  },
  "args": [
    20,
    1000,
    [
      [
        [
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/1.json",
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/2.json"
        ],
        [
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/3.json",
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/4.json"
        ],
        [
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/5.json",
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/6.json"
        ]
      ],
      [
        [
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/1.json",
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/2.json"
        ],
        [
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/3.json",
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/4.json"
        ],
        [
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/5.json",
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/6.json"
        ]
      ],
      [
        [
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/1.json",
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/2.json"
        ],
        [
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/3.json",
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/4.json"
        ],
        [
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/5.json",
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/6.json"
        ]
      ],
      [
        [
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/1.json",
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/2.json"
        ],
        [
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/3.json",
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/4.json"
        ],
        [
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/5.json",
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/6.json"
        ]
      ],
      [
        [
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/1.json",
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/2.json"
        ],
        [
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/3.json",
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/4.json"
        ],
        [
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/5.json",
          "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/6.json"
        ]
      ]
    ],
    [
      "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/0.json",
      "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/0.json",
      "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/0.json",
      "https://gateway.pinata.cloud/ipfs/QmcZJ2AXhPAThF5qab1WHCzrPZmjTn6TfJvHB2hbDNqkb6/0.json"
    ],
    [
      [
        [
          [
            1,
            4
          ],
          [
            2,
            7
          ],
          [
            1,
            3
          ],
          [
            1,
            5
          ],
          [
            1,
            5
          ],
          [
            1,
            4
          ],
          [
            1,
            2
          ]
        ],
        [
          [
            1,
            4
          ],
          [
            2,
            8
          ],
          [
            1,
            3
          ],
          [
            1,
            6
          ],
          [
            1,
            5
          ],
          [
            1,
            5
          ],
          [
            1,
            3
          ]
        ],
        [
          [
            1,
            5
          ],
          [
            3,
            9
          ],
          [
            1,
            3
          ],
          [
            2,
            7
          ],
          [
            2,
            6
          ],
          [
            2,
            6
          ],
          [
            1,
            4
          ]
        ],
        [
          [
            2,
            6
          ],
          [
            3,
            10
          ],
          [
            1,
            3
          ],
          [
            3,
            8
          ],
          [
            2,
            7
          ],
          [
            2,
            7
          ],
          [
            1,
            5
          ]
        ]
      ],
      [
        [
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            7
          ],
          [
            1,
            5
          ],
          [
            1,
            3
          ],
          [
            1,
            5
          ],
          [
            1,
            3
          ]
        ],
        [
          [
            1,
            4
          ],
          [
            1,
            4
          ],
          [
            2,
            8
          ],
          [
            1,
            5
          ],
          [
            1,
            3
          ],
          [
            1,
            5
          ],
          [
            1,
            3
          ]
        ],
        [
          [
            1,
            4
          ],
          [
            1,
            4
          ],
          [
            3,
            9
          ],
          [
            2,
            6
          ],
          [
            1,
            4
          ],
          [
            2,
            6
          ],
          [
            1,
            4
          ]
        ],
        [
          [
            2,
            5
          ],
          [
            2,
            5
          ],
          [
            3,
            10
          ],
          [
            2,
            7
          ],
          [
            1,
            4
          ],
          [
            2,
            6
          ],
          [
            2,
            5
          ]
        ]
      ],
      [
        [
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            7
          ],
          [
            2,
            7
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ]
        ],
        [
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            8
          ],
          [
            2,
            8
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ]
        ],
        [
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            3,
            9
          ],
          [
            2,
            9
          ],
          [
            1,
            4
          ],
          [
            1,
            3
          ]
        ],
        [
          [
            2,
            4
          ],
          [
            2,
            4
          ],
          [
            1,
            3
          ],
          [
            3,
            10
          ],
          [
            3,
            10
          ],
          [
            2,
            4
          ],
          [
            1,
            3
          ]
        ]
      ],
      [
        [
          [
            2,
            6
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            4
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            6
          ]
        ],
        [
          [
            2,
            7
          ],
          [
            1,
            3
          ],
          [
            1,
            4
          ],
          [
            1,
            5
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            7
          ]
        ],
        [
          [
            2,
            8
          ],
          [
            1,
            3
          ],
          [
            2,
            5
          ],
          [
            2,
            6
          ],
          [
            1,
            4
          ],
          [
            1,
            3
          ],
          [
            3,
            8
          ]
        ],
        [
          [
            3,
            9
          ],
          [
            1,
            3
          ],
          [
            2,
            6
          ],
          [
            2,
            7
          ],
          [
            2,
            5
          ],
          [
            1,
            3
          ],
          [
            3,
            9
          ]
        ]
      ],
      [
        [
          [
            1,
            7
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            7
          ]
        ],
        [
          [
            2,
            8
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            8
          ]
        ],
        [
          [
            3,
            9
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            4
          ],
          [
            1,
            3
          ],
          [
            3,
            9
          ]
        ],
        [
          [
            3,
            10
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            5
          ],
          [
            1,
            3
          ],
          [
            3,
            10
          ]
        ]
      ]
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "b474e0d835221309c977257c7f754341",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxBatchSize_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"collectionSize_\",\"type\":\"uint16\"},{\"internalType\":\"string[2][3][5]\",\"name\":\"_tokenUris\",\"type\":\"string[2][3][5]\"},{\"internalType\":\"string[4]\",\"name\":\"_eggUris\",\"type\":\"string[4]\"},{\"internalType\":\"uint256[2][7][4][5]\",\"name\":\"_stateRanges\",\"type\":\"uint256[2][7][4][5]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AdolescentAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AdultAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fatherTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"motherTokenId\",\"type\":\"uint256\"}],\"name\":\"breeding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAge\",\"outputs\":[{\"internalType\":\"enum DragonBasic.Age\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDragon\",\"outputs\":[{\"components\":[{\"internalType\":\"enum DragonBasic.RarityType\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"enum DragonBasic.DragonType\",\"name\":\"species\",\"type\":\"uint8\"},{\"internalType\":\"enum DragonBasic.Gender\",\"name\":\"gender\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDragon\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastBreed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"father\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mother\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[7]\",\"name\":\"ability\",\"type\":\"uint256[7]\"},{\"internalType\":\"uint256\",\"name\":\"specialPoint\",\"type\":\"uint256\"}],\"internalType\":\"struct DragonBasic.DragonData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum DragonBasic.Stat\",\"name\":\"key\",\"type\":\"uint8\"}],\"name\":\"getIndividualDragonState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnershipData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct ERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"hasSpecial\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"hatchEgg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isHatched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"quantity\",\"type\":\"uint8\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"}],\"name\":\"mintNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"numberMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeupdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum DragonBasic.Stat\",\"name\":\"key\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setDragonIndividualAbility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[4]\",\"name\":\"_eggUris\",\"type\":\"string[4]\"}],\"name\":\"setEggUris\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DragonBasic.Age\",\"name\":\"age\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLimitStatForAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DragonBasic.DragonType\",\"name\":\"dragonType\",\"type\":\"uint8\"},{\"internalType\":\"enum DragonBasic.RarityType\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"enum DragonBasic.Stat\",\"name\":\"stat\",\"type\":\"uint8\"},{\"internalType\":\"uint256[2]\",\"name\":\"value\",\"type\":\"uint256[2]\"}],\"name\":\"setStatRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[2][3][5]\",\"name\":\"_tokenUris\",\"type\":\"string[2][3][5]\"}],\"name\":\"setTokenUris\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"updateName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum DragonBasic.Stat\",\"name\":\"key\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"upgradeDragonStat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"upgradeSpecialSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"params\":{\"_eggUris\":\"egg metadata uris\",\"_tokenUris\":\"Dragon metadata uris\",\"collectionSize_\":\"NFT collection size\",\"maxBatchSize_\":\"Max size for ERC721A batch mint.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dragon.sol\":\"Dragon\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Dragon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./interface/ERC721A.sol\\\";\\r\\nimport \\\"./interface/DragonBasic.sol\\\";\\r\\n/**************************************************\\r\\n * Dragon NFT\\r\\n *\\r\\n * Created for Pyre by: Patrick Kishi\\r\\n * Audited by: Jill\\r\\n * Special thanks goes to: Jill\\r\\n ***************************************************\\r\\n */\\r\\n\\r\\ncontract Dragon is ERC721A, DragonBasic, Ownable, ReentrancyGuard {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Token URI. Token uri is different based on DragonType, Age and Gender\\r\\n    string[2][3][5] private tokenUris;\\r\\n    string[4] private eggUris;\\r\\n\\r\\n    // Min & Max level\\r\\n    uint8 public constant MIN_LEVEL = 1;\\r\\n    uint8 public constant MAX_LEVEL = 10;\\r\\n\\r\\n    // \\r\\n    uint public AdolescentAge = 2 days;\\r\\n    uint public AdultAge = 5 days;\\r\\n\\r\\n    // minters & updaters\\r\\n    mapping(address => bool) private minters;\\r\\n    mapping(address => bool) private updaters;\\r\\n\\r\\n    // DragonData token ID => data\\r\\n    mapping(uint => DragonData) private dragonInfo;\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(minters[msg.sender], \\\"Caller is not minter.\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyUpdater() {\\r\\n        require(updaters[msg.sender], \\\"Caller should be updater.\\\");\\r\\n        _;\\r\\n    }\\r\\n   \\r\\n    /**\\r\\n        @param maxBatchSize_ Max size for ERC721A batch mint.\\r\\n        @param collectionSize_ NFT collection size\\r\\n        @param _tokenUris Dragon metadata uris\\r\\n        @param _eggUris egg metadata uris\\r\\n    */\\r\\n    constructor(\\r\\n        uint16 maxBatchSize_,\\r\\n        uint16 collectionSize_,\\r\\n        string[2][3][5] memory _tokenUris,\\r\\n        string[4] memory _eggUris,\\r\\n        uint[2][7][4][5] memory _stateRanges\\r\\n    ) ERC721A(\\\"Pyre-Dragon\\\", \\\"Dragon\\\", maxBatchSize_, collectionSize_) DragonBasic(){\\r\\n        tokenUris = _tokenUris;\\r\\n        eggUris = _eggUris;\\r\\n        stateRanges = _stateRanges;\\r\\n    }\\r\\n\\r\\n    function getSum(uint _tokenId) internal view returns(uint sum) {\\r\\n        require(_exists(_tokenId), \\\"Not exists token.\\\");\\r\\n\\r\\n        DragonData memory dragon = dragonInfo[_tokenId];\\r\\n        sum = 0;\\r\\n        for (uint i = 0 ; i < dragon.ability.length ; i ++) {\\r\\n            sum += dragon.ability[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAge(uint _tokenId) public view returns(Age) {\\r\\n        require(_exists(_tokenId), \\\"Not exist NFT.\\\");\\r\\n        DragonData memory dragon = dragonInfo[_tokenId];\\r\\n        if (!dragon.isDragon) return Age.Egg;\\r\\n\\r\\n        uint age = block.timestamp - dragon.birthday;\\r\\n        if (age >= AdultAge) return Age.Adult;\\r\\n        if (age >= AdolescentAge) return Age.Adolescent;\\r\\n        return Age.Hatchling;\\r\\n    }\\r\\n\\r\\n    function random() private view returns (uint) {\\r\\n        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, totalSupply())));\\r\\n    }\\r\\n\\r\\n    function setDragonIndividualAbility(uint _tokenId, Stat key, uint value) external onlyUpdater {\\r\\n        require(_exists(_tokenId), \\\"Not exist NFT.\\\");\\r\\n\\r\\n        Age age = getAge(_tokenId);\\r\\n\\r\\n        require(value >= MIN_LEVEL && value <= ageLimitInfo[age], \\\"Invalid value.\\\");\\r\\n        \\r\\n        DragonData storage dragon = dragonInfo[_tokenId];\\r\\n        uint[7] storage data = dragon.ability;\\r\\n        data[uint(key)] = value;\\r\\n    }\\r\\n\\r\\n    function upgradeDragonStat(uint _tokenId, Stat key, uint delta) external onlyUpdater {\\r\\n        require(_exists(_tokenId), \\\"Not exist NFT.\\\");\\r\\n        require(isHatched(_tokenId), \\\"Dragon should be hatched first.\\\");\\r\\n\\r\\n        DragonData storage data = dragonInfo[_tokenId];\\r\\n        uint[7] storage ability = data.ability;\\r\\n\\r\\n        uint value = ability[uint(key)] + delta;\\r\\n        require(value >= MIN_LEVEL && value <= ageLimitInfo[getAge(_tokenId)], \\\"Invalid value.\\\");\\r\\n\\r\\n        ability[uint(key)] = value;\\r\\n    }\\r\\n\\r\\n    function upgradeSpecialSkill(uint _tokenId) external onlyUpdater {\\r\\n        require(_exists(_tokenId), \\\"Not exists.\\\");\\r\\n        require(isHatched(_tokenId), \\\"Dragon should be hatched first.\\\");\\r\\n\\r\\n        DragonData storage dragon = dragonInfo[_tokenId];\\r\\n        require(dragon.rarity == RarityType.Rare || dragon.rarity == RarityType.Legendary, \\\"Only Rare and Legendary can have special skill.\\\");\\r\\n        require(getAge(_tokenId) != Age.Adult, \\\"Cannot upgrade special skill at Adult age.\\\");\\r\\n        require(dragon.specialPoint < 5, \\\"You already reached to max.\\\");\\r\\n        dragon.specialPoint ++;\\r\\n    }\\r\\n\\r\\n    function hasSpecial(uint _tokenId) external view returns(bool) {\\r\\n        require(_exists(_tokenId), \\\"Not exists.\\\");\\r\\n        DragonData memory dragon = dragonInfo[_tokenId];\\r\\n        return dragon.specialPoint == 5;\\r\\n    }\\r\\n\\r\\n    function generateRarity(uint randomNumber) internal pure returns(RarityType) {\\r\\n        uint number = randomNumber % 100;\\r\\n        if (number < 50) {\\r\\n            return RarityType.Common;\\r\\n        } else if (number >= 50 && number < 80) {\\r\\n            return RarityType.Uncommon;\\r\\n        } else if (number >= 80 && number < 95) {\\r\\n            return RarityType.Rare;\\r\\n        } else {\\r\\n            return RarityType.Legendary;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function generateDragonType(uint randomNumber) internal pure returns(DragonType) {\\r\\n        uint number = randomNumber % 5;\\r\\n        return indexToType(number);\\r\\n    }\\r\\n\\r\\n    function generateGender(uint randomNumber) internal pure returns(Gender) {\\r\\n        return randomNumber % 1000 <= 995 ? Gender.MALE : Gender.FEMALE; \\r\\n    }\\r\\n\\r\\n    function hatchEgg(uint tokenId) external onlyUpdater {\\r\\n        require(!isHatched(tokenId), \\\"Already hatched\\\");\\r\\n\\r\\n        DragonData storage dragon = dragonInfo[tokenId];\\r\\n        \\r\\n        dragon.isDragon = true;\\r\\n        dragon.birthday = block.timestamp;\\r\\n       \\r\\n        for (uint i = 0; i < 7 ; i ++) {\\r\\n            dragon.ability[i] = stateRanges[uint(dragon.species)][uint(dragon.rarity)][i][0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isHatched(uint tokenId) public view returns(bool) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        DragonData memory dragon = dragonInfo[tokenId];\\r\\n        return dragon.isDragon;\\r\\n    }\\r\\n\\r\\n    function getDragon(uint tokenId) public view returns(DragonData memory) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return dragonInfo[tokenId];\\r\\n    }\\r\\n\\r\\n    function getIndividualDragonState(uint _tokenId, Stat key) external view returns(uint) {\\r\\n        require(_exists(_tokenId), \\\"Not exist NFT.\\\");\\r\\n\\r\\n        DragonData memory dragon = dragonInfo[_tokenId];\\r\\n        return dragon.ability[uint(key)];\\r\\n    }\\r\\n\\r\\n    function mintNFT(\\r\\n        address to,\\r\\n        uint8 quantity,\\r\\n        string[] memory names\\r\\n    )\\r\\n        external\\r\\n        nonReentrant\\r\\n        onlyMinter\\r\\n    {\\r\\n        require(totalSupply() + quantity <= collectionSize, \\\"Exceeds Max Supply\\\");\\r\\n        require(quantity == names.length, \\\"Not match array size.\\\");\\r\\n\\r\\n        uint currentSupply = totalSupply();\\r\\n\\r\\n        _safeMint(to, quantity);\\r\\n\\r\\n        for (uint i = 0 ; i < quantity ; i ++) {\\r\\n            uint randomNumber = random();\\r\\n\\r\\n            DragonType dragonType = generateDragonType(randomNumber);\\r\\n            Gender gender = generateGender(randomNumber); \\r\\n            RarityType rarity = generateRarity(randomNumber);\\r\\n\\r\\n            DragonData storage dragon = dragonInfo[currentSupply + i];\\r\\n            dragon.rarity = rarity;\\r\\n            dragon.species = dragonType;\\r\\n            dragon.gender = gender;\\r\\n            dragon.name = names[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function breeding(\\r\\n        address to,\\r\\n        uint fatherTokenId,\\r\\n        uint motherTokenId\\r\\n    )   \\r\\n        external\\r\\n        nonReentrant\\r\\n        onlyMinter\\r\\n    {\\r\\n        require(_exists(fatherTokenId), \\\"Not exists father.\\\");\\r\\n        require(_exists(motherTokenId), \\\"Not exists mother.\\\");\\r\\n\\r\\n        uint rn = random();\\r\\n        uint quantity = (rn % 100) == 99 ? 2 : 1; // 1% => 2, 99% => 1\\r\\n        uint restAmount = collectionSize - totalSupply();\\r\\n        require(restAmount > 0, \\\"Exceeds Max Supply.\\\");\\r\\n\\r\\n        quantity = quantity > restAmount ? restAmount : quantity;\\r\\n        uint currentSupply = totalSupply();\\r\\n\\r\\n        _safeMint(to, quantity);\\r\\n\\r\\n        DragonData memory father = dragonInfo[fatherTokenId];\\r\\n        DragonData storage mother = dragonInfo[motherTokenId];\\r\\n\\r\\n        for (uint i = 0 ; i < quantity ; i ++) {\\r\\n            uint randomNumber = random();\\r\\n\\r\\n            Gender gender = generateGender(randomNumber); \\r\\n            RarityType rarity = generateRarity(randomNumber);\\r\\n\\r\\n            DragonData storage dragon = dragonInfo[currentSupply + i];\\r\\n            dragon.rarity = rarity;\\r\\n            dragon.species = randomNumber > 50 ? father.species : mother.species;\\r\\n            dragon.gender = gender;\\r\\n            dragon.father = fatherTokenId;\\r\\n            dragon.mother = motherTokenId;\\r\\n            dragon.name = \\\"Breed\\\";\\r\\n        }\\r\\n        mother.lastBreed = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        DragonData memory dragon = dragonInfo[tokenId];\\r\\n\\r\\n        if (!dragon.isDragon) {\\r\\n            return eggUris[uint(dragon.rarity)];\\r\\n        }\\r\\n\\r\\n        return tokenUris[uint(dragon.species)][uint(getAge(tokenId))][uint(dragon.gender)];\\r\\n    }\\r\\n    function updateName(uint _tokenId, string memory name) external onlyUpdater {\\r\\n        require(_exists(_tokenId), \\\"Not exists token\\\");\\r\\n        DragonData storage dragon = dragonInfo[_tokenId];\\r\\n        dragon.name = name;\\r\\n    }\\r\\n\\r\\n    // Admin actions\\r\\n    function setTokenUris(string[2][3][5] memory _tokenUris) external onlyOwner {\\r\\n        tokenUris = _tokenUris;\\r\\n    }\\r\\n\\r\\n    function setEggUris(string[4] memory _eggUris) external onlyOwner {\\r\\n            eggUris = _eggUris;\\r\\n    }\\r\\n    \\r\\n    function addMinter(address _address) external onlyOwner {\\r\\n        require(!minters[_address], \\\"Already minter.\\\");\\r\\n        minters[_address] = true;\\r\\n    }\\r\\n    function addUpdater(address _address) external onlyOwner {\\r\\n        require(!updaters[_address], \\\"Already updater.\\\");\\r\\n        updaters[_address] = true;\\r\\n    }\\r\\n\\r\\n    function removeMinter (address _address) external onlyOwner {\\r\\n        require(minters[_address], \\\"Already removed.\\\");\\r\\n        minters[_address] = false;\\r\\n    }\\r\\n    function removeupdater(address _address) external onlyOwner {\\r\\n        require(updaters[_address], \\\"Already removed.\\\");\\r\\n        updaters[_address] = false;\\r\\n    }\\r\\n    \\r\\n    function setStatRange(DragonType dragonType, RarityType rarity, Stat stat, uint[2] memory value) external onlyOwner{\\r\\n        require(value[1] <= MAX_LEVEL && value[0] >= MIN_LEVEL, \\\"Invalid value\\\");\\r\\n        stateRanges[uint(dragonType)][uint(rarity)][uint(stat)] = value;\\r\\n    }\\r\\n    function setLimitStatForAge(Age age, uint value) external onlyOwner {\\r\\n        require(value <= MAX_LEVEL, \\\"Invalid value\\\");\\r\\n        ageLimitInfo[age] = value;\\r\\n    }\\r\\n\\r\\n    // utility functions\\r\\n    function numberMinted(address owner) public view returns (uint256) {\\r\\n        return _numberMinted(owner);\\r\\n    }\\r\\n\\r\\n    function getOwnershipData(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (TokenOwnership memory)\\r\\n    {\\r\\n        return ownershipOf(tokenId);\\r\\n    }\\r\\n\\r\\n    function isExist(uint tokenId) external view returns(bool) {\\r\\n        return _exists(tokenId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2846e496ca246ecdaeba780c4110af9ea3bc49c0092ca9b86e8fe89ed26d1527\",\"license\":\"MIT\"},\"contracts/interface/DragonBasic.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\ncontract DragonBasic {\\r\\n    // Rarity. Common 50%, Uncommon 30%, Rare 15%, Legendary 5%\\r\\n    enum RarityType {\\r\\n        Common,\\r\\n        Uncommon,\\r\\n        Rare,\\r\\n        Legendary\\r\\n    }\\r\\n\\r\\n    // Dragon Type: The same percent\\r\\n    enum DragonType {\\r\\n        Attack,\\r\\n        Healer,\\r\\n        Stealth,\\r\\n        Rescue,\\r\\n        Supply\\r\\n    }\\r\\n\\r\\n    // Male: 99.5%, Female: 0.5%\\r\\n    enum Gender {\\r\\n        MALE,\\r\\n        FEMALE\\r\\n    }\\r\\n\\r\\n    // Age\\r\\n    enum Age {\\r\\n        Egg,\\r\\n        Hatchling,\\r\\n        Adolescent,\\r\\n        Adult\\r\\n    }\\r\\n\\r\\n    // Stats\\r\\n    enum Stat {\\r\\n        Strength,\\r\\n        FireDamage,\\r\\n        Healing,\\r\\n        Agility,\\r\\n        Flight,\\r\\n        Magic,\\r\\n        Defense\\r\\n    }\\r\\n\\r\\n    // TrainTypes \\r\\n    enum TrainType {\\r\\n        Feed,\\r\\n        CastSpell,\\r\\n        SpecialSkill,\\r\\n\\r\\n        Study,\\r\\n        Spar,\\r\\n        Obstacle,\\r\\n        \\r\\n        Fight,\\r\\n        Hunt,\\r\\n        Rescue,\\r\\n        Race\\r\\n    }\\r\\n\\r\\n    struct DragonData {\\r\\n        RarityType rarity;\\r\\n        DragonType species;\\r\\n        Gender gender;\\r\\n        uint birthday;\\r\\n        bool isDragon;\\r\\n        uint lastBreed;\\r\\n        uint father;\\r\\n        uint mother;\\r\\n        string name;\\r\\n        uint[7] ability;\\r\\n        uint specialPoint; // increase to max 5. Should be developed before Adult age. \\r\\n    }\\r\\n\\r\\n    // states limit per age\\r\\n    mapping(Age => uint) internal ageLimitInfo; \\r\\n\\r\\n    // mapping(DragonType => mapping(RarityType => mapping(Stat => StateRange))) internal stateRanges;\\r\\n    uint[2][7][4][5] stateRanges;\\r\\n\\r\\n    constructor() {\\r\\n        ageLimitInfo[Age.Egg] = 0;\\r\\n        ageLimitInfo[Age.Hatchling] = 3;\\r\\n        ageLimitInfo[Age.Adolescent] = 5;\\r\\n        ageLimitInfo[Age.Adult] = 10;\\r\\n    }\\r\\n\\r\\n    function indexToStat(uint index) internal pure returns(Stat) {\\r\\n        require(index < 7, \\\"Invalid stat index.\\\");\\r\\n\\r\\n        if (index == 0) {\\r\\n            return Stat.Strength;\\r\\n        } else if (index == 1) {\\r\\n            return Stat.FireDamage;\\r\\n        } else if (index == 2) {\\r\\n            return Stat.Healing;\\r\\n        } else if (index == 3) {\\r\\n            return Stat.Agility;\\r\\n        } else if (index == 4) {\\r\\n            return Stat.Flight;\\r\\n        } else if (index == 5) {\\r\\n            return Stat.Magic;\\r\\n        } else {\\r\\n            return Stat.Defense;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function indexToType(uint index) internal pure returns(DragonType) {\\r\\n        require(index < 5, \\\"Invalid type index.\\\");\\r\\n\\r\\n        if (index == 0) {\\r\\n            return DragonType.Attack;\\r\\n        } else if (index == 1) {\\r\\n            return DragonType.Healer;\\r\\n        } else if (index == 2) {\\r\\n            return DragonType.Stealth;\\r\\n        } else if (index == 3) {\\r\\n            return DragonType.Rescue;\\r\\n        } else {\\r\\n            return DragonType.Supply;\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xbf107d2ce7313e405aa67247bfb097c5a2dec8c10c66cc4cef18a764fa0de6ee\"},\"contracts/interface/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Assumes the number of issuable tokens (collection size) is capped and fits in a uint128.\\r\\n *\\r\\n * Does not support burning tokens to address(0).\\r\\n */\\r\\ncontract ERC721A is\\r\\n  Context,\\r\\n  ERC165,\\r\\n  IERC721,\\r\\n  IERC721Metadata,\\r\\n  IERC721Enumerable\\r\\n{\\r\\n  using Address for address;\\r\\n  using Strings for uint256;\\r\\n\\r\\n  struct TokenOwnership {\\r\\n    address addr;\\r\\n    uint64 startTimestamp;\\r\\n  }\\r\\n\\r\\n  struct AddressData {\\r\\n    uint128 balance;\\r\\n    uint128 numberMinted;\\r\\n  }\\r\\n\\r\\n  uint256 private currentIndex = 0;\\r\\n\\r\\n  uint256 internal immutable collectionSize;\\r\\n  uint256 internal immutable maxBatchSize;\\r\\n\\r\\n  // Token name\\r\\n  string private _name;\\r\\n\\r\\n  // Token symbol\\r\\n  string private _symbol;\\r\\n\\r\\n  // Mapping from token ID to ownership details\\r\\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\r\\n  mapping(uint256 => TokenOwnership) private _ownerships;\\r\\n\\r\\n  // Mapping owner address to address data\\r\\n  mapping(address => AddressData) private _addressData;\\r\\n\\r\\n  // Mapping from token ID to approved address\\r\\n  mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n  // Mapping from owner to operator approvals\\r\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n  /**\\r\\n   * @dev\\r\\n   * `maxBatchSize` refers to how much a minter can mint at a time.\\r\\n   * `collectionSize_` refers to how many tokens are in the collection.\\r\\n   */\\r\\n  constructor(\\r\\n    string memory name_,\\r\\n    string memory symbol_,\\r\\n    uint256 maxBatchSize_,\\r\\n    uint256 collectionSize_\\r\\n  ) {\\r\\n    require(\\r\\n      collectionSize_ > 0,\\r\\n      \\\"ERC721A: collection must have a nonzero supply\\\"\\r\\n    );\\r\\n    require(maxBatchSize_ > 0, \\\"ERC721A: max batch size must be nonzero\\\");\\r\\n    _name = name_;\\r\\n    _symbol = symbol_;\\r\\n    maxBatchSize = maxBatchSize_;\\r\\n    collectionSize = collectionSize_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-totalSupply}.\\r\\n   */\\r\\n  function totalSupply() public view override returns (uint256) {\\r\\n    return currentIndex;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n   */\\r\\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\\r\\n    require(index < totalSupply(), \\\"ERC721A: global index out of bounds\\\");\\r\\n    return index;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n   * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.\\r\\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\r\\n   */\\r\\n  function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\r\\n    uint256 numMintedSoFar = totalSupply();\\r\\n    uint256 tokenIdsIdx = 0;\\r\\n    address currOwnershipAddr = address(0);\\r\\n    for (uint256 i = 0; i < numMintedSoFar; i++) {\\r\\n      TokenOwnership memory ownership = _ownerships[i];\\r\\n      if (ownership.addr != address(0)) {\\r\\n        currOwnershipAddr = ownership.addr;\\r\\n      }\\r\\n      if (currOwnershipAddr == owner) {\\r\\n        if (tokenIdsIdx == index) {\\r\\n          return i;\\r\\n        }\\r\\n        tokenIdsIdx++;\\r\\n      }\\r\\n    }\\r\\n    revert(\\\"ERC721A: unable to get token of owner by index\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override(ERC165, IERC165)\\r\\n    returns (bool)\\r\\n  {\\r\\n    return\\r\\n      interfaceId == type(IERC721).interfaceId ||\\r\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n      interfaceId == type(IERC721Enumerable).interfaceId ||\\r\\n      super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-balanceOf}.\\r\\n   */\\r\\n  function balanceOf(address owner) public view override returns (uint256) {\\r\\n    require(owner != address(0), \\\"ERC721A: balance query for the zero address\\\");\\r\\n    return uint256(_addressData[owner].balance);\\r\\n  }\\r\\n\\r\\n  function _numberMinted(address owner) internal view returns (uint256) {\\r\\n    require(\\r\\n      owner != address(0),\\r\\n      \\\"ERC721A: number minted query for the zero address\\\"\\r\\n    );\\r\\n    return uint256(_addressData[owner].numberMinted);\\r\\n  }\\r\\n\\r\\n  function ownershipOf(uint256 tokenId)\\r\\n    internal\\r\\n    view\\r\\n    returns (TokenOwnership memory)\\r\\n  {\\r\\n    require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\r\\n\\r\\n    uint256 lowestTokenToCheck;\\r\\n    if (tokenId >= maxBatchSize) {\\r\\n      lowestTokenToCheck = tokenId - maxBatchSize + 1;\\r\\n    }\\r\\n\\r\\n    for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\\r\\n      TokenOwnership memory ownership = _ownerships[curr];\\r\\n      if (ownership.addr != address(0)) {\\r\\n        return ownership;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    revert(\\\"ERC721A: unable to determine the owner of token\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-ownerOf}.\\r\\n   */\\r\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n    return ownershipOf(tokenId).addr;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-name}.\\r\\n   */\\r\\n  function name() public view virtual override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-symbol}.\\r\\n   */\\r\\n  function symbol() public view virtual override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-tokenURI}.\\r\\n   */\\r\\n  function tokenURI(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (string memory)\\r\\n  {\\r\\n    require(\\r\\n      _exists(tokenId),\\r\\n      \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n    );\\r\\n\\r\\n    string memory baseURI = _baseURI();\\r\\n    return\\r\\n      bytes(baseURI).length > 0\\r\\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\\r\\n        : \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n   * by default, can be overriden in child contracts.\\r\\n   */\\r\\n  function _baseURI() internal view virtual returns (string memory) {\\r\\n    return \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-approve}.\\r\\n   */\\r\\n  function approve(address to, uint256 tokenId) public override {\\r\\n    address owner = ERC721A.ownerOf(tokenId);\\r\\n    require(to != owner, \\\"ERC721A: approval to current owner\\\");\\r\\n\\r\\n    require(\\r\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n      \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\r\\n    );\\r\\n\\r\\n    _approve(to, tokenId, owner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-getApproved}.\\r\\n   */\\r\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\r\\n    require(_exists(tokenId), \\\"ERC721A: approved query for nonexistent token\\\");\\r\\n\\r\\n    return _tokenApprovals[tokenId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-setApprovalForAll}.\\r\\n   */\\r\\n  function setApprovalForAll(address operator, bool approved) public override {\\r\\n    require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\r\\n\\r\\n    _operatorApprovals[_msgSender()][operator] = approved;\\r\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-isApprovedForAll}.\\r\\n   */\\r\\n  function isApprovedForAll(address owner, address operator)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _operatorApprovals[owner][operator];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-transferFrom}.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public override {\\r\\n    _transfer(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public override {\\r\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) public override {\\r\\n    _transfer(from, to, tokenId);\\r\\n    require(\\r\\n      _checkOnERC721Received(from, to, tokenId, _data),\\r\\n      \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns whether `tokenId` exists.\\r\\n   *\\r\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n   *\\r\\n   * Tokens start existing when they are minted (`_mint`),\\r\\n   */\\r\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n    return tokenId < currentIndex;\\r\\n  }\\r\\n\\r\\n  function _safeMint(address to, uint256 quantity) internal {\\r\\n    _safeMint(to, quantity, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - there must be `quantity` tokens remaining unminted in the total collection.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `quantity` cannot be larger than the max batch size.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _safeMint(\\r\\n    address to,\\r\\n    uint256 quantity,\\r\\n    bytes memory _data\\r\\n  ) internal {\\r\\n    uint256 startTokenId = currentIndex;\\r\\n    require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\r\\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\\r\\n    require(!_exists(startTokenId), \\\"ERC721A: token already minted\\\");\\r\\n    require(quantity <= maxBatchSize, \\\"ERC721A: quantity to mint too high\\\");\\r\\n\\r\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n    AddressData memory addressData = _addressData[to];\\r\\n    _addressData[to] = AddressData(\\r\\n      addressData.balance + uint128(quantity),\\r\\n      addressData.numberMinted + uint128(quantity)\\r\\n    );\\r\\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\\r\\n\\r\\n    uint256 updatedIndex = startTokenId;\\r\\n\\r\\n    for (uint256 i = 0; i < quantity; i++) {\\r\\n      emit Transfer(address(0), to, updatedIndex);\\r\\n      require(\\r\\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\\r\\n        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\r\\n      );\\r\\n      updatedIndex++;\\r\\n    }\\r\\n\\r\\n    currentIndex = updatedIndex;\\r\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers `tokenId` from `from` to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must be owned by `from`.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _transfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) private {\\r\\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\r\\n\\r\\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\r\\n      getApproved(tokenId) == _msgSender() ||\\r\\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\\r\\n\\r\\n    require(\\r\\n      isApprovedOrOwner,\\r\\n      \\\"ERC721A: transfer caller is not owner nor approved\\\"\\r\\n    );\\r\\n\\r\\n    require(\\r\\n      prevOwnership.addr == from,\\r\\n      \\\"ERC721A: transfer from incorrect owner\\\"\\r\\n    );\\r\\n    require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n    // Clear approvals from the previous owner\\r\\n    _approve(address(0), tokenId, prevOwnership.addr);\\r\\n\\r\\n    _addressData[from].balance -= 1;\\r\\n    _addressData[to].balance += 1;\\r\\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\\r\\n\\r\\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\r\\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n    uint256 nextTokenId = tokenId + 1;\\r\\n    if (_ownerships[nextTokenId].addr == address(0)) {\\r\\n      if (_exists(nextTokenId)) {\\r\\n        _ownerships[nextTokenId] = TokenOwnership(\\r\\n          prevOwnership.addr,\\r\\n          prevOwnership.startTimestamp\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Transfer(from, to, tokenId);\\r\\n    _afterTokenTransfers(from, to, tokenId, 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve `to` to operate on `tokenId`\\r\\n   *\\r\\n   * Emits a {Approval} event.\\r\\n   */\\r\\n  function _approve(\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    address owner\\r\\n  ) private {\\r\\n    _tokenApprovals[tokenId] = to;\\r\\n    emit Approval(owner, to, tokenId);\\r\\n  }\\r\\n\\r\\n  uint256 public nextOwnerToExplicitlySet = 0;\\r\\n\\r\\n  /**\\r\\n   * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\r\\n   */\\r\\n  function _setOwnersExplicit(uint256 quantity) internal {\\r\\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\\r\\n    require(quantity > 0, \\\"quantity must be nonzero\\\");\\r\\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\\r\\n    if (endIndex > collectionSize - 1) {\\r\\n      endIndex = collectionSize - 1;\\r\\n    }\\r\\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\\r\\n    require(_exists(endIndex), \\\"not enough minted yet for this cleanup\\\");\\r\\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\\r\\n      if (_ownerships[i].addr == address(0)) {\\r\\n        TokenOwnership memory ownership = ownershipOf(i);\\r\\n        _ownerships[i] = TokenOwnership(\\r\\n          ownership.addr,\\r\\n          ownership.startTimestamp\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n    nextOwnerToExplicitlySet = endIndex + 1;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n   * The call is not executed if the target address is not a contract.\\r\\n   *\\r\\n   * @param from address representing the previous owner of the given token ID\\r\\n   * @param to target address that will receive the tokens\\r\\n   * @param tokenId uint256 ID of the token to be transferred\\r\\n   * @param _data bytes optional data to send along with the call\\r\\n   * @return bool whether the call correctly returned the expected magic value\\r\\n   */\\r\\n  function _checkOnERC721Received(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) private returns (bool) {\\r\\n    if (to.isContract()) {\\r\\n      try\\r\\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\r\\n      returns (bytes4 retval) {\\r\\n        return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n      } catch (bytes memory reason) {\\r\\n        if (reason.length == 0) {\\r\\n          revert(\\\"ERC721A: transfer to non ERC721Receiver implementer\\\");\\r\\n        } else {\\r\\n          assembly {\\r\\n            revert(add(32, reason), mload(reason))\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\r\\n   *\\r\\n   * startTokenId - the first token id to be transferred\\r\\n   * quantity - the amount to be transferred\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n   * transferred to `to`.\\r\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n   */\\r\\n  function _beforeTokenTransfers(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 startTokenId,\\r\\n    uint256 quantity\\r\\n  ) internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n   * minting.\\r\\n   *\\r\\n   * startTokenId - the first token id to be transferred\\r\\n   * quantity - the amount to be transferred\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - when `from` and `to` are both non-zero.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   */\\r\\n  function _afterTokenTransfers(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 startTokenId,\\r\\n    uint256 quantity\\r\\n  ) internal virtual {}\\r\\n}\",\"keccak256\":\"0xcacd0c4b4a39075d060e36de8c17cddb9a67bae270d7b8b62b9148ba286f3186\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526000805560006007556202a3006101455562069780610146553480156200002a57600080fd5b50604051620062e3380380620062e38339810160408190526200004d9162000bd2565b6040518060400160405280600b81526020016a283cb93296a23930b3b7b760a91b81525060405180604001604052806006815260200165223930b3b7b760d11b8152508661ffff168661ffff1660008111620000c65760405162461bcd60e51b8152600401620000bd9062000d28565b60405180910390fd5b60008211620000e95760405162461bcd60e51b8152600401620000bd9062000d16565b8351620000fe9060019060208701906200025c565b508251620001149060029060208601906200025c565b5060a0919091526080525050600860205260007f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c781905560037fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac55f81905560057f6add646517a5b0f6793cd5891b7937d28a5b2981a5d88ebc7cd776088fea9041559052600a7f625b35f5e76f098dd7c3a05b10e2e5e78a4a01228d60c3b143426cdf36d2645555620001c63362000209565b600161012255620001dc610123846005620002eb565b50620001ed61014183600462000339565b50620001fd60098260056200038c565b50505050505062000e81565b61012180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200026a9062000ddc565b90600052602060002090601f0160209004810192826200028e5760008555620002d9565b82601f10620002a957805160ff1916838001178555620002d9565b82800160010185558215620002d9579182015b82811115620002d9578251825591602001919060010190620002bc565b50620002e7929150620003db565b5090565b601e830191839082156200032b579160200282015b828111156200032b5782516200031a9083906003620003f2565b509160200191906006019062000300565b50620002e792915062000440565b82600481019282156200037e579160200282015b828111156200037e57825180516200036d9184916020909101906200025c565b50916020019190600101906200034d565b50620002e792915062000461565b61011883019183908215620003cd579160200282015b82811115620003cd578251620003bc908390600462000482565b5091602001919060380190620003a2565b50620002e7929150620004d0565b5b80821115620002e75760008155600101620003dc565b60068301918390821562000432579160200282015b8281111562000432578251620004219083906002620004f1565b509160200191906002019062000407565b50620002e792915062000536565b80821115620002e757600062000457828262000557565b5060060162000440565b80821115620002e75760006200047882826200058b565b5060010162000461565b603883019183908215620004c2579160200282015b82811115620004c2578251620004b19083906007620005cd565b50916020019190600e019062000497565b50620002e79291506200061b565b80821115620002e7576000620004e782826200063c565b50603801620004d0565b82600281019282156200037e579160200282015b828111156200037e5782518051620005259184916020909101906200025c565b509160200191906001019062000505565b80821115620002e75760006200054d828262000680565b5060020162000536565b50600062000566828262000680565b50600201600062000578828262000680565b506200058990600201600062000680565b565b508054620005999062000ddc565b6000825580601f10620005aa575050565b601f016020900490600052602060002090810190620005ca9190620003db565b50565b600e830191839082156200060d579160200282015b828111156200060d578251620005fc9083906002620006a0565b5091602001919060020190620005e2565b50620002e7929150620006d0565b80821115620002e7576000620006328282620006ec565b50600e016200061b565b5060006200064b8282620006ec565b50600e0160006200065d8282620006ec565b50600e0160006200066f8282620006ec565b506200058990600e016000620006ec565b5060006200068f82826200058b565b50620005899060010160006200058b565b8260028101928215620002d95791602002820182811115620002d9578251825591602001919060010190620002bc565b80821115620002e75760008082556001820155600201620006d0565b50620005ca90600e810190620006d0565b6000620007146200070e8462000d59565b62000d3a565b90508082856107008602820111156200072c57600080fd5b60005b858110156200075f578162000745888262000ac8565b84525060209092019161070091909101906001016200072f565b5050509392505050565b60006200077a6200070e8462000d59565b905080828560208602820111156200079157600080fd5b60005b858110156200075f5781516001600160401b03811115620007b457600080fd5b808601620007c3898262000ae9565b85525050602092830192919091019060010162000794565b6000620007ec6200070e8462000d59565b90508082856101c08602820111156200080457600080fd5b60005b858110156200075f57816200081d888262000b0a565b8452506020909201916101c0919091019060010162000807565b6000620008486200070e8462000d59565b905080828560208602820111156200085f57600080fd5b60005b858110156200075f5781516001600160401b038111156200088257600080fd5b80860162000891898262000b2b565b85525050602092830192919091019060010162000862565b6000620008ba6200070e8462000d59565b90508082856040860282011115620008d157600080fd5b60005b858110156200075f5781620008ea888262000b6d565b84525060209092019160409190910190600101620008d4565b6000620009146200070e8462000d59565b905080828560208602820111156200092b57600080fd5b60005b858110156200075f5781516001600160401b038111156200094e57600080fd5b8086016200095d898262000b8e565b8552505060209283019291909101906001016200092e565b6000620009866200070e8462000d59565b905080828560208602820111156200099d57600080fd5b60005b858110156200075f5781516001600160401b03811115620009c057600080fd5b808601620009cf898262000b8e565b855250506020928301929190910190600101620009a0565b6000620009f86200070e8462000d59565b9050808285602086028201111562000a0f57600080fd5b60005b858110156200075f578162000a28888262000bc5565b845250602092830192919091019060010162000a12565b600062000a506200070e8462000d7c565b90508281526020810184848401111562000a6957600080fd5b62000a7684828562000da9565b509392505050565b600082601f83011262000a9057600080fd5b600562000a9f848285620006fd565b949350505050565b600082601f83011262000ab957600080fd5b600562000a9f84828562000769565b600082601f83011262000ada57600080fd5b600462000a9f848285620007db565b600082601f83011262000afb57600080fd5b600362000a9f84828562000837565b600082601f83011262000b1c57600080fd5b600762000a9f848285620008a9565b600082601f83011262000b3d57600080fd5b600262000a9f84828562000903565b600082601f83011262000b5e57600080fd5b600462000a9f84828562000975565b600082601f83011262000b7f57600080fd5b600262000a9f848285620009e7565b600082601f83011262000ba057600080fd5b815162000a9f84826020860162000a3f565b805162000bbf8162000e68565b92915050565b805162000bbf8162000e7a565b6000806000806000612380868803121562000bec57600080fd5b600062000bfa888862000bb2565b955050602062000c0d8882890162000bb2565b94505060408601516001600160401b0381111562000c2a57600080fd5b62000c388882890162000aa7565b93505060608601516001600160401b0381111562000c5557600080fd5b62000c638882890162000b4c565b925050608062000c768882890162000a7e565b9150509295509295909350565b602781526000602082017f455243373231413a206d61782062617463682073697a65206d757374206265208152666e6f6e7a65726f60c81b602082015291505b5060400190565b602e81526000602082017f455243373231413a20636f6c6c656374696f6e206d757374206861766520612081526d6e6f6e7a65726f20737570706c7960901b6020820152915062000cc3565b6020808252810162000bbf8162000c83565b6020808252810162000bbf8162000cca565b600062000d4660405190565b905062000d54828262000e0d565b919050565b60006001600160401b0382111562000d755762000d7562000e52565b5060200290565b60006001600160401b0382111562000d985762000d9862000e52565b601f19601f83011660200192915050565b60005b8381101562000dc657818101518382015260200162000dac565b8381111562000dd6576000848401525b50505050565b60028104600182168062000df157607f821691505b6020821081141562000e075762000e0762000e3c565b50919050565b601f19601f83011681018181106001600160401b038211171562000e355762000e3562000e52565b6040525050565b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61ffff81165b8114620005ca57600080fd5b8062000e6e565b60805160a05161542762000ebc60003960008181613186015281816131b0015261348d015260008181610ba40152611f3a01526154276000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c8063715018a611610167578063b88d4fde116100ce578063da2a0ecc11610087578063da2a0ecc146105ac578063dc33e681146105bf578063e0bb933b146105d2578063e4d3b339146105f2578063e985e9c514610605578063f2fde38b1461064157600080fd5b8063b88d4fde1461054f578063bd60b83f14610562578063c87b56dd1461056a578063ca8f8ff31461057d578063ced3e3f114610590578063d7224ba0146105a357600080fd5b8063983b2d5611610120578063983b2d56146104db578063a22cb465146104ee578063a4356bec14610501578063a49062d414610514578063a5d4414b14610529578063b7892dcb1461053c57600080fd5b8063715018a6146104735780637ec7f1d41461047b5780638da5cb5b1461048e5780639231ab2a146104a05780639585dae1146104c057806395d89b41146104d357600080fd5b80632f745c591161020b57806343d24a5e116101c457806343d24a5e1461040a5780634f6ccce71461041d57806353e76f2c14610430578063628281a6146104435780636352211e1461044d57806370a082311461046057600080fd5b80632f745c59146103985780633092afd5146103ab5780633a04e2f2146103be5780633af36fd7146103d15780633fc535d2146103e457806342842e0e146103f757600080fd5b80630e37008a1161025d5780630e37008a1461032457806314d849b81461034457806318160ddd1461035757806322aa152a1461035f5780632385554c1461037257806323b872dd1461038557600080fd5b806301ffc9a71461029a578063043059ab146102c357806306fdde03146102da578063081812fc146102ef578063095ea7b31461030f575b600080fd5b6102ad6102a836600461406a565b610654565b6040516102ba9190614db1565b60405180910390f35b6102cd6101465481565b6040516102ba91906150ad565b6102e26106c1565b6040516102ba9190614dcd565b6103026102fd36600461411a565b610753565b6040516102ba9190614d5f565b61032261031d366004613f46565b6107a1565b005b61033761033236600461411a565b610828565b6040516102ba9190614dbf565b610322610352366004613f76565b610abc565b6000546102cd565b61032261036d366004614036565b610fa9565b61032261038036600461411a565b610fe6565b610322610393366004613e51565b611166565b6102cd6103a6366004613f46565b611171565b6103226103b9366004613df9565b61125c565b6102cd6103cc366004614138565b6112e2565b6103226103df36600461411a565b61156f565b6102ad6103f236600461411a565b6116f2565b610322610405366004613e51565b61193d565b610322610418366004613df9565b611958565b6102cd61042b36600461411a565b6119e2565b61032261043e36600461419a565b611a08565b6102cd6101455481565b61030261045b36600461411a565b611a8c565b6102cd61046e366004613df9565b611a9e565b610322611aeb565b610322610489366004614002565b611b22565b610121546001600160a01b0316610302565b6104b36104ae36600461411a565b611b5b565b6040516102ba919061509f565b6103226104ce366004614168565b611b78565b6102e2611d27565b6103226104e9366004613df9565b611d36565b6103226104fc366004613f16565b611dc0565b61032261050f366004613df9565b611e58565b61051c600a81565b6040516102ba91906150bb565b610322610537366004613fa8565b611ede565b61032261054a3660046140c5565b612123565b61032261055d366004613e9e565b61225f565b61051c600181565b6102e261057836600461411a565b612292565b6102ad61058b36600461411a565b612681565b6102ad61059e36600461411a565b61268e565b6102cd60075481565b6103226105ba366004614168565b6128d5565b6102cd6105cd366004613df9565b6129ec565b6105e56105e036600461411a565b6129f7565b6040516102ba919061508e565b6103226106003660046140a6565b612c3f565b6102ad610613366004613e17565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b61032261064f366004613df9565b612ce4565b60006001600160e01b031982166380ac58cd60e01b148061068557506001600160e01b03198216635b5e139f60e01b145b806106a057506001600160e01b0319821663780e9d6360e01b145b806106bb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600180546106d09061526f565b80601f01602080910402602001604051908101604052809291908181526020018280546106fc9061526f565b80156107495780601f1061071e57610100808354040283529160200191610749565b820191906000526020600020905b81548152906001019060200180831161072c57829003601f168201915b5050505050905090565b6000610760826000541190565b6107855760405162461bcd60e51b815260040161077c9061504e565b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b60006107ac82611a8c565b9050806001600160a01b0316836001600160a01b031614156107e05760405162461bcd60e51b815260040161077c90614f8e565b336001600160a01b03821614806107fc57506107fc8133610613565b6108185760405162461bcd60e51b815260040161077c90614e8e565b610823838383612d41565b505050565b6000610835826000541190565b6108515760405162461bcd60e51b815260040161077c90614efe565b60008281526101496020526040808220815161016081019092528054829060ff16600381111561089157634e487b7160e01b600052602160045260246000fd5b60038111156108b057634e487b7160e01b600052602160045260246000fd5b81528154602090910190610100900460ff1660048111156108e157634e487b7160e01b600052602160045260246000fd5b600481111561090057634e487b7160e01b600052602160045260246000fd5b8152815460209091019062010000900460ff16600181111561093257634e487b7160e01b600052602160045260246000fd5b600181111561095157634e487b7160e01b600052602160045260246000fd5b815260018201546020820152600282015460ff16151560408201526003820154606082015260048201546080820152600582015460a082015260068201805460c09092019161099f9061526f565b80601f01602080910402602001604051908101604052809291908181526020018280546109cb9061526f565b8015610a185780601f106109ed57610100808354040283529160200191610a18565b820191906000526020600020905b8154815290600101906020018083116109fb57829003601f168201915b50505091835250506040805160e08101918290526020909201919060078481019182845b815481526020019060010190808311610a3c5750505050508152602001600e8201548152505090508060800151610a765750600092915050565b6000816060015142610a8891906151c8565b9050610146548110610a9e575060039392505050565b610145548110610ab2575060029392505050565b5060019392505050565b6002610122541415610ae05760405162461bcd60e51b815260040161077c9061500e565b600261012255336000908152610147602052604090205460ff16610b165760405162461bcd60e51b815260040161077c90614f9e565b610b21826000541190565b610b3d5760405162461bcd60e51b815260040161077c90614e0e565b610b48816000541190565b610b645760405162461bcd60e51b815260040161077c90614e6e565b6000610b6e612d9d565b90506000610b7d6064836152dd565b606314610b8b576001610b8e565b60025b60ff1690506000610b9e60005490565b610bc8907f00000000000000000000000000000000000000000000000000000000000000006151c8565b905060008111610bea5760405162461bcd60e51b815260040161077c90614ffe565b808211610bf75781610bf9565b805b91506000610c0660005490565b9050610c128784612dda565b60008681526101496020526040808220815161016081019092528054829060ff166003811115610c5257634e487b7160e01b600052602160045260246000fd5b6003811115610c7157634e487b7160e01b600052602160045260246000fd5b81528154602090910190610100900460ff166004811115610ca257634e487b7160e01b600052602160045260246000fd5b6004811115610cc157634e487b7160e01b600052602160045260246000fd5b8152815460209091019062010000900460ff166001811115610cf357634e487b7160e01b600052602160045260246000fd5b6001811115610d1257634e487b7160e01b600052602160045260246000fd5b815260018201546020820152600282015460ff16151560408201526003820154606082015260048201546080820152600582015460a082015260068201805460c090920191610d609061526f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8c9061526f565b8015610dd95780601f10610dae57610100808354040283529160200191610dd9565b820191906000526020600020905b815481529060010190602001808311610dbc57829003601f168201915b50505091835250506040805160e08101918290526020909201919060078481019182845b815481526020019060010190808311610dfd575050509183525050600e91909101546020918201526000888152610149909152604081209192505b85811015610f91576000610e4a612d9d565b90506000610e5782612df4565b90506000610e6483612e1a565b9050600061014981610e76878b615185565b8152602081019190915260400160002080549091508290829060ff19166001836003811115610eb557634e487b7160e01b600052602160045260246000fd5b021790555060328411610ed1578554610100900460ff16610ed7565b86602001515b8154829061ff001916610100836004811115610f0357634e487b7160e01b600052602160045260246000fd5b021790555080548390829062ff0000191662010000836001811115610f3857634e487b7160e01b600052602160045260246000fd5b0217905550600481018d905560058082018d90556040805180820190915281815264109c99595960da1b6020909101908152610f79916006840191906136de565b50505050508080610f89906152c2565b915050610e38565b50426003909101555050600161012255505050505050565b610121546001600160a01b03163314610fd45760405162461bcd60e51b815260040161077c90614f0e565b610fe261014182600461375e565b5050565b336000908152610148602052604090205460ff166110165760405162461bcd60e51b815260040161077c90614f7e565b61101f8161268e565b1561103c5760405162461bcd60e51b815260040161077c90614fde565b60008181526101496020526040812060028101805460ff191660019081179091554290820155905b6007811015610823578154600990610100900460ff16600481111561109957634e487b7160e01b600052602160045260246000fd5b600581106110b757634e487b7160e01b600052603260045260246000fd5b8354603891909102919091019060ff1660038111156110e657634e487b7160e01b600052602160045260246000fd5b6004811061110457634e487b7160e01b600052603260045260246000fd5b600e0201816007811061112757634e487b7160e01b600052603260045260246000fd5b600202016000015482600701826007811061115257634e487b7160e01b600052603260045260246000fd5b01558061115e816152c2565b915050611064565b610823838383612e89565b600061117c83611a9e565b821061119a5760405162461bcd60e51b815260040161077c90614dde565b600080549080805b83811015611243576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160401b031691830191909152156111f457805192505b876001600160a01b0316836001600160a01b031614156112305786841415611222575093506106bb92505050565b8361122c816152c2565b9450505b508061123b816152c2565b9150506111a2565b5060405162461bcd60e51b815260040161077c90614fee565b610121546001600160a01b031633146112875760405162461bcd60e51b815260040161077c90614f0e565b6001600160a01b0381166000908152610147602052604090205460ff166112c05760405162461bcd60e51b815260040161077c9061503e565b6001600160a01b0316600090815261014760205260409020805460ff19169055565b60006112ef836000541190565b61130b5760405162461bcd60e51b815260040161077c90614efe565b60008381526101496020526040808220815161016081019092528054829060ff16600381111561134b57634e487b7160e01b600052602160045260246000fd5b600381111561136a57634e487b7160e01b600052602160045260246000fd5b81528154602090910190610100900460ff16600481111561139b57634e487b7160e01b600052602160045260246000fd5b60048111156113ba57634e487b7160e01b600052602160045260246000fd5b8152815460209091019062010000900460ff1660018111156113ec57634e487b7160e01b600052602160045260246000fd5b600181111561140b57634e487b7160e01b600052602160045260246000fd5b815260018201546020820152600282015460ff16151560408201526003820154606082015260048201546080820152600582015460a082015260068201805460c0909201916114599061526f565b80601f01602080910402602001604051908101604052809291908181526020018280546114859061526f565b80156114d25780601f106114a7576101008083540402835291602001916114d2565b820191906000526020600020905b8154815290600101906020018083116114b557829003601f168201915b50505091835250506040805160e08101918290526020909201919060078481019182845b8154815260200190600101908083116114f65750505050508152602001600e82015481525050905080610120015183600681111561154457634e487b7160e01b600052602160045260246000fd5b6007811061156257634e487b7160e01b600052603260045260246000fd5b6020020151949350505050565b336000908152610148602052604090205460ff1661159f5760405162461bcd60e51b815260040161077c90614f7e565b6115aa816000541190565b6115c65760405162461bcd60e51b815260040161077c90614f6e565b6115cf8161268e565b6115eb5760405162461bcd60e51b815260040161077c90614ebe565b6000818152610149602052604090206002815460ff16600381111561162057634e487b7160e01b600052602160045260246000fd5b148061164f57506003815460ff16600381111561164d57634e487b7160e01b600052602160045260246000fd5b145b61166b5760405162461bcd60e51b815260040161077c90614f5e565b600361167683610828565b600381111561169557634e487b7160e01b600052602160045260246000fd5b14156116b35760405162461bcd60e51b815260040161077c90614eae565b600581600e0154106116d75760405162461bcd60e51b815260040161077c90614dee565b600e810180549060006116e9836152c2565b91905055505050565b60006116ff826000541190565b61171b5760405162461bcd60e51b815260040161077c90614f6e565b60008281526101496020526040808220815161016081019092528054829060ff16600381111561175b57634e487b7160e01b600052602160045260246000fd5b600381111561177a57634e487b7160e01b600052602160045260246000fd5b81528154602090910190610100900460ff1660048111156117ab57634e487b7160e01b600052602160045260246000fd5b60048111156117ca57634e487b7160e01b600052602160045260246000fd5b8152815460209091019062010000900460ff1660018111156117fc57634e487b7160e01b600052602160045260246000fd5b600181111561181b57634e487b7160e01b600052602160045260246000fd5b815260018201546020820152600282015460ff16151560408201526003820154606082015260048201546080820152600582015460a082015260068201805460c0909201916118699061526f565b80601f01602080910402602001604051908101604052809291908181526020018280546118959061526f565b80156118e25780601f106118b7576101008083540402835291602001916118e2565b820191906000526020600020905b8154815290600101906020018083116118c557829003601f168201915b50505091835250506040805160e08101918290526020909201919060078481019182845b815481526020019060010190808311611906575050509183525050600e919091015460209091015261014001516005149392505050565b6108238383836040518060200160405280600081525061225f565b610121546001600160a01b031633146119835760405162461bcd60e51b815260040161077c90614f0e565b6001600160a01b0381166000908152610148602052604090205460ff16156119bd5760405162461bcd60e51b815260040161077c90614e9e565b6001600160a01b0316600090815261014860205260409020805460ff19166001179055565b600080548210611a045760405162461bcd60e51b815260040161077c90614e3e565b5090565b336000908152610148602052604090205460ff16611a385760405162461bcd60e51b815260040161077c90614f7e565b611a43826000541190565b611a5f5760405162461bcd60e51b815260040161077c9061505e565b60008281526101496020908152604090912082519091611a869160068401918501906136de565b50505050565b6000611a9782613147565b5192915050565b60006001600160a01b038216611ac65760405162461bcd60e51b815260040161077c90614ece565b506001600160a01b03166000908152600460205260409020546001600160801b031690565b610121546001600160a01b03163314611b165760405162461bcd60e51b815260040161077c90614f0e565b611b206000613265565b565b610121546001600160a01b03163314611b4d5760405162461bcd60e51b815260040161077c90614f0e565b610fe26101238260056137aa565b60408051808201909152600080825260208201526106bb82613147565b336000908152610148602052604090205460ff16611ba85760405162461bcd60e51b815260040161077c90614f7e565b611bb3836000541190565b611bcf5760405162461bcd60e51b815260040161077c90614efe565b611bd88361268e565b611bf45760405162461bcd60e51b815260040161077c90614ebe565b6000838152610149602052604081209060078201908382866006811115611c2b57634e487b7160e01b600052602160045260246000fd5b60078110611c4957634e487b7160e01b600052603260045260246000fd5b0154611c559190615185565b905060018110801590611cc1575060086000611c7088610828565b6003811115611c8f57634e487b7160e01b600052602160045260246000fd5b6003811115611cae57634e487b7160e01b600052602160045260246000fd5b8152602001908152602001600020548111155b611cdd5760405162461bcd60e51b815260040161077c90614ede565b8082866006811115611cff57634e487b7160e01b600052602160045260246000fd5b60078110611d1d57634e487b7160e01b600052603260045260246000fd5b0155505050505050565b6060600280546106d09061526f565b610121546001600160a01b03163314611d615760405162461bcd60e51b815260040161077c90614f0e565b6001600160a01b0381166000908152610147602052604090205460ff1615611d9b5760405162461bcd60e51b815260040161077c90614e7e565b6001600160a01b0316600090815261014760205260409020805460ff19166001179055565b6001600160a01b038216331415611de95760405162461bcd60e51b815260040161077c90614f3e565b3360008181526006602090815260408083206001600160a01b038716808552925291829020805460ff191685151517905590519091907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611e4c908590614db1565b60405180910390a35050565b610121546001600160a01b03163314611e835760405162461bcd60e51b815260040161077c90614f0e565b6001600160a01b0381166000908152610148602052604090205460ff16611ebc5760405162461bcd60e51b815260040161077c9061503e565b6001600160a01b0316600090815261014860205260409020805460ff19169055565b6002610122541415611f025760405162461bcd60e51b815260040161077c9061500e565b600261012255336000908152610147602052604090205460ff16611f385760405162461bcd60e51b815260040161077c90614f9e565b7f00000000000000000000000000000000000000000000000000000000000000008260ff16611f6660005490565b611f709190615185565b1115611f8e5760405162461bcd60e51b815260040161077c90614dfe565b80518260ff1614611fb15760405162461bcd60e51b815260040161077c9061507e565b600054611fc18460ff8516612dda565b60005b8360ff16811015612116576000611fd9612d9d565b90506000611fe6826132b8565b90506000611ff383612df4565b9050600061200084612e1a565b9050600061014981612012888a615185565b8152602081019190915260400160002080549091508290829060ff1916600183600381111561205157634e487b7160e01b600052602160045260246000fd5b021790555080548490829061ff00191661010083600481111561208457634e487b7160e01b600052602160045260246000fd5b021790555080548390829062ff00001916620100008360018111156120b957634e487b7160e01b600052602160045260246000fd5b02179055508786815181106120de57634e487b7160e01b600052603260045260246000fd5b60200260200101518160060190805190602001906120fd9291906136de565b505050505050808061210e906152c2565b915050611fc4565b5050600161012255505050565b610121546001600160a01b0316331461214e5760405162461bcd60e51b815260040161077c90614f0e565b6020810151600a1080159061216557508051600111155b6121815760405162461bcd60e51b815260040161077c90614f1e565b8060098560048111156121a457634e487b7160e01b600052602160045260246000fd5b600581106121c257634e487b7160e01b600052603260045260246000fd5b603802018460038111156121e657634e487b7160e01b600052602160045260246000fd5b6004811061220457634e487b7160e01b600052603260045260246000fd5b600e020183600681111561222857634e487b7160e01b600052602160045260246000fd5b6007811061224657634e487b7160e01b600052603260045260246000fd5b600202019060026122589291906137f1565b5050505050565b61226a848484612e89565b612276848484846132d8565b611a865760405162461bcd60e51b815260040161077c90614fae565b606061229f826000541190565b6122bb5760405162461bcd60e51b815260040161077c90614f2e565b60008281526101496020526040808220815161016081019092528054829060ff1660038111156122fb57634e487b7160e01b600052602160045260246000fd5b600381111561231a57634e487b7160e01b600052602160045260246000fd5b81528154602090910190610100900460ff16600481111561234b57634e487b7160e01b600052602160045260246000fd5b600481111561236a57634e487b7160e01b600052602160045260246000fd5b8152815460209091019062010000900460ff16600181111561239c57634e487b7160e01b600052602160045260246000fd5b60018111156123bb57634e487b7160e01b600052602160045260246000fd5b815260018201546020820152600282015460ff16151560408201526003820154606082015260048201546080820152600582015460a082015260068201805460c0909201916124099061526f565b80601f01602080910402602001604051908101604052809291908181526020018280546124359061526f565b80156124825780601f1061245757610100808354040283529160200191612482565b820191906000526020600020905b81548152906001019060200180831161246557829003601f168201915b50505091835250506040805160e08101918290526020909201919060078481019182845b8154815260200190600101908083116124a65750505050508152602001600e82015481525050905080608001516125ac5780516101419060038111156124fc57634e487b7160e01b600052602160045260246000fd5b6004811061251a57634e487b7160e01b600052603260045260246000fd5b0180546125269061526f565b80601f01602080910402602001604051908101604052809291908181526020018280546125529061526f565b801561259f5780601f106125745761010080835404028352916020019161259f565b820191906000526020600020905b81548152906001019060200180831161258257829003601f168201915b5050505050915050919050565b610123816020015160048111156125d357634e487b7160e01b600052602160045260246000fd5b600581106125f157634e487b7160e01b600052603260045260246000fd5b600602016125fe84610828565b600381111561261d57634e487b7160e01b600052602160045260246000fd5b6003811061263b57634e487b7160e01b600052603260045260246000fd5b600202018160400151600181111561266357634e487b7160e01b600052602160045260246000fd5b6002811061251a57634e487b7160e01b600052603260045260246000fd5b60006106bb826000541190565b600061269b826000541190565b6126b75760405162461bcd60e51b815260040161077c90614f2e565b60008281526101496020526040808220815161016081019092528054829060ff1660038111156126f757634e487b7160e01b600052602160045260246000fd5b600381111561271657634e487b7160e01b600052602160045260246000fd5b81528154602090910190610100900460ff16600481111561274757634e487b7160e01b600052602160045260246000fd5b600481111561276657634e487b7160e01b600052602160045260246000fd5b8152815460209091019062010000900460ff16600181111561279857634e487b7160e01b600052602160045260246000fd5b60018111156127b757634e487b7160e01b600052602160045260246000fd5b815260018201546020820152600282015460ff16151560408201526003820154606082015260048201546080820152600582015460a082015260068201805460c0909201916128059061526f565b80601f01602080910402602001604051908101604052809291908181526020018280546128319061526f565b801561287e5780601f106128535761010080835404028352916020019161287e565b820191906000526020600020905b81548152906001019060200180831161286157829003601f168201915b50505091835250506040805160e08101918290526020909201919060078481019182845b8154815260200190600101908083116128a2575050509183525050600e9190910154602090910152608001519392505050565b336000908152610148602052604090205460ff166129055760405162461bcd60e51b815260040161077c90614f7e565b612910836000541190565b61292c5760405162461bcd60e51b815260040161077c90614efe565b600061293784610828565b90506001821080159061299b57506008600082600381111561296957634e487b7160e01b600052602160045260246000fd5b600381111561298857634e487b7160e01b600052602160045260246000fd5b8152602001908152602001600020548211155b6129b75760405162461bcd60e51b815260040161077c90614ede565b600084815261014960205260409020600781018381866006811115611cff57634e487b7160e01b600052602160045260246000fd5b60006106bb826133e6565b6129ff61381e565b612a0a826000541190565b612a265760405162461bcd60e51b815260040161077c90614f2e565b6000828152610149602052604090819020815161016081019092528054829060ff166003811115612a6757634e487b7160e01b600052602160045260246000fd5b6003811115612a8657634e487b7160e01b600052602160045260246000fd5b81528154602090910190610100900460ff166004811115612ab757634e487b7160e01b600052602160045260246000fd5b6004811115612ad657634e487b7160e01b600052602160045260246000fd5b8152815460209091019062010000900460ff166001811115612b0857634e487b7160e01b600052602160045260246000fd5b6001811115612b2757634e487b7160e01b600052602160045260246000fd5b815260018201546020820152600282015460ff16151560408201526003820154606082015260048201546080820152600582015460a082015260068201805460c090920191612b759061526f565b80601f0160208091040260200160405190810160405280929190818152602001828054612ba19061526f565b8015612bee5780601f10612bc357610100808354040283529160200191612bee565b820191906000526020600020905b815481529060010190602001808311612bd157829003601f168201915b50505091835250506040805160e08101918290526020909201919060078481019182845b815481526020019060010190808311612c125750505050508152602001600e820154815250509050919050565b610121546001600160a01b03163314612c6a5760405162461bcd60e51b815260040161077c90614f0e565b600a811115612c8b5760405162461bcd60e51b815260040161077c90614f1e565b8060086000846003811115612cb057634e487b7160e01b600052602160045260246000fd5b6003811115612ccf57634e487b7160e01b600052602160045260246000fd5b81526020810191909152604001600020555050565b610121546001600160a01b03163314612d0f5760405162461bcd60e51b815260040161077c90614f0e565b6001600160a01b038116612d355760405162461bcd60e51b815260040161077c90614e1e565b612d3e81613265565b50565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60004442612daa60005490565b604051602001612dbc93929190614d28565b6040516020818303038152906040528051906020012060001c905090565b610fe282826040518060200160405280600081525061343a565b60006103e3612e056103e8846152dd565b1115612e125760016106bb565b600092915050565b600080612e286064846152dd565b90506032811015612e3c5750600092915050565b60328110158015612e4d5750605081105b15612e5b5750600192915050565b60508110158015612e6c5750605f81105b15612e7a5750600292915050565b50600392915050565b50919050565b6000612e9482613147565b80519091506000906001600160a01b0316336001600160a01b03161480612ecb575033612ec084610753565b6001600160a01b0316145b80612edd57508151612edd9033610613565b905080612efc5760405162461bcd60e51b815260040161077c90614f4e565b846001600160a01b031682600001516001600160a01b031614612f315760405162461bcd60e51b815260040161077c90614eee565b6001600160a01b038416612f575760405162461bcd60e51b815260040161077c90614e4e565b612f676000848460000151612d41565b6001600160a01b0385166000908152600460205260408120805460019290612f999084906001600160801b0316615198565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b03861660009081526004602052604081208054600194509092612fe59185911661514d565b82546001600160801b039182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b0380871682526001600160401b03428116602080850191825260008981526003909152948520935184549151909216600160a01b026001600160e01b0319909116919092161717905561306c846001615185565b6000818152600360205260409020549091506001600160a01b03166130fd57613096816000541190565b156130fd5760408051808201825284516001600160a01b0390811682526020808701516001600160401b039081168285019081526000878152600390935294909120925183549451909116600160a01b026001600160e01b03199094169116179190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b6040805180820190915260008082526020820152613166826000541190565b6131825760405162461bcd60e51b815260040161077c90614e2e565b60007f000000000000000000000000000000000000000000000000000000000000000083106131e3576131d57f0000000000000000000000000000000000000000000000000000000000000000846151c8565b6131e0906001615185565b90505b825b81811061324c576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160401b0316918301919091521561323957949350505050565b508061324481615258565b9150506131e5565b5060405162461bcd60e51b815260040161077c9061501e565b61012180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806132c66005846152dd565b90506132d18161366f565b9392505050565b60006001600160a01b0384163b156133da57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061331c903390899088908890600401614d6d565b602060405180830381600087803b15801561333657600080fd5b505af1925050508015613366575060408051601f3d908101601f1916820190925261336391810190614088565b60015b6133c0573d808015613394576040519150601f19603f3d011682016040523d82523d6000602084013e613399565b606091505b5080516133b85760405162461bcd60e51b815260040161077c90614fae565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506133de565b5060015b949350505050565b60006001600160a01b03821661340e5760405162461bcd60e51b815260040161077c90614e5e565b506001600160a01b0316600090815260046020526040902054600160801b90046001600160801b031690565b6000546001600160a01b0384166134635760405162461bcd60e51b815260040161077c90614fce565b61346e816000541190565b1561348b5760405162461bcd60e51b815260040161077c90614fbe565b7f00000000000000000000000000000000000000000000000000000000000000008311156134cb5760405162461bcd60e51b815260040161077c9061506e565b6001600160a01b0384166000908152600460209081526040918290208251808401845290546001600160801b038082168352600160801b909104169181019190915281518083019092528051909190819061352790879061514d565b6001600160801b03168152602001858360200151613545919061514d565b6001600160801b039081169091526001600160a01b0380881660008181526004602090815260408083208751978301518716600160801b029790961696909617909455845180860186529182526001600160401b034281168386019081528883526003909552948120915182549451909516600160a01b026001600160e01b031990941694909216939093179190911790915582905b858110156136645760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a461362860008884886132d8565b6136445760405162461bcd60e51b815260040161077c90614fae565b8161364e816152c2565b925050808061365c906152c2565b9150506135db565b50600081905561313f565b6000600582106136915760405162461bcd60e51b815260040161077c9061502e565b8161369e57506000919050565b81600114156136af57506001919050565b81600214156136c057506002919050565b81600314156136d157506003919050565b506004919050565b919050565b8280546136ea9061526f565b90600052602060002090601f01602090048101928261370c5760008555613752565b82601f1061372557805160ff1916838001178555613752565b82800160010185558215613752579182015b82811115613752578251825591602001919060010190613737565b50611a04929150613881565b826004810192821561379e579160200282015b8281111561379e578251805161378e9184916020909101906136de565b5091602001919060010190613771565b50611a04929150613896565b601e830191839082156137e5579160200282015b828111156137e55782516137d590839060036138b3565b50916020019190600601906137be565b50611a049291506138fa565b82600281019282156137525791602002820182811115613752578251825591602001919060010190613737565b604080516101608101909152806000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081526020016000815260200160608152602001613874613917565b8152602001600081525090565b5b80821115611a045760008155600101613882565b80821115611a045760006138aa8282613935565b50600101613896565b6006830191839082156138ee579160200282015b828111156138ee5782516138de908390600261396f565b50916020019190600201906138c7565b50611a049291506139af565b80821115611a0457600061390e82826139cc565b506006016138fa565b6040518060e001604052806007906020820280368337509192915050565b5080546139419061526f565b6000825580601f10613951575050565b601f016020900490600052602060002090810190612d3e9190613881565b826002810192821561379e579160200282015b8281111561379e578251805161399f9184916020909101906136de565b5091602001919060010190613982565b80821115611a045760006139c382826139f4565b506002016139af565b5060006139d982826139f4565b5060020160006139e982826139f4565b50611b209060020160005b506000613a018282613935565b50611b20906001016000613935565b6000613a23613a1e846150e0565b6150c9565b90508082856020860282011115613a3957600080fd5b60005b85811015613a7e5781356001600160401b03811115613a5a57600080fd5b808601613a678982613ce7565b855250506020928301929190910190600101613a3c565b5050509392505050565b6000613a96613a1e846150e0565b90508082856020860282011115613aac57600080fd5b60005b85811015613a7e5781356001600160401b03811115613acd57600080fd5b808601613ada8982613d05565b855250506020928301929190910190600101613aaf565b6000613aff613a1e846150e0565b90508082856020860282011115613b1557600080fd5b60005b85811015613a7e5781356001600160401b03811115613b3657600080fd5b808601613b438982613da1565b855250506020928301929190910190600101613b18565b6000613b68613a1e846150e0565b90508082856020860282011115613b7e57600080fd5b60005b85811015613a7e5781356001600160401b03811115613b9f57600080fd5b808601613bac8982613da1565b855250506020928301929190910190600101613b81565b6000613bd1613a1e84615100565b90508083825260208201905082856020860282011115613bf057600080fd5b60005b85811015613a7e5781356001600160401b03811115613c1157600080fd5b808601613c1e8982613da1565b855250506020928301929190910190600101613bf3565b6000613c43613a1e846150e0565b90508082856020860282011115613c5957600080fd5b60005b85811015613a7e5781613c6f8882613de3565b8452506020928301929190910190600101613c5c565b6000613c93613a1e84615123565b905082815260208101848484011115613cab57600080fd5b613cb6848285615220565b509392505050565b80356106bb8161538f565b600082601f830112613cda57600080fd5b60056133de848285613a10565b600082601f830112613cf857600080fd5b60036133de848285613a88565b600082601f830112613d1657600080fd5b60026133de848285613af1565b600082601f830112613d3457600080fd5b60046133de848285613b5a565b600082601f830112613d5257600080fd5b81356133de848260208601613bc3565b600082601f830112613d7357600080fd5b60026133de848285613c35565b80356106bb816153a3565b80356106bb816153ab565b80516106bb816153ab565b600082601f830112613db257600080fd5b81356133de848260208601613c85565b80356106bb816153bb565b80356106bb816153c8565b80356106bb816153d5565b80356106bb816153e2565b80356106bb816153e8565b600060208284031215613e0b57600080fd5b60006133de8484613cbe565b60008060408385031215613e2a57600080fd5b6000613e368585613cbe565b9250506020613e4785828601613cbe565b9150509250929050565b600080600060608486031215613e6657600080fd5b6000613e728686613cbe565b9350506020613e8386828701613cbe565b9250506040613e9486828701613de3565b9150509250925092565b60008060008060808587031215613eb457600080fd5b6000613ec08787613cbe565b9450506020613ed187828801613cbe565b9350506040613ee287828801613de3565b92505060608501356001600160401b03811115613efe57600080fd5b613f0a87828801613da1565b91505092959194509250565b60008060408385031215613f2957600080fd5b6000613f358585613cbe565b9250506020613e4785828601613d80565b60008060408385031215613f5957600080fd5b6000613f658585613cbe565b9250506020613e4785828601613de3565b600080600060608486031215613f8b57600080fd5b6000613f978686613cbe565b9350506020613e8386828701613de3565b600080600060608486031215613fbd57600080fd5b6000613fc98686613cbe565b9350506020613fda86828701613dee565b92505060408401356001600160401b03811115613ff657600080fd5b613e9486828701613d41565b60006020828403121561401457600080fd5b81356001600160401b0381111561402a57600080fd5b6133de84828501613cc9565b60006020828403121561404857600080fd5b81356001600160401b0381111561405e57600080fd5b6133de84828501613d23565b60006020828403121561407c57600080fd5b60006133de8484613d8b565b60006020828403121561409a57600080fd5b60006133de8484613d96565b600080604083850312156140b957600080fd5b6000613f658585613dc2565b60008060008060a085870312156140db57600080fd5b60006140e78787613dcd565b94505060206140f887828801613dc2565b935050604061410987828801613dd8565b9250506060613f0a87828801613d62565b60006020828403121561412c57600080fd5b60006133de8484613de3565b6000806040838503121561414b57600080fd5b60006141578585613de3565b9250506020613e4785828601613dd8565b60008060006060848603121561417d57600080fd5b60006141898686613de3565b9350506020613e8386828701613dd8565b600080604083850312156141ad57600080fd5b60006141b98585613de3565b92505060208301356001600160401b038111156141d557600080fd5b613e4785828601613da1565b60006141ed8383614d0a565b505060200190565b6141fe816151d0565b82525050565b6007818060005b8381101561313f57815161421f87826141e1565b96506020830192505060010161420b565b8015156141fe565b6000614242825190565b80845260208401935061425981856020860161522c565b601f01601f19169290920192915050565b6141fe816151ff565b6141fe8161520a565b6141fe81615215565b602281526000602082017f455243373231413a206f776e657220696e646578206f7574206f6620626f756e815261647360f01b602082015291505b5060400190565b601b81526000602082017f596f7520616c7265616479207265616368656420746f206d61782e0000000000815291505b5060200190565b601281526000602082017145786365656473204d617820537570706c7960701b815291506142f7565b60128152600060208201712737ba1032bc34b9ba39903330ba3432b91760711b815291506142f7565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015291506142c0565b602a81526000602082017f455243373231413a206f776e657220717565727920666f72206e6f6e657869738152693a32b73a103a37b5b2b760b11b602082015291506142c0565b602381526000602082017f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f758152626e647360e81b602082015291506142c0565b602581526000602082017f455243373231413a207472616e7366657220746f20746865207a65726f206164815264647265737360d81b602082015291506142c0565b603181526000602082017f455243373231413a206e756d626572206d696e74656420717565727920666f7281527020746865207a65726f206164647265737360781b602082015291506142c0565b60128152600060208201712737ba1032bc34b9ba399036b7ba3432b91760711b815291506142f7565b600f81526000602082016e20b63932b0b23c9036b4b73a32b91760891b815291506142f7565b603981526000602082017f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f81527f776e6572206e6f7220617070726f76656420666f7220616c6c00000000000000602082015291506142c0565b601081526000602082016f20b63932b0b23c903ab83230ba32b91760811b815291506142f7565b602a81526000602082017f43616e6e6f742075706772616465207370656369616c20736b696c6c2061742081526920b23ab63a1030b3b29760b11b602082015291506142c0565b601f81526000602082017f447261676f6e2073686f756c6420626520686174636865642066697273742e00815291506142f7565b602b81526000602082017f455243373231413a2062616c616e636520717565727920666f7220746865207a81526a65726f206164647265737360a81b602082015291506142c0565b600e81526000602082016d24b73b30b634b2103b30b63ab29760911b815291506142f7565b602681526000602082017f455243373231413a207472616e736665722066726f6d20696e636f72726563748152651037bbb732b960d11b602082015291506142c0565b600e81526000602082016d2737ba1032bc34b9ba1027232a1760911b815291506142f7565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260006142f7565b600d81526000602082016c496e76616c69642076616c756560981b815291506142f7565b602f81526000602082017f4552433732314d657461646174613a2055524920717565727920666f72206e6f81526e3732bc34b9ba32b73a103a37b5b2b760891b602082015291506142c0565b601a81526000602082017f455243373231413a20617070726f766520746f2063616c6c6572000000000000815291506142f7565b603281526000602082017f455243373231413a207472616e736665722063616c6c6572206973206e6f74208152711bdddb995c881b9bdc88185c1c1c9bdd995960721b602082015291506142c0565b602f81526000602082017f4f6e6c79205261726520616e64204c6567656e646172792063616e206861766581526e1039b832b1b4b0b61039b5b4b6361760891b602082015291506142c0565b600b81526000602082016a2737ba1032bc34b9ba399760a91b815291506142f7565b601981526000602082017f43616c6c65722073686f756c6420626520757064617465722e00000000000000815291506142f7565b602281526000602082017f455243373231413a20617070726f76616c20746f2063757272656e74206f776e81526132b960f11b602082015291506142c0565b601581526000602082017421b0b63632b91034b9903737ba1036b4b73a32b91760591b815291506142f7565b603381526000602082017f455243373231413a207472616e7366657220746f206e6f6e204552433732315281527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b602082015291506142c0565b601d81526000602082017f455243373231413a20746f6b656e20616c7265616479206d696e746564000000815291506142f7565b602181526000602082017f455243373231413a206d696e7420746f20746865207a65726f206164647265738152607360f81b602082015291506142c0565b600f81526000602082016e105b1c9958591e481a185d18da1959608a1b815291506142f7565b602e81526000602082017f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662081526d0deeedccae440c4f240d2dcc8caf60931b602082015291506142c0565b601381526000602082017222bc31b2b2b2399026b0bc1029bab838363c9760691b815291506142f7565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815291506142f7565b602f81526000602082017f455243373231413a20756e61626c6520746f2064657465726d696e652074686581526e1037bbb732b91037b3103a37b5b2b760891b602082015291506142c0565b601381526000602082017224b73b30b634b2103a3cb8329034b73232bc1760691b815291506142f7565b601081526000602082016f20b63932b0b23c903932b6b7bb32b21760811b815291506142f7565b602d81526000602082017f455243373231413a20617070726f76656420717565727920666f72206e6f6e6581526c3c34b9ba32b73a103a37b5b2b760991b602082015291506142c0565b601081526000602082016f2737ba1032bc34b9ba39903a37b5b2b760811b815291506142f7565b602281526000602082017f455243373231413a207175616e7469747920746f206d696e7420746f6f2068698152610ced60f31b602082015291506142c0565b60158152600060208201742737ba1036b0ba31b41030b93930bc9039b4bd329760591b815291506142f7565b8051600090610220840190614c1b858261426a565b506020830151614c2e6020860182614273565b506040830151614c41604086018261427c565b506060830151614c546060860182614d0a565b506080830151614c676080860182614230565b5060a0830151614c7a60a0860182614d0a565b5060c0830151614c8d60c0860182614d0a565b5060e0830151614ca060e0860182614d0a565b50610100830151848203610100860152614cba8282614238565b915050610120830151614cd1610120860182614204565b50610140830151613cb6610200860182614d0a565b80516040830190614cf784826141f5565b506020820151611a866020850182614d10565b806141fe565b6001600160401b0381166141fe565b60ff81166141fe565b6000614d348286614d0a565b602082019150614d448285614d0a565b602082019150614d548284614d0a565b506020019392505050565b602081016106bb82846141f5565b60808101614d7b82876141f5565b614d8860208301866141f5565b614d956040830185614d0a565b8181036060830152614da78184614238565b9695505050505050565b602081016106bb8284614230565b602081016106bb828461426a565b602080825281016132d18184614238565b602080825281016106bb81614285565b602080825281016106bb816142c7565b602080825281016106bb816142fe565b602080825281016106bb81614327565b602080825281016106bb81614350565b602080825281016106bb81614393565b602080825281016106bb816143da565b602080825281016106bb8161441a565b602080825281016106bb8161445c565b602080825281016106bb816144aa565b602080825281016106bb816144d3565b602080825281016106bb816144f9565b602080825281016106bb81614553565b602080825281016106bb8161457a565b602080825281016106bb816145c1565b602080825281016106bb816145f5565b602080825281016106bb8161463d565b602080825281016106bb81614662565b602080825281016106bb816146a5565b602080825281016106bb816146ca565b602080825281016106bb816146fc565b602080825281016106bb81614720565b602080825281016106bb8161476c565b602080825281016106bb816147a0565b602080825281016106bb816147ef565b602080825281016106bb8161483b565b602080825281016106bb8161485d565b602080825281016106bb81614891565b602080825281016106bb816148d0565b602080825281016106bb816148fc565b602080825281016106bb8161494c565b602080825281016106bb81614980565b602080825281016106bb816149be565b602080825281016106bb816149e4565b602080825281016106bb81614a2f565b602080825281016106bb81614a59565b602080825281016106bb81614a8d565b602080825281016106bb81614ad9565b602080825281016106bb81614b03565b602080825281016106bb81614b2a565b602080825281016106bb81614b74565b602080825281016106bb81614b9b565b602080825281016106bb81614bda565b602080825281016132d18184614c06565b604081016106bb8284614ce6565b602081016106bb8284614d0a565b602081016106bb8284614d1f565b60006150d460405190565b90506136d98282615296565b60006001600160401b038211156150f9576150f9615349565b5060200290565b60006001600160401b0382111561511957615119615349565b5060209081020190565b60006001600160401b0382111561513c5761513c615349565b601f19601f83011660200192915050565b60006001600160801b03821691506001600160801b0383169250826001600160801b0303821115615180576151806152f1565b500190565b60008219821115615180576151806152f1565b60006001600160801b03821691506001600160801b0383165b9250828210156151c3576151c36152f1565b500390565b6000826151b1565b60006001600160a01b0382166106bb565b806136d98161535f565b806136d98161536f565b806136d98161537f565b60006106bb826151e1565b60006106bb826151eb565b60006106bb826151f5565b82818337506000910152565b60005b8381101561524757818101518382015260200161522f565b83811115611a865750506000910152565b600081615267576152676152f1565b506000190190565b60028104600182168061528357607f821691505b60208210811415612e8357612e83615333565b601f19601f83011681018181106001600160401b03821117156152bb576152bb615349565b6040525050565b60006000198214156152d6576152d66152f1565b5060010190565b6000826152ec576152ec615307565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60048110612d3e57612d3e61531d565b60058110612d3e57612d3e61531d565b60028110612d3e57612d3e61531d565b615398816151d0565b8114612d3e57600080fd5b801515615398565b6001600160e01b03198116615398565b60048110612d3e57600080fd5b60058110612d3e57600080fd5b60078110612d3e57600080fd5b80615398565b60ff811661539856fea26469706673582212208daa7a664f83a8053bc50194b71b46e4fe1ebcb2c0bad109278e291c51851c1564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c8063715018a611610167578063b88d4fde116100ce578063da2a0ecc11610087578063da2a0ecc146105ac578063dc33e681146105bf578063e0bb933b146105d2578063e4d3b339146105f2578063e985e9c514610605578063f2fde38b1461064157600080fd5b8063b88d4fde1461054f578063bd60b83f14610562578063c87b56dd1461056a578063ca8f8ff31461057d578063ced3e3f114610590578063d7224ba0146105a357600080fd5b8063983b2d5611610120578063983b2d56146104db578063a22cb465146104ee578063a4356bec14610501578063a49062d414610514578063a5d4414b14610529578063b7892dcb1461053c57600080fd5b8063715018a6146104735780637ec7f1d41461047b5780638da5cb5b1461048e5780639231ab2a146104a05780639585dae1146104c057806395d89b41146104d357600080fd5b80632f745c591161020b57806343d24a5e116101c457806343d24a5e1461040a5780634f6ccce71461041d57806353e76f2c14610430578063628281a6146104435780636352211e1461044d57806370a082311461046057600080fd5b80632f745c59146103985780633092afd5146103ab5780633a04e2f2146103be5780633af36fd7146103d15780633fc535d2146103e457806342842e0e146103f757600080fd5b80630e37008a1161025d5780630e37008a1461032457806314d849b81461034457806318160ddd1461035757806322aa152a1461035f5780632385554c1461037257806323b872dd1461038557600080fd5b806301ffc9a71461029a578063043059ab146102c357806306fdde03146102da578063081812fc146102ef578063095ea7b31461030f575b600080fd5b6102ad6102a836600461406a565b610654565b6040516102ba9190614db1565b60405180910390f35b6102cd6101465481565b6040516102ba91906150ad565b6102e26106c1565b6040516102ba9190614dcd565b6103026102fd36600461411a565b610753565b6040516102ba9190614d5f565b61032261031d366004613f46565b6107a1565b005b61033761033236600461411a565b610828565b6040516102ba9190614dbf565b610322610352366004613f76565b610abc565b6000546102cd565b61032261036d366004614036565b610fa9565b61032261038036600461411a565b610fe6565b610322610393366004613e51565b611166565b6102cd6103a6366004613f46565b611171565b6103226103b9366004613df9565b61125c565b6102cd6103cc366004614138565b6112e2565b6103226103df36600461411a565b61156f565b6102ad6103f236600461411a565b6116f2565b610322610405366004613e51565b61193d565b610322610418366004613df9565b611958565b6102cd61042b36600461411a565b6119e2565b61032261043e36600461419a565b611a08565b6102cd6101455481565b61030261045b36600461411a565b611a8c565b6102cd61046e366004613df9565b611a9e565b610322611aeb565b610322610489366004614002565b611b22565b610121546001600160a01b0316610302565b6104b36104ae36600461411a565b611b5b565b6040516102ba919061509f565b6103226104ce366004614168565b611b78565b6102e2611d27565b6103226104e9366004613df9565b611d36565b6103226104fc366004613f16565b611dc0565b61032261050f366004613df9565b611e58565b61051c600a81565b6040516102ba91906150bb565b610322610537366004613fa8565b611ede565b61032261054a3660046140c5565b612123565b61032261055d366004613e9e565b61225f565b61051c600181565b6102e261057836600461411a565b612292565b6102ad61058b36600461411a565b612681565b6102ad61059e36600461411a565b61268e565b6102cd60075481565b6103226105ba366004614168565b6128d5565b6102cd6105cd366004613df9565b6129ec565b6105e56105e036600461411a565b6129f7565b6040516102ba919061508e565b6103226106003660046140a6565b612c3f565b6102ad610613366004613e17565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b61032261064f366004613df9565b612ce4565b60006001600160e01b031982166380ac58cd60e01b148061068557506001600160e01b03198216635b5e139f60e01b145b806106a057506001600160e01b0319821663780e9d6360e01b145b806106bb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600180546106d09061526f565b80601f01602080910402602001604051908101604052809291908181526020018280546106fc9061526f565b80156107495780601f1061071e57610100808354040283529160200191610749565b820191906000526020600020905b81548152906001019060200180831161072c57829003601f168201915b5050505050905090565b6000610760826000541190565b6107855760405162461bcd60e51b815260040161077c9061504e565b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b60006107ac82611a8c565b9050806001600160a01b0316836001600160a01b031614156107e05760405162461bcd60e51b815260040161077c90614f8e565b336001600160a01b03821614806107fc57506107fc8133610613565b6108185760405162461bcd60e51b815260040161077c90614e8e565b610823838383612d41565b505050565b6000610835826000541190565b6108515760405162461bcd60e51b815260040161077c90614efe565b60008281526101496020526040808220815161016081019092528054829060ff16600381111561089157634e487b7160e01b600052602160045260246000fd5b60038111156108b057634e487b7160e01b600052602160045260246000fd5b81528154602090910190610100900460ff1660048111156108e157634e487b7160e01b600052602160045260246000fd5b600481111561090057634e487b7160e01b600052602160045260246000fd5b8152815460209091019062010000900460ff16600181111561093257634e487b7160e01b600052602160045260246000fd5b600181111561095157634e487b7160e01b600052602160045260246000fd5b815260018201546020820152600282015460ff16151560408201526003820154606082015260048201546080820152600582015460a082015260068201805460c09092019161099f9061526f565b80601f01602080910402602001604051908101604052809291908181526020018280546109cb9061526f565b8015610a185780601f106109ed57610100808354040283529160200191610a18565b820191906000526020600020905b8154815290600101906020018083116109fb57829003601f168201915b50505091835250506040805160e08101918290526020909201919060078481019182845b815481526020019060010190808311610a3c5750505050508152602001600e8201548152505090508060800151610a765750600092915050565b6000816060015142610a8891906151c8565b9050610146548110610a9e575060039392505050565b610145548110610ab2575060029392505050565b5060019392505050565b6002610122541415610ae05760405162461bcd60e51b815260040161077c9061500e565b600261012255336000908152610147602052604090205460ff16610b165760405162461bcd60e51b815260040161077c90614f9e565b610b21826000541190565b610b3d5760405162461bcd60e51b815260040161077c90614e0e565b610b48816000541190565b610b645760405162461bcd60e51b815260040161077c90614e6e565b6000610b6e612d9d565b90506000610b7d6064836152dd565b606314610b8b576001610b8e565b60025b60ff1690506000610b9e60005490565b610bc8907f00000000000000000000000000000000000000000000000000000000000000006151c8565b905060008111610bea5760405162461bcd60e51b815260040161077c90614ffe565b808211610bf75781610bf9565b805b91506000610c0660005490565b9050610c128784612dda565b60008681526101496020526040808220815161016081019092528054829060ff166003811115610c5257634e487b7160e01b600052602160045260246000fd5b6003811115610c7157634e487b7160e01b600052602160045260246000fd5b81528154602090910190610100900460ff166004811115610ca257634e487b7160e01b600052602160045260246000fd5b6004811115610cc157634e487b7160e01b600052602160045260246000fd5b8152815460209091019062010000900460ff166001811115610cf357634e487b7160e01b600052602160045260246000fd5b6001811115610d1257634e487b7160e01b600052602160045260246000fd5b815260018201546020820152600282015460ff16151560408201526003820154606082015260048201546080820152600582015460a082015260068201805460c090920191610d609061526f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8c9061526f565b8015610dd95780601f10610dae57610100808354040283529160200191610dd9565b820191906000526020600020905b815481529060010190602001808311610dbc57829003601f168201915b50505091835250506040805160e08101918290526020909201919060078481019182845b815481526020019060010190808311610dfd575050509183525050600e91909101546020918201526000888152610149909152604081209192505b85811015610f91576000610e4a612d9d565b90506000610e5782612df4565b90506000610e6483612e1a565b9050600061014981610e76878b615185565b8152602081019190915260400160002080549091508290829060ff19166001836003811115610eb557634e487b7160e01b600052602160045260246000fd5b021790555060328411610ed1578554610100900460ff16610ed7565b86602001515b8154829061ff001916610100836004811115610f0357634e487b7160e01b600052602160045260246000fd5b021790555080548390829062ff0000191662010000836001811115610f3857634e487b7160e01b600052602160045260246000fd5b0217905550600481018d905560058082018d90556040805180820190915281815264109c99595960da1b6020909101908152610f79916006840191906136de565b50505050508080610f89906152c2565b915050610e38565b50426003909101555050600161012255505050505050565b610121546001600160a01b03163314610fd45760405162461bcd60e51b815260040161077c90614f0e565b610fe261014182600461375e565b5050565b336000908152610148602052604090205460ff166110165760405162461bcd60e51b815260040161077c90614f7e565b61101f8161268e565b1561103c5760405162461bcd60e51b815260040161077c90614fde565b60008181526101496020526040812060028101805460ff191660019081179091554290820155905b6007811015610823578154600990610100900460ff16600481111561109957634e487b7160e01b600052602160045260246000fd5b600581106110b757634e487b7160e01b600052603260045260246000fd5b8354603891909102919091019060ff1660038111156110e657634e487b7160e01b600052602160045260246000fd5b6004811061110457634e487b7160e01b600052603260045260246000fd5b600e0201816007811061112757634e487b7160e01b600052603260045260246000fd5b600202016000015482600701826007811061115257634e487b7160e01b600052603260045260246000fd5b01558061115e816152c2565b915050611064565b610823838383612e89565b600061117c83611a9e565b821061119a5760405162461bcd60e51b815260040161077c90614dde565b600080549080805b83811015611243576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160401b031691830191909152156111f457805192505b876001600160a01b0316836001600160a01b031614156112305786841415611222575093506106bb92505050565b8361122c816152c2565b9450505b508061123b816152c2565b9150506111a2565b5060405162461bcd60e51b815260040161077c90614fee565b610121546001600160a01b031633146112875760405162461bcd60e51b815260040161077c90614f0e565b6001600160a01b0381166000908152610147602052604090205460ff166112c05760405162461bcd60e51b815260040161077c9061503e565b6001600160a01b0316600090815261014760205260409020805460ff19169055565b60006112ef836000541190565b61130b5760405162461bcd60e51b815260040161077c90614efe565b60008381526101496020526040808220815161016081019092528054829060ff16600381111561134b57634e487b7160e01b600052602160045260246000fd5b600381111561136a57634e487b7160e01b600052602160045260246000fd5b81528154602090910190610100900460ff16600481111561139b57634e487b7160e01b600052602160045260246000fd5b60048111156113ba57634e487b7160e01b600052602160045260246000fd5b8152815460209091019062010000900460ff1660018111156113ec57634e487b7160e01b600052602160045260246000fd5b600181111561140b57634e487b7160e01b600052602160045260246000fd5b815260018201546020820152600282015460ff16151560408201526003820154606082015260048201546080820152600582015460a082015260068201805460c0909201916114599061526f565b80601f01602080910402602001604051908101604052809291908181526020018280546114859061526f565b80156114d25780601f106114a7576101008083540402835291602001916114d2565b820191906000526020600020905b8154815290600101906020018083116114b557829003601f168201915b50505091835250506040805160e08101918290526020909201919060078481019182845b8154815260200190600101908083116114f65750505050508152602001600e82015481525050905080610120015183600681111561154457634e487b7160e01b600052602160045260246000fd5b6007811061156257634e487b7160e01b600052603260045260246000fd5b6020020151949350505050565b336000908152610148602052604090205460ff1661159f5760405162461bcd60e51b815260040161077c90614f7e565b6115aa816000541190565b6115c65760405162461bcd60e51b815260040161077c90614f6e565b6115cf8161268e565b6115eb5760405162461bcd60e51b815260040161077c90614ebe565b6000818152610149602052604090206002815460ff16600381111561162057634e487b7160e01b600052602160045260246000fd5b148061164f57506003815460ff16600381111561164d57634e487b7160e01b600052602160045260246000fd5b145b61166b5760405162461bcd60e51b815260040161077c90614f5e565b600361167683610828565b600381111561169557634e487b7160e01b600052602160045260246000fd5b14156116b35760405162461bcd60e51b815260040161077c90614eae565b600581600e0154106116d75760405162461bcd60e51b815260040161077c90614dee565b600e810180549060006116e9836152c2565b91905055505050565b60006116ff826000541190565b61171b5760405162461bcd60e51b815260040161077c90614f6e565b60008281526101496020526040808220815161016081019092528054829060ff16600381111561175b57634e487b7160e01b600052602160045260246000fd5b600381111561177a57634e487b7160e01b600052602160045260246000fd5b81528154602090910190610100900460ff1660048111156117ab57634e487b7160e01b600052602160045260246000fd5b60048111156117ca57634e487b7160e01b600052602160045260246000fd5b8152815460209091019062010000900460ff1660018111156117fc57634e487b7160e01b600052602160045260246000fd5b600181111561181b57634e487b7160e01b600052602160045260246000fd5b815260018201546020820152600282015460ff16151560408201526003820154606082015260048201546080820152600582015460a082015260068201805460c0909201916118699061526f565b80601f01602080910402602001604051908101604052809291908181526020018280546118959061526f565b80156118e25780601f106118b7576101008083540402835291602001916118e2565b820191906000526020600020905b8154815290600101906020018083116118c557829003601f168201915b50505091835250506040805160e08101918290526020909201919060078481019182845b815481526020019060010190808311611906575050509183525050600e919091015460209091015261014001516005149392505050565b6108238383836040518060200160405280600081525061225f565b610121546001600160a01b031633146119835760405162461bcd60e51b815260040161077c90614f0e565b6001600160a01b0381166000908152610148602052604090205460ff16156119bd5760405162461bcd60e51b815260040161077c90614e9e565b6001600160a01b0316600090815261014860205260409020805460ff19166001179055565b600080548210611a045760405162461bcd60e51b815260040161077c90614e3e565b5090565b336000908152610148602052604090205460ff16611a385760405162461bcd60e51b815260040161077c90614f7e565b611a43826000541190565b611a5f5760405162461bcd60e51b815260040161077c9061505e565b60008281526101496020908152604090912082519091611a869160068401918501906136de565b50505050565b6000611a9782613147565b5192915050565b60006001600160a01b038216611ac65760405162461bcd60e51b815260040161077c90614ece565b506001600160a01b03166000908152600460205260409020546001600160801b031690565b610121546001600160a01b03163314611b165760405162461bcd60e51b815260040161077c90614f0e565b611b206000613265565b565b610121546001600160a01b03163314611b4d5760405162461bcd60e51b815260040161077c90614f0e565b610fe26101238260056137aa565b60408051808201909152600080825260208201526106bb82613147565b336000908152610148602052604090205460ff16611ba85760405162461bcd60e51b815260040161077c90614f7e565b611bb3836000541190565b611bcf5760405162461bcd60e51b815260040161077c90614efe565b611bd88361268e565b611bf45760405162461bcd60e51b815260040161077c90614ebe565b6000838152610149602052604081209060078201908382866006811115611c2b57634e487b7160e01b600052602160045260246000fd5b60078110611c4957634e487b7160e01b600052603260045260246000fd5b0154611c559190615185565b905060018110801590611cc1575060086000611c7088610828565b6003811115611c8f57634e487b7160e01b600052602160045260246000fd5b6003811115611cae57634e487b7160e01b600052602160045260246000fd5b8152602001908152602001600020548111155b611cdd5760405162461bcd60e51b815260040161077c90614ede565b8082866006811115611cff57634e487b7160e01b600052602160045260246000fd5b60078110611d1d57634e487b7160e01b600052603260045260246000fd5b0155505050505050565b6060600280546106d09061526f565b610121546001600160a01b03163314611d615760405162461bcd60e51b815260040161077c90614f0e565b6001600160a01b0381166000908152610147602052604090205460ff1615611d9b5760405162461bcd60e51b815260040161077c90614e7e565b6001600160a01b0316600090815261014760205260409020805460ff19166001179055565b6001600160a01b038216331415611de95760405162461bcd60e51b815260040161077c90614f3e565b3360008181526006602090815260408083206001600160a01b038716808552925291829020805460ff191685151517905590519091907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611e4c908590614db1565b60405180910390a35050565b610121546001600160a01b03163314611e835760405162461bcd60e51b815260040161077c90614f0e565b6001600160a01b0381166000908152610148602052604090205460ff16611ebc5760405162461bcd60e51b815260040161077c9061503e565b6001600160a01b0316600090815261014860205260409020805460ff19169055565b6002610122541415611f025760405162461bcd60e51b815260040161077c9061500e565b600261012255336000908152610147602052604090205460ff16611f385760405162461bcd60e51b815260040161077c90614f9e565b7f00000000000000000000000000000000000000000000000000000000000000008260ff16611f6660005490565b611f709190615185565b1115611f8e5760405162461bcd60e51b815260040161077c90614dfe565b80518260ff1614611fb15760405162461bcd60e51b815260040161077c9061507e565b600054611fc18460ff8516612dda565b60005b8360ff16811015612116576000611fd9612d9d565b90506000611fe6826132b8565b90506000611ff383612df4565b9050600061200084612e1a565b9050600061014981612012888a615185565b8152602081019190915260400160002080549091508290829060ff1916600183600381111561205157634e487b7160e01b600052602160045260246000fd5b021790555080548490829061ff00191661010083600481111561208457634e487b7160e01b600052602160045260246000fd5b021790555080548390829062ff00001916620100008360018111156120b957634e487b7160e01b600052602160045260246000fd5b02179055508786815181106120de57634e487b7160e01b600052603260045260246000fd5b60200260200101518160060190805190602001906120fd9291906136de565b505050505050808061210e906152c2565b915050611fc4565b5050600161012255505050565b610121546001600160a01b0316331461214e5760405162461bcd60e51b815260040161077c90614f0e565b6020810151600a1080159061216557508051600111155b6121815760405162461bcd60e51b815260040161077c90614f1e565b8060098560048111156121a457634e487b7160e01b600052602160045260246000fd5b600581106121c257634e487b7160e01b600052603260045260246000fd5b603802018460038111156121e657634e487b7160e01b600052602160045260246000fd5b6004811061220457634e487b7160e01b600052603260045260246000fd5b600e020183600681111561222857634e487b7160e01b600052602160045260246000fd5b6007811061224657634e487b7160e01b600052603260045260246000fd5b600202019060026122589291906137f1565b5050505050565b61226a848484612e89565b612276848484846132d8565b611a865760405162461bcd60e51b815260040161077c90614fae565b606061229f826000541190565b6122bb5760405162461bcd60e51b815260040161077c90614f2e565b60008281526101496020526040808220815161016081019092528054829060ff1660038111156122fb57634e487b7160e01b600052602160045260246000fd5b600381111561231a57634e487b7160e01b600052602160045260246000fd5b81528154602090910190610100900460ff16600481111561234b57634e487b7160e01b600052602160045260246000fd5b600481111561236a57634e487b7160e01b600052602160045260246000fd5b8152815460209091019062010000900460ff16600181111561239c57634e487b7160e01b600052602160045260246000fd5b60018111156123bb57634e487b7160e01b600052602160045260246000fd5b815260018201546020820152600282015460ff16151560408201526003820154606082015260048201546080820152600582015460a082015260068201805460c0909201916124099061526f565b80601f01602080910402602001604051908101604052809291908181526020018280546124359061526f565b80156124825780601f1061245757610100808354040283529160200191612482565b820191906000526020600020905b81548152906001019060200180831161246557829003601f168201915b50505091835250506040805160e08101918290526020909201919060078481019182845b8154815260200190600101908083116124a65750505050508152602001600e82015481525050905080608001516125ac5780516101419060038111156124fc57634e487b7160e01b600052602160045260246000fd5b6004811061251a57634e487b7160e01b600052603260045260246000fd5b0180546125269061526f565b80601f01602080910402602001604051908101604052809291908181526020018280546125529061526f565b801561259f5780601f106125745761010080835404028352916020019161259f565b820191906000526020600020905b81548152906001019060200180831161258257829003601f168201915b5050505050915050919050565b610123816020015160048111156125d357634e487b7160e01b600052602160045260246000fd5b600581106125f157634e487b7160e01b600052603260045260246000fd5b600602016125fe84610828565b600381111561261d57634e487b7160e01b600052602160045260246000fd5b6003811061263b57634e487b7160e01b600052603260045260246000fd5b600202018160400151600181111561266357634e487b7160e01b600052602160045260246000fd5b6002811061251a57634e487b7160e01b600052603260045260246000fd5b60006106bb826000541190565b600061269b826000541190565b6126b75760405162461bcd60e51b815260040161077c90614f2e565b60008281526101496020526040808220815161016081019092528054829060ff1660038111156126f757634e487b7160e01b600052602160045260246000fd5b600381111561271657634e487b7160e01b600052602160045260246000fd5b81528154602090910190610100900460ff16600481111561274757634e487b7160e01b600052602160045260246000fd5b600481111561276657634e487b7160e01b600052602160045260246000fd5b8152815460209091019062010000900460ff16600181111561279857634e487b7160e01b600052602160045260246000fd5b60018111156127b757634e487b7160e01b600052602160045260246000fd5b815260018201546020820152600282015460ff16151560408201526003820154606082015260048201546080820152600582015460a082015260068201805460c0909201916128059061526f565b80601f01602080910402602001604051908101604052809291908181526020018280546128319061526f565b801561287e5780601f106128535761010080835404028352916020019161287e565b820191906000526020600020905b81548152906001019060200180831161286157829003601f168201915b50505091835250506040805160e08101918290526020909201919060078481019182845b8154815260200190600101908083116128a2575050509183525050600e9190910154602090910152608001519392505050565b336000908152610148602052604090205460ff166129055760405162461bcd60e51b815260040161077c90614f7e565b612910836000541190565b61292c5760405162461bcd60e51b815260040161077c90614efe565b600061293784610828565b90506001821080159061299b57506008600082600381111561296957634e487b7160e01b600052602160045260246000fd5b600381111561298857634e487b7160e01b600052602160045260246000fd5b8152602001908152602001600020548211155b6129b75760405162461bcd60e51b815260040161077c90614ede565b600084815261014960205260409020600781018381866006811115611cff57634e487b7160e01b600052602160045260246000fd5b60006106bb826133e6565b6129ff61381e565b612a0a826000541190565b612a265760405162461bcd60e51b815260040161077c90614f2e565b6000828152610149602052604090819020815161016081019092528054829060ff166003811115612a6757634e487b7160e01b600052602160045260246000fd5b6003811115612a8657634e487b7160e01b600052602160045260246000fd5b81528154602090910190610100900460ff166004811115612ab757634e487b7160e01b600052602160045260246000fd5b6004811115612ad657634e487b7160e01b600052602160045260246000fd5b8152815460209091019062010000900460ff166001811115612b0857634e487b7160e01b600052602160045260246000fd5b6001811115612b2757634e487b7160e01b600052602160045260246000fd5b815260018201546020820152600282015460ff16151560408201526003820154606082015260048201546080820152600582015460a082015260068201805460c090920191612b759061526f565b80601f0160208091040260200160405190810160405280929190818152602001828054612ba19061526f565b8015612bee5780601f10612bc357610100808354040283529160200191612bee565b820191906000526020600020905b815481529060010190602001808311612bd157829003601f168201915b50505091835250506040805160e08101918290526020909201919060078481019182845b815481526020019060010190808311612c125750505050508152602001600e820154815250509050919050565b610121546001600160a01b03163314612c6a5760405162461bcd60e51b815260040161077c90614f0e565b600a811115612c8b5760405162461bcd60e51b815260040161077c90614f1e565b8060086000846003811115612cb057634e487b7160e01b600052602160045260246000fd5b6003811115612ccf57634e487b7160e01b600052602160045260246000fd5b81526020810191909152604001600020555050565b610121546001600160a01b03163314612d0f5760405162461bcd60e51b815260040161077c90614f0e565b6001600160a01b038116612d355760405162461bcd60e51b815260040161077c90614e1e565b612d3e81613265565b50565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60004442612daa60005490565b604051602001612dbc93929190614d28565b6040516020818303038152906040528051906020012060001c905090565b610fe282826040518060200160405280600081525061343a565b60006103e3612e056103e8846152dd565b1115612e125760016106bb565b600092915050565b600080612e286064846152dd565b90506032811015612e3c5750600092915050565b60328110158015612e4d5750605081105b15612e5b5750600192915050565b60508110158015612e6c5750605f81105b15612e7a5750600292915050565b50600392915050565b50919050565b6000612e9482613147565b80519091506000906001600160a01b0316336001600160a01b03161480612ecb575033612ec084610753565b6001600160a01b0316145b80612edd57508151612edd9033610613565b905080612efc5760405162461bcd60e51b815260040161077c90614f4e565b846001600160a01b031682600001516001600160a01b031614612f315760405162461bcd60e51b815260040161077c90614eee565b6001600160a01b038416612f575760405162461bcd60e51b815260040161077c90614e4e565b612f676000848460000151612d41565b6001600160a01b0385166000908152600460205260408120805460019290612f999084906001600160801b0316615198565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b03861660009081526004602052604081208054600194509092612fe59185911661514d565b82546001600160801b039182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b0380871682526001600160401b03428116602080850191825260008981526003909152948520935184549151909216600160a01b026001600160e01b0319909116919092161717905561306c846001615185565b6000818152600360205260409020549091506001600160a01b03166130fd57613096816000541190565b156130fd5760408051808201825284516001600160a01b0390811682526020808701516001600160401b039081168285019081526000878152600390935294909120925183549451909116600160a01b026001600160e01b03199094169116179190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b6040805180820190915260008082526020820152613166826000541190565b6131825760405162461bcd60e51b815260040161077c90614e2e565b60007f000000000000000000000000000000000000000000000000000000000000000083106131e3576131d57f0000000000000000000000000000000000000000000000000000000000000000846151c8565b6131e0906001615185565b90505b825b81811061324c576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b9091046001600160401b0316918301919091521561323957949350505050565b508061324481615258565b9150506131e5565b5060405162461bcd60e51b815260040161077c9061501e565b61012180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806132c66005846152dd565b90506132d18161366f565b9392505050565b60006001600160a01b0384163b156133da57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061331c903390899088908890600401614d6d565b602060405180830381600087803b15801561333657600080fd5b505af1925050508015613366575060408051601f3d908101601f1916820190925261336391810190614088565b60015b6133c0573d808015613394576040519150601f19603f3d011682016040523d82523d6000602084013e613399565b606091505b5080516133b85760405162461bcd60e51b815260040161077c90614fae565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506133de565b5060015b949350505050565b60006001600160a01b03821661340e5760405162461bcd60e51b815260040161077c90614e5e565b506001600160a01b0316600090815260046020526040902054600160801b90046001600160801b031690565b6000546001600160a01b0384166134635760405162461bcd60e51b815260040161077c90614fce565b61346e816000541190565b1561348b5760405162461bcd60e51b815260040161077c90614fbe565b7f00000000000000000000000000000000000000000000000000000000000000008311156134cb5760405162461bcd60e51b815260040161077c9061506e565b6001600160a01b0384166000908152600460209081526040918290208251808401845290546001600160801b038082168352600160801b909104169181019190915281518083019092528051909190819061352790879061514d565b6001600160801b03168152602001858360200151613545919061514d565b6001600160801b039081169091526001600160a01b0380881660008181526004602090815260408083208751978301518716600160801b029790961696909617909455845180860186529182526001600160401b034281168386019081528883526003909552948120915182549451909516600160a01b026001600160e01b031990941694909216939093179190911790915582905b858110156136645760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a461362860008884886132d8565b6136445760405162461bcd60e51b815260040161077c90614fae565b8161364e816152c2565b925050808061365c906152c2565b9150506135db565b50600081905561313f565b6000600582106136915760405162461bcd60e51b815260040161077c9061502e565b8161369e57506000919050565b81600114156136af57506001919050565b81600214156136c057506002919050565b81600314156136d157506003919050565b506004919050565b919050565b8280546136ea9061526f565b90600052602060002090601f01602090048101928261370c5760008555613752565b82601f1061372557805160ff1916838001178555613752565b82800160010185558215613752579182015b82811115613752578251825591602001919060010190613737565b50611a04929150613881565b826004810192821561379e579160200282015b8281111561379e578251805161378e9184916020909101906136de565b5091602001919060010190613771565b50611a04929150613896565b601e830191839082156137e5579160200282015b828111156137e55782516137d590839060036138b3565b50916020019190600601906137be565b50611a049291506138fa565b82600281019282156137525791602002820182811115613752578251825591602001919060010190613737565b604080516101608101909152806000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081526020016000815260200160608152602001613874613917565b8152602001600081525090565b5b80821115611a045760008155600101613882565b80821115611a045760006138aa8282613935565b50600101613896565b6006830191839082156138ee579160200282015b828111156138ee5782516138de908390600261396f565b50916020019190600201906138c7565b50611a049291506139af565b80821115611a0457600061390e82826139cc565b506006016138fa565b6040518060e001604052806007906020820280368337509192915050565b5080546139419061526f565b6000825580601f10613951575050565b601f016020900490600052602060002090810190612d3e9190613881565b826002810192821561379e579160200282015b8281111561379e578251805161399f9184916020909101906136de565b5091602001919060010190613982565b80821115611a045760006139c382826139f4565b506002016139af565b5060006139d982826139f4565b5060020160006139e982826139f4565b50611b209060020160005b506000613a018282613935565b50611b20906001016000613935565b6000613a23613a1e846150e0565b6150c9565b90508082856020860282011115613a3957600080fd5b60005b85811015613a7e5781356001600160401b03811115613a5a57600080fd5b808601613a678982613ce7565b855250506020928301929190910190600101613a3c565b5050509392505050565b6000613a96613a1e846150e0565b90508082856020860282011115613aac57600080fd5b60005b85811015613a7e5781356001600160401b03811115613acd57600080fd5b808601613ada8982613d05565b855250506020928301929190910190600101613aaf565b6000613aff613a1e846150e0565b90508082856020860282011115613b1557600080fd5b60005b85811015613a7e5781356001600160401b03811115613b3657600080fd5b808601613b438982613da1565b855250506020928301929190910190600101613b18565b6000613b68613a1e846150e0565b90508082856020860282011115613b7e57600080fd5b60005b85811015613a7e5781356001600160401b03811115613b9f57600080fd5b808601613bac8982613da1565b855250506020928301929190910190600101613b81565b6000613bd1613a1e84615100565b90508083825260208201905082856020860282011115613bf057600080fd5b60005b85811015613a7e5781356001600160401b03811115613c1157600080fd5b808601613c1e8982613da1565b855250506020928301929190910190600101613bf3565b6000613c43613a1e846150e0565b90508082856020860282011115613c5957600080fd5b60005b85811015613a7e5781613c6f8882613de3565b8452506020928301929190910190600101613c5c565b6000613c93613a1e84615123565b905082815260208101848484011115613cab57600080fd5b613cb6848285615220565b509392505050565b80356106bb8161538f565b600082601f830112613cda57600080fd5b60056133de848285613a10565b600082601f830112613cf857600080fd5b60036133de848285613a88565b600082601f830112613d1657600080fd5b60026133de848285613af1565b600082601f830112613d3457600080fd5b60046133de848285613b5a565b600082601f830112613d5257600080fd5b81356133de848260208601613bc3565b600082601f830112613d7357600080fd5b60026133de848285613c35565b80356106bb816153a3565b80356106bb816153ab565b80516106bb816153ab565b600082601f830112613db257600080fd5b81356133de848260208601613c85565b80356106bb816153bb565b80356106bb816153c8565b80356106bb816153d5565b80356106bb816153e2565b80356106bb816153e8565b600060208284031215613e0b57600080fd5b60006133de8484613cbe565b60008060408385031215613e2a57600080fd5b6000613e368585613cbe565b9250506020613e4785828601613cbe565b9150509250929050565b600080600060608486031215613e6657600080fd5b6000613e728686613cbe565b9350506020613e8386828701613cbe565b9250506040613e9486828701613de3565b9150509250925092565b60008060008060808587031215613eb457600080fd5b6000613ec08787613cbe565b9450506020613ed187828801613cbe565b9350506040613ee287828801613de3565b92505060608501356001600160401b03811115613efe57600080fd5b613f0a87828801613da1565b91505092959194509250565b60008060408385031215613f2957600080fd5b6000613f358585613cbe565b9250506020613e4785828601613d80565b60008060408385031215613f5957600080fd5b6000613f658585613cbe565b9250506020613e4785828601613de3565b600080600060608486031215613f8b57600080fd5b6000613f978686613cbe565b9350506020613e8386828701613de3565b600080600060608486031215613fbd57600080fd5b6000613fc98686613cbe565b9350506020613fda86828701613dee565b92505060408401356001600160401b03811115613ff657600080fd5b613e9486828701613d41565b60006020828403121561401457600080fd5b81356001600160401b0381111561402a57600080fd5b6133de84828501613cc9565b60006020828403121561404857600080fd5b81356001600160401b0381111561405e57600080fd5b6133de84828501613d23565b60006020828403121561407c57600080fd5b60006133de8484613d8b565b60006020828403121561409a57600080fd5b60006133de8484613d96565b600080604083850312156140b957600080fd5b6000613f658585613dc2565b60008060008060a085870312156140db57600080fd5b60006140e78787613dcd565b94505060206140f887828801613dc2565b935050604061410987828801613dd8565b9250506060613f0a87828801613d62565b60006020828403121561412c57600080fd5b60006133de8484613de3565b6000806040838503121561414b57600080fd5b60006141578585613de3565b9250506020613e4785828601613dd8565b60008060006060848603121561417d57600080fd5b60006141898686613de3565b9350506020613e8386828701613dd8565b600080604083850312156141ad57600080fd5b60006141b98585613de3565b92505060208301356001600160401b038111156141d557600080fd5b613e4785828601613da1565b60006141ed8383614d0a565b505060200190565b6141fe816151d0565b82525050565b6007818060005b8381101561313f57815161421f87826141e1565b96506020830192505060010161420b565b8015156141fe565b6000614242825190565b80845260208401935061425981856020860161522c565b601f01601f19169290920192915050565b6141fe816151ff565b6141fe8161520a565b6141fe81615215565b602281526000602082017f455243373231413a206f776e657220696e646578206f7574206f6620626f756e815261647360f01b602082015291505b5060400190565b601b81526000602082017f596f7520616c7265616479207265616368656420746f206d61782e0000000000815291505b5060200190565b601281526000602082017145786365656473204d617820537570706c7960701b815291506142f7565b60128152600060208201712737ba1032bc34b9ba39903330ba3432b91760711b815291506142f7565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015291506142c0565b602a81526000602082017f455243373231413a206f776e657220717565727920666f72206e6f6e657869738152693a32b73a103a37b5b2b760b11b602082015291506142c0565b602381526000602082017f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f758152626e647360e81b602082015291506142c0565b602581526000602082017f455243373231413a207472616e7366657220746f20746865207a65726f206164815264647265737360d81b602082015291506142c0565b603181526000602082017f455243373231413a206e756d626572206d696e74656420717565727920666f7281527020746865207a65726f206164647265737360781b602082015291506142c0565b60128152600060208201712737ba1032bc34b9ba399036b7ba3432b91760711b815291506142f7565b600f81526000602082016e20b63932b0b23c9036b4b73a32b91760891b815291506142f7565b603981526000602082017f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f81527f776e6572206e6f7220617070726f76656420666f7220616c6c00000000000000602082015291506142c0565b601081526000602082016f20b63932b0b23c903ab83230ba32b91760811b815291506142f7565b602a81526000602082017f43616e6e6f742075706772616465207370656369616c20736b696c6c2061742081526920b23ab63a1030b3b29760b11b602082015291506142c0565b601f81526000602082017f447261676f6e2073686f756c6420626520686174636865642066697273742e00815291506142f7565b602b81526000602082017f455243373231413a2062616c616e636520717565727920666f7220746865207a81526a65726f206164647265737360a81b602082015291506142c0565b600e81526000602082016d24b73b30b634b2103b30b63ab29760911b815291506142f7565b602681526000602082017f455243373231413a207472616e736665722066726f6d20696e636f72726563748152651037bbb732b960d11b602082015291506142c0565b600e81526000602082016d2737ba1032bc34b9ba1027232a1760911b815291506142f7565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260006142f7565b600d81526000602082016c496e76616c69642076616c756560981b815291506142f7565b602f81526000602082017f4552433732314d657461646174613a2055524920717565727920666f72206e6f81526e3732bc34b9ba32b73a103a37b5b2b760891b602082015291506142c0565b601a81526000602082017f455243373231413a20617070726f766520746f2063616c6c6572000000000000815291506142f7565b603281526000602082017f455243373231413a207472616e736665722063616c6c6572206973206e6f74208152711bdddb995c881b9bdc88185c1c1c9bdd995960721b602082015291506142c0565b602f81526000602082017f4f6e6c79205261726520616e64204c6567656e646172792063616e206861766581526e1039b832b1b4b0b61039b5b4b6361760891b602082015291506142c0565b600b81526000602082016a2737ba1032bc34b9ba399760a91b815291506142f7565b601981526000602082017f43616c6c65722073686f756c6420626520757064617465722e00000000000000815291506142f7565b602281526000602082017f455243373231413a20617070726f76616c20746f2063757272656e74206f776e81526132b960f11b602082015291506142c0565b601581526000602082017421b0b63632b91034b9903737ba1036b4b73a32b91760591b815291506142f7565b603381526000602082017f455243373231413a207472616e7366657220746f206e6f6e204552433732315281527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b602082015291506142c0565b601d81526000602082017f455243373231413a20746f6b656e20616c7265616479206d696e746564000000815291506142f7565b602181526000602082017f455243373231413a206d696e7420746f20746865207a65726f206164647265738152607360f81b602082015291506142c0565b600f81526000602082016e105b1c9958591e481a185d18da1959608a1b815291506142f7565b602e81526000602082017f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662081526d0deeedccae440c4f240d2dcc8caf60931b602082015291506142c0565b601381526000602082017222bc31b2b2b2399026b0bc1029bab838363c9760691b815291506142f7565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815291506142f7565b602f81526000602082017f455243373231413a20756e61626c6520746f2064657465726d696e652074686581526e1037bbb732b91037b3103a37b5b2b760891b602082015291506142c0565b601381526000602082017224b73b30b634b2103a3cb8329034b73232bc1760691b815291506142f7565b601081526000602082016f20b63932b0b23c903932b6b7bb32b21760811b815291506142f7565b602d81526000602082017f455243373231413a20617070726f76656420717565727920666f72206e6f6e6581526c3c34b9ba32b73a103a37b5b2b760991b602082015291506142c0565b601081526000602082016f2737ba1032bc34b9ba39903a37b5b2b760811b815291506142f7565b602281526000602082017f455243373231413a207175616e7469747920746f206d696e7420746f6f2068698152610ced60f31b602082015291506142c0565b60158152600060208201742737ba1036b0ba31b41030b93930bc9039b4bd329760591b815291506142f7565b8051600090610220840190614c1b858261426a565b506020830151614c2e6020860182614273565b506040830151614c41604086018261427c565b506060830151614c546060860182614d0a565b506080830151614c676080860182614230565b5060a0830151614c7a60a0860182614d0a565b5060c0830151614c8d60c0860182614d0a565b5060e0830151614ca060e0860182614d0a565b50610100830151848203610100860152614cba8282614238565b915050610120830151614cd1610120860182614204565b50610140830151613cb6610200860182614d0a565b80516040830190614cf784826141f5565b506020820151611a866020850182614d10565b806141fe565b6001600160401b0381166141fe565b60ff81166141fe565b6000614d348286614d0a565b602082019150614d448285614d0a565b602082019150614d548284614d0a565b506020019392505050565b602081016106bb82846141f5565b60808101614d7b82876141f5565b614d8860208301866141f5565b614d956040830185614d0a565b8181036060830152614da78184614238565b9695505050505050565b602081016106bb8284614230565b602081016106bb828461426a565b602080825281016132d18184614238565b602080825281016106bb81614285565b602080825281016106bb816142c7565b602080825281016106bb816142fe565b602080825281016106bb81614327565b602080825281016106bb81614350565b602080825281016106bb81614393565b602080825281016106bb816143da565b602080825281016106bb8161441a565b602080825281016106bb8161445c565b602080825281016106bb816144aa565b602080825281016106bb816144d3565b602080825281016106bb816144f9565b602080825281016106bb81614553565b602080825281016106bb8161457a565b602080825281016106bb816145c1565b602080825281016106bb816145f5565b602080825281016106bb8161463d565b602080825281016106bb81614662565b602080825281016106bb816146a5565b602080825281016106bb816146ca565b602080825281016106bb816146fc565b602080825281016106bb81614720565b602080825281016106bb8161476c565b602080825281016106bb816147a0565b602080825281016106bb816147ef565b602080825281016106bb8161483b565b602080825281016106bb8161485d565b602080825281016106bb81614891565b602080825281016106bb816148d0565b602080825281016106bb816148fc565b602080825281016106bb8161494c565b602080825281016106bb81614980565b602080825281016106bb816149be565b602080825281016106bb816149e4565b602080825281016106bb81614a2f565b602080825281016106bb81614a59565b602080825281016106bb81614a8d565b602080825281016106bb81614ad9565b602080825281016106bb81614b03565b602080825281016106bb81614b2a565b602080825281016106bb81614b74565b602080825281016106bb81614b9b565b602080825281016106bb81614bda565b602080825281016132d18184614c06565b604081016106bb8284614ce6565b602081016106bb8284614d0a565b602081016106bb8284614d1f565b60006150d460405190565b90506136d98282615296565b60006001600160401b038211156150f9576150f9615349565b5060200290565b60006001600160401b0382111561511957615119615349565b5060209081020190565b60006001600160401b0382111561513c5761513c615349565b601f19601f83011660200192915050565b60006001600160801b03821691506001600160801b0383169250826001600160801b0303821115615180576151806152f1565b500190565b60008219821115615180576151806152f1565b60006001600160801b03821691506001600160801b0383165b9250828210156151c3576151c36152f1565b500390565b6000826151b1565b60006001600160a01b0382166106bb565b806136d98161535f565b806136d98161536f565b806136d98161537f565b60006106bb826151e1565b60006106bb826151eb565b60006106bb826151f5565b82818337506000910152565b60005b8381101561524757818101518382015260200161522f565b83811115611a865750506000910152565b600081615267576152676152f1565b506000190190565b60028104600182168061528357607f821691505b60208210811415612e8357612e83615333565b601f19601f83011681018181106001600160401b03821117156152bb576152bb615349565b6040525050565b60006000198214156152d6576152d66152f1565b5060010190565b6000826152ec576152ec615307565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60048110612d3e57612d3e61531d565b60058110612d3e57612d3e61531d565b60028110612d3e57612d3e61531d565b615398816151d0565b8114612d3e57600080fd5b801515615398565b6001600160e01b03198116615398565b60048110612d3e57600080fd5b60058110612d3e57600080fd5b60078110612d3e57600080fd5b80615398565b60ff811661539856fea26469706673582212208daa7a664f83a8053bc50194b71b46e4fe1ebcb2c0bad109278e291c51851c1564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "params": {
          "_eggUris": "egg metadata uris",
          "_tokenUris": "Dragon metadata uris",
          "collectionSize_": "NFT collection size",
          "maxBatchSize_": "Max size for ERC721A batch mint."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8703,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8709,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 8711,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 8716,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "_ownerships",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)8695_storage)"
      },
      {
        "astId": 8721,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "_addressData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(AddressData)8700_storage)"
      },
      {
        "astId": 8725,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 8731,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 9674,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "nextOwnerToExplicitlySet",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 8500,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "ageLimitInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_enum(Age)8448,t_uint256)"
      },
      {
        "astId": 8510,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "stateRanges",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_array(t_array(t_array(t_uint256)2_storage)7_storage)4_storage)5_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "_owner",
        "offset": 0,
        "slot": "289",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "_status",
        "offset": 0,
        "slot": "290",
        "type": "t_uint256"
      },
      {
        "astId": 3907,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "tokenUris",
        "offset": 0,
        "slot": "291",
        "type": "t_array(t_array(t_array(t_string_storage)2_storage)3_storage)5_storage"
      },
      {
        "astId": 3911,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "eggUris",
        "offset": 0,
        "slot": "321",
        "type": "t_array(t_string_storage)4_storage"
      },
      {
        "astId": 3920,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "AdolescentAge",
        "offset": 0,
        "slot": "325",
        "type": "t_uint256"
      },
      {
        "astId": 3923,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "AdultAge",
        "offset": 0,
        "slot": "326",
        "type": "t_uint256"
      },
      {
        "astId": 3927,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "minters",
        "offset": 0,
        "slot": "327",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3931,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "updaters",
        "offset": 0,
        "slot": "328",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3936,
        "contract": "contracts/Dragon.sol:Dragon",
        "label": "dragonInfo",
        "offset": 0,
        "slot": "329",
        "type": "t_mapping(t_uint256,t_struct(DragonData)8495_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_array(t_array(t_uint256)2_storage)7_storage)4_storage)5_storage": {
        "base": "t_array(t_array(t_array(t_uint256)2_storage)7_storage)4_storage",
        "encoding": "inplace",
        "label": "uint256[2][7][4][5]",
        "numberOfBytes": "8960"
      },
      "t_array(t_array(t_array(t_string_storage)2_storage)3_storage)5_storage": {
        "base": "t_array(t_array(t_string_storage)2_storage)3_storage",
        "encoding": "inplace",
        "label": "string[2][3][5]",
        "numberOfBytes": "960"
      },
      "t_array(t_array(t_array(t_uint256)2_storage)7_storage)4_storage": {
        "base": "t_array(t_array(t_uint256)2_storage)7_storage",
        "encoding": "inplace",
        "label": "uint256[2][7][4]",
        "numberOfBytes": "1792"
      },
      "t_array(t_array(t_string_storage)2_storage)3_storage": {
        "base": "t_array(t_string_storage)2_storage",
        "encoding": "inplace",
        "label": "string[2][3]",
        "numberOfBytes": "192"
      },
      "t_array(t_array(t_uint256)2_storage)7_storage": {
        "base": "t_array(t_uint256)2_storage",
        "encoding": "inplace",
        "label": "uint256[2][7]",
        "numberOfBytes": "448"
      },
      "t_array(t_string_storage)2_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_string_storage)4_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)7_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[7]",
        "numberOfBytes": "224"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Age)8448": {
        "encoding": "inplace",
        "label": "enum DragonBasic.Age",
        "numberOfBytes": "1"
      },
      "t_enum(DragonType)8440": {
        "encoding": "inplace",
        "label": "enum DragonBasic.DragonType",
        "numberOfBytes": "1"
      },
      "t_enum(Gender)8443": {
        "encoding": "inplace",
        "label": "enum DragonBasic.Gender",
        "numberOfBytes": "1"
      },
      "t_enum(RarityType)8434": {
        "encoding": "inplace",
        "label": "enum DragonBasic.RarityType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)8700_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)8700_storage"
      },
      "t_mapping(t_enum(Age)8448,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Age)8448",
        "label": "mapping(enum DragonBasic.Age => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(DragonData)8495_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DragonBasic.DragonData)",
        "numberOfBytes": "32",
        "value": "t_struct(DragonData)8495_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)8695_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)8695_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)8700_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 8697,
            "contract": "contracts/Dragon.sol:Dragon",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 8699,
            "contract": "contracts/Dragon.sol:Dragon",
            "label": "numberMinted",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DragonData)8495_storage": {
        "encoding": "inplace",
        "label": "struct DragonBasic.DragonData",
        "members": [
          {
            "astId": 8470,
            "contract": "contracts/Dragon.sol:Dragon",
            "label": "rarity",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(RarityType)8434"
          },
          {
            "astId": 8473,
            "contract": "contracts/Dragon.sol:Dragon",
            "label": "species",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(DragonType)8440"
          },
          {
            "astId": 8476,
            "contract": "contracts/Dragon.sol:Dragon",
            "label": "gender",
            "offset": 2,
            "slot": "0",
            "type": "t_enum(Gender)8443"
          },
          {
            "astId": 8478,
            "contract": "contracts/Dragon.sol:Dragon",
            "label": "birthday",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8480,
            "contract": "contracts/Dragon.sol:Dragon",
            "label": "isDragon",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 8482,
            "contract": "contracts/Dragon.sol:Dragon",
            "label": "lastBreed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8484,
            "contract": "contracts/Dragon.sol:Dragon",
            "label": "father",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8486,
            "contract": "contracts/Dragon.sol:Dragon",
            "label": "mother",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8488,
            "contract": "contracts/Dragon.sol:Dragon",
            "label": "name",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 8492,
            "contract": "contracts/Dragon.sol:Dragon",
            "label": "ability",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)7_storage"
          },
          {
            "astId": 8494,
            "contract": "contracts/Dragon.sol:Dragon",
            "label": "specialPoint",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(TokenOwnership)8695_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 8692,
            "contract": "contracts/Dragon.sol:Dragon",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8694,
            "contract": "contracts/Dragon.sol:Dragon",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}