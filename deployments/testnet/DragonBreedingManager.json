{
  "address": "0x02cD60AD9Db832B2FE64fEDf273Db0aD3DbCB9ea",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dragonNFTAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "landId",
          "type": "uint256"
        }
      ],
      "name": "borrowDragon",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "breedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "breedId",
          "type": "uint256"
        }
      ],
      "name": "breeding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "breedId",
          "type": "uint256"
        }
      ],
      "name": "cancelBreeding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rentId",
          "type": "uint256"
        }
      ],
      "name": "cancelRentOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "createNewBreedLandWithSingleDragon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "createRentOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dragonNFTAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getBreedLands",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "father",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mother",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "fatherOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "motherOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "startAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "pending",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRent",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "rentOrder",
              "type": "uint256"
            }
          ],
          "internalType": "struct DragonBreedingManager.BreedLand[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRentOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "enable",
              "type": "bool"
            }
          ],
          "internalType": "struct DragonBreedingManager.RentOrder[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rentId",
          "type": "uint256"
        }
      ],
      "name": "isRentOrderAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isRentable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rentCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fatherTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "motherTokenId",
          "type": "uint256"
        }
      ],
      "name": "requestBreeding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1db88f2b31f357885359fd1f8ebee4fb31ad4e3c722d54294d661d08d58daeda",
  "receipt": {
    "to": null,
    "from": "0xc09eAC15f9Ba6462e8E4612af7C431E1cfe08b87",
    "contractAddress": "0x02cD60AD9Db832B2FE64fEDf273Db0aD3DbCB9ea",
    "transactionIndex": 3,
    "gasUsed": "3081532",
    "logsBloom": "0x00000000000000000000000000000000000000000000100000800000000000000000000000000000000000000000000000008000002000000000000000000000000000000000000000000000000000800001000000001000040100000000000100000000020000000000000000000800000000000000000080000000000000400000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000040000000804000000000000000000001000000000000000000000000000000100000000020000000000000000000000000000000000000000024000000000000000000100000",
    "blockHash": "0x32915304e06d3daf85f66b56eb46b85b07eccfca9c2f5bf7a5421f1b172ac532",
    "transactionHash": "0x1db88f2b31f357885359fd1f8ebee4fb31ad4e3c722d54294d661d08d58daeda",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 26893165,
        "transactionHash": "0x1db88f2b31f357885359fd1f8ebee4fb31ad4e3c722d54294d661d08d58daeda",
        "address": "0x02cD60AD9Db832B2FE64fEDf273Db0aD3DbCB9ea",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c09eac15f9ba6462e8e4612af7c431e1cfe08b87"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x32915304e06d3daf85f66b56eb46b85b07eccfca9c2f5bf7a5421f1b172ac532"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 26893165,
        "transactionHash": "0x1db88f2b31f357885359fd1f8ebee4fb31ad4e3c722d54294d661d08d58daeda",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c09eac15f9ba6462e8e4612af7c431e1cfe08b87",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000022363da0b71e2f000000000000000000000000000000000000000000000000015dc3f41196e9c05000000000000000000000000000000000000000000000517251e632c8d0020f300000000000000000000000000000000000000000000000013b8db670dfcb9150000000000000000000000000000000000000000000005172741c706987203e3",
        "logIndex": 11,
        "blockHash": "0x32915304e06d3daf85f66b56eb46b85b07eccfca9c2f5bf7a5421f1b172ac532"
      }
    ],
    "blockNumber": 26893165,
    "cumulativeGasUsed": "3388951",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1BcefaDf8213Fb9Fc6418edF99E106bd61272744"
  ],
  "numDeployments": 1,
  "solcInputHash": "b474e0d835221309c977257c7f754341",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dragonNFTAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"landId\",\"type\":\"uint256\"}],\"name\":\"borrowDragon\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"breedId\",\"type\":\"uint256\"}],\"name\":\"breeding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"breedId\",\"type\":\"uint256\"}],\"name\":\"cancelBreeding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rentId\",\"type\":\"uint256\"}],\"name\":\"cancelRentOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"createNewBreedLandWithSingleDragon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"createRentOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dragonNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getBreedLands\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"father\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mother\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fatherOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"motherOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rentOrder\",\"type\":\"uint256\"}],\"internalType\":\"struct DragonBreedingManager.BreedLand[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRentOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"internalType\":\"struct DragonBreedingManager.RentOrder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rentId\",\"type\":\"uint256\"}],\"name\":\"isRentOrderAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isRentable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fatherTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"motherTokenId\",\"type\":\"uint256\"}],\"name\":\"requestBreeding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DragonBreedingManager.sol\":\"DragonBreedingManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Dragon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./interface/ERC721A.sol\\\";\\r\\nimport \\\"./interface/DragonBasic.sol\\\";\\r\\n/**************************************************\\r\\n * Dragon NFT\\r\\n *\\r\\n * Created for Pyre by: Patrick Kishi\\r\\n * Audited by: Jill\\r\\n * Special thanks goes to: Jill\\r\\n ***************************************************\\r\\n */\\r\\n\\r\\ncontract Dragon is ERC721A, DragonBasic, Ownable, ReentrancyGuard {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Token URI. Token uri is different based on DragonType, Age and Gender\\r\\n    string[2][3][5] private tokenUris;\\r\\n    string[4] private eggUris;\\r\\n\\r\\n    // Min & Max level\\r\\n    uint8 public constant MIN_LEVEL = 1;\\r\\n    uint8 public constant MAX_LEVEL = 10;\\r\\n\\r\\n    // \\r\\n    uint public AdolescentAge = 2 days;\\r\\n    uint public AdultAge = 5 days;\\r\\n\\r\\n    // minters & updaters\\r\\n    mapping(address => bool) private minters;\\r\\n    mapping(address => bool) private updaters;\\r\\n\\r\\n    // DragonData token ID => data\\r\\n    mapping(uint => DragonData) private dragonInfo;\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(minters[msg.sender], \\\"Caller is not minter.\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyUpdater() {\\r\\n        require(updaters[msg.sender], \\\"Caller should be updater.\\\");\\r\\n        _;\\r\\n    }\\r\\n   \\r\\n    /**\\r\\n        @param maxBatchSize_ Max size for ERC721A batch mint.\\r\\n        @param collectionSize_ NFT collection size\\r\\n        @param _tokenUris Dragon metadata uris\\r\\n        @param _eggUris egg metadata uris\\r\\n    */\\r\\n    constructor(\\r\\n        uint16 maxBatchSize_,\\r\\n        uint16 collectionSize_,\\r\\n        string[2][3][5] memory _tokenUris,\\r\\n        string[4] memory _eggUris,\\r\\n        uint[2][7][4][5] memory _stateRanges\\r\\n    ) ERC721A(\\\"Pyre-Dragon\\\", \\\"Dragon\\\", maxBatchSize_, collectionSize_) DragonBasic(){\\r\\n        tokenUris = _tokenUris;\\r\\n        eggUris = _eggUris;\\r\\n        stateRanges = _stateRanges;\\r\\n    }\\r\\n\\r\\n    function getSum(uint _tokenId) internal view returns(uint sum) {\\r\\n        require(_exists(_tokenId), \\\"Not exists token.\\\");\\r\\n\\r\\n        DragonData memory dragon = dragonInfo[_tokenId];\\r\\n        sum = 0;\\r\\n        for (uint i = 0 ; i < dragon.ability.length ; i ++) {\\r\\n            sum += dragon.ability[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAge(uint _tokenId) public view returns(Age) {\\r\\n        require(_exists(_tokenId), \\\"Not exist NFT.\\\");\\r\\n        DragonData memory dragon = dragonInfo[_tokenId];\\r\\n        if (!dragon.isDragon) return Age.Egg;\\r\\n\\r\\n        uint age = block.timestamp - dragon.birthday;\\r\\n        if (age >= AdultAge) return Age.Adult;\\r\\n        if (age >= AdolescentAge) return Age.Adolescent;\\r\\n        return Age.Hatchling;\\r\\n    }\\r\\n\\r\\n    function random() private view returns (uint) {\\r\\n        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, totalSupply())));\\r\\n    }\\r\\n\\r\\n    function setDragonIndividualAbility(uint _tokenId, Stat key, uint value) external onlyUpdater {\\r\\n        require(_exists(_tokenId), \\\"Not exist NFT.\\\");\\r\\n\\r\\n        Age age = getAge(_tokenId);\\r\\n\\r\\n        require(value >= MIN_LEVEL && value <= ageLimitInfo[age], \\\"Invalid value.\\\");\\r\\n        \\r\\n        DragonData storage dragon = dragonInfo[_tokenId];\\r\\n        uint[7] storage data = dragon.ability;\\r\\n        data[uint(key)] = value;\\r\\n    }\\r\\n\\r\\n    function upgradeDragonStat(uint _tokenId, Stat key, uint delta) external onlyUpdater {\\r\\n        require(_exists(_tokenId), \\\"Not exist NFT.\\\");\\r\\n        require(isHatched(_tokenId), \\\"Dragon should be hatched first.\\\");\\r\\n\\r\\n        DragonData storage data = dragonInfo[_tokenId];\\r\\n        uint[7] storage ability = data.ability;\\r\\n\\r\\n        uint value = ability[uint(key)] + delta;\\r\\n        require(value >= MIN_LEVEL && value <= ageLimitInfo[getAge(_tokenId)], \\\"Invalid value.\\\");\\r\\n\\r\\n        ability[uint(key)] = value;\\r\\n    }\\r\\n\\r\\n    function upgradeSpecialSkill(uint _tokenId) external onlyUpdater {\\r\\n        require(_exists(_tokenId), \\\"Not exists.\\\");\\r\\n        require(isHatched(_tokenId), \\\"Dragon should be hatched first.\\\");\\r\\n\\r\\n        DragonData storage dragon = dragonInfo[_tokenId];\\r\\n        require(dragon.rarity == RarityType.Rare || dragon.rarity == RarityType.Legendary, \\\"Only Rare and Legendary can have special skill.\\\");\\r\\n        require(getAge(_tokenId) != Age.Adult, \\\"Cannot upgrade special skill at Adult age.\\\");\\r\\n        require(dragon.specialPoint < 5, \\\"You already reached to max.\\\");\\r\\n        dragon.specialPoint ++;\\r\\n    }\\r\\n\\r\\n    function hasSpecial(uint _tokenId) external view returns(bool) {\\r\\n        require(_exists(_tokenId), \\\"Not exists.\\\");\\r\\n        DragonData memory dragon = dragonInfo[_tokenId];\\r\\n        return dragon.specialPoint == 5;\\r\\n    }\\r\\n\\r\\n    function generateRarity(uint randomNumber) internal pure returns(RarityType) {\\r\\n        uint number = randomNumber % 100;\\r\\n        if (number < 50) {\\r\\n            return RarityType.Common;\\r\\n        } else if (number >= 50 && number < 80) {\\r\\n            return RarityType.Uncommon;\\r\\n        } else if (number >= 80 && number < 95) {\\r\\n            return RarityType.Rare;\\r\\n        } else {\\r\\n            return RarityType.Legendary;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function generateDragonType(uint randomNumber) internal pure returns(DragonType) {\\r\\n        uint number = randomNumber % 5;\\r\\n        return indexToType(number);\\r\\n    }\\r\\n\\r\\n    function generateGender(uint randomNumber) internal pure returns(Gender) {\\r\\n        return randomNumber % 1000 <= 995 ? Gender.MALE : Gender.FEMALE; \\r\\n    }\\r\\n\\r\\n    function hatchEgg(uint tokenId) external onlyUpdater {\\r\\n        require(!isHatched(tokenId), \\\"Already hatched\\\");\\r\\n\\r\\n        DragonData storage dragon = dragonInfo[tokenId];\\r\\n        \\r\\n        dragon.isDragon = true;\\r\\n        dragon.birthday = block.timestamp;\\r\\n       \\r\\n        for (uint i = 0; i < 7 ; i ++) {\\r\\n            dragon.ability[i] = stateRanges[uint(dragon.species)][uint(dragon.rarity)][i][0];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isHatched(uint tokenId) public view returns(bool) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        DragonData memory dragon = dragonInfo[tokenId];\\r\\n        return dragon.isDragon;\\r\\n    }\\r\\n\\r\\n    function getDragon(uint tokenId) public view returns(DragonData memory) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return dragonInfo[tokenId];\\r\\n    }\\r\\n\\r\\n    function getIndividualDragonState(uint _tokenId, Stat key) external view returns(uint) {\\r\\n        require(_exists(_tokenId), \\\"Not exist NFT.\\\");\\r\\n\\r\\n        DragonData memory dragon = dragonInfo[_tokenId];\\r\\n        return dragon.ability[uint(key)];\\r\\n    }\\r\\n\\r\\n    function mintNFT(\\r\\n        address to,\\r\\n        uint8 quantity,\\r\\n        string[] memory names\\r\\n    )\\r\\n        external\\r\\n        nonReentrant\\r\\n        onlyMinter\\r\\n    {\\r\\n        require(totalSupply() + quantity <= collectionSize, \\\"Exceeds Max Supply\\\");\\r\\n        require(quantity == names.length, \\\"Not match array size.\\\");\\r\\n\\r\\n        uint currentSupply = totalSupply();\\r\\n\\r\\n        _safeMint(to, quantity);\\r\\n\\r\\n        for (uint i = 0 ; i < quantity ; i ++) {\\r\\n            uint randomNumber = random();\\r\\n\\r\\n            DragonType dragonType = generateDragonType(randomNumber);\\r\\n            Gender gender = generateGender(randomNumber); \\r\\n            RarityType rarity = generateRarity(randomNumber);\\r\\n\\r\\n            DragonData storage dragon = dragonInfo[currentSupply + i];\\r\\n            dragon.rarity = rarity;\\r\\n            dragon.species = dragonType;\\r\\n            dragon.gender = gender;\\r\\n            dragon.name = names[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function breeding(\\r\\n        address to,\\r\\n        uint fatherTokenId,\\r\\n        uint motherTokenId\\r\\n    )   \\r\\n        external\\r\\n        nonReentrant\\r\\n        onlyMinter\\r\\n    {\\r\\n        require(_exists(fatherTokenId), \\\"Not exists father.\\\");\\r\\n        require(_exists(motherTokenId), \\\"Not exists mother.\\\");\\r\\n\\r\\n        uint rn = random();\\r\\n        uint quantity = (rn % 100) == 99 ? 2 : 1; // 1% => 2, 99% => 1\\r\\n        uint restAmount = collectionSize - totalSupply();\\r\\n        require(restAmount > 0, \\\"Exceeds Max Supply.\\\");\\r\\n\\r\\n        quantity = quantity > restAmount ? restAmount : quantity;\\r\\n        uint currentSupply = totalSupply();\\r\\n\\r\\n        _safeMint(to, quantity);\\r\\n\\r\\n        DragonData memory father = dragonInfo[fatherTokenId];\\r\\n        DragonData storage mother = dragonInfo[motherTokenId];\\r\\n\\r\\n        for (uint i = 0 ; i < quantity ; i ++) {\\r\\n            uint randomNumber = random();\\r\\n\\r\\n            Gender gender = generateGender(randomNumber); \\r\\n            RarityType rarity = generateRarity(randomNumber);\\r\\n\\r\\n            DragonData storage dragon = dragonInfo[currentSupply + i];\\r\\n            dragon.rarity = rarity;\\r\\n            dragon.species = randomNumber > 50 ? father.species : mother.species;\\r\\n            dragon.gender = gender;\\r\\n            dragon.father = fatherTokenId;\\r\\n            dragon.mother = motherTokenId;\\r\\n            dragon.name = \\\"Breed\\\";\\r\\n        }\\r\\n        mother.lastBreed = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        DragonData memory dragon = dragonInfo[tokenId];\\r\\n\\r\\n        if (!dragon.isDragon) {\\r\\n            return eggUris[uint(dragon.rarity)];\\r\\n        }\\r\\n\\r\\n        return tokenUris[uint(dragon.species)][uint(getAge(tokenId))][uint(dragon.gender)];\\r\\n    }\\r\\n    function updateName(uint _tokenId, string memory name) external onlyUpdater {\\r\\n        require(_exists(_tokenId), \\\"Not exists token\\\");\\r\\n        DragonData storage dragon = dragonInfo[_tokenId];\\r\\n        dragon.name = name;\\r\\n    }\\r\\n\\r\\n    // Admin actions\\r\\n    function setTokenUris(string[2][3][5] memory _tokenUris) external onlyOwner {\\r\\n        tokenUris = _tokenUris;\\r\\n    }\\r\\n\\r\\n    function setEggUris(string[4] memory _eggUris) external onlyOwner {\\r\\n            eggUris = _eggUris;\\r\\n    }\\r\\n    \\r\\n    function addMinter(address _address) external onlyOwner {\\r\\n        require(!minters[_address], \\\"Already minter.\\\");\\r\\n        minters[_address] = true;\\r\\n    }\\r\\n    function addUpdater(address _address) external onlyOwner {\\r\\n        require(!updaters[_address], \\\"Already updater.\\\");\\r\\n        updaters[_address] = true;\\r\\n    }\\r\\n\\r\\n    function removeMinter (address _address) external onlyOwner {\\r\\n        require(minters[_address], \\\"Already removed.\\\");\\r\\n        minters[_address] = false;\\r\\n    }\\r\\n    function removeupdater(address _address) external onlyOwner {\\r\\n        require(updaters[_address], \\\"Already removed.\\\");\\r\\n        updaters[_address] = false;\\r\\n    }\\r\\n    \\r\\n    function setStatRange(DragonType dragonType, RarityType rarity, Stat stat, uint[2] memory value) external onlyOwner{\\r\\n        require(value[1] <= MAX_LEVEL && value[0] >= MIN_LEVEL, \\\"Invalid value\\\");\\r\\n        stateRanges[uint(dragonType)][uint(rarity)][uint(stat)] = value;\\r\\n    }\\r\\n    function setLimitStatForAge(Age age, uint value) external onlyOwner {\\r\\n        require(value <= MAX_LEVEL, \\\"Invalid value\\\");\\r\\n        ageLimitInfo[age] = value;\\r\\n    }\\r\\n\\r\\n    // utility functions\\r\\n    function numberMinted(address owner) public view returns (uint256) {\\r\\n        return _numberMinted(owner);\\r\\n    }\\r\\n\\r\\n    function getOwnershipData(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (TokenOwnership memory)\\r\\n    {\\r\\n        return ownershipOf(tokenId);\\r\\n    }\\r\\n\\r\\n    function isExist(uint tokenId) external view returns(bool) {\\r\\n        return _exists(tokenId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2846e496ca246ecdaeba780c4110af9ea3bc49c0092ca9b86e8fe89ed26d1527\",\"license\":\"MIT\"},\"contracts/DragonBreedingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"./Dragon.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract DragonBreedingManager is Ownable, DragonBasic, ReentrancyGuard {\\r\\n    struct BreedLand {\\r\\n        uint id;\\r\\n        address owner;\\r\\n        uint father;\\r\\n        uint mother;\\r\\n        address fatherOwner;\\r\\n        address motherOwner;\\r\\n        uint startAt;\\r\\n        bool pending;\\r\\n        bool isRent;\\r\\n        uint rentOrder;\\r\\n    }\\r\\n\\r\\n    struct RentOrder {\\r\\n        uint id;\\r\\n        address owner;\\r\\n        uint tokenId;\\r\\n        uint fee;\\r\\n        bool enable;\\r\\n    }\\r\\n\\r\\n    // Dragon NFT address\\r\\n    address public dragonNFTAddress;\\r\\n\\r\\n    // Duration for re breeding for female.\\r\\n    uint durationRebreeding = 1 weeks;\\r\\n    uint duration = 2 weeks;\\r\\n    Age minAgeForBreeding = Age.Adult;\\r\\n\\r\\n    // Breeding ground;\\r\\n    BreedLand[] breedlands;\\r\\n\\r\\n    // RentOrder list\\r\\n    RentOrder[] rentOrders;\\r\\n\\r\\n    // token id => rent id\\r\\n    mapping(uint => uint) private rentIDs;\\r\\n\\r\\n    // token id => breed id\\r\\n    mapping(uint => uint) private breedIDs; \\r\\n\\r\\n    // Breeding ground counter;\\r\\n    uint public breedCount;\\r\\n\\r\\n    // Rent order count\\r\\n    uint public rentCount;\\r\\n\\r\\n    constructor(address _dragonNFTAddress) DragonBasic() {\\r\\n        dragonNFTAddress = _dragonNFTAddress;\\r\\n    }\\r\\n\\r\\n    function requestBreeding(uint fatherTokenId, uint motherTokenId) external {\\r\\n        require(Dragon(dragonNFTAddress).ownerOf(fatherTokenId) == msg.sender, \\\"You are not owner of this token.\\\");\\r\\n        require(Dragon(dragonNFTAddress).ownerOf(motherTokenId) == msg.sender, \\\"You are not owner of this token.\\\");\\r\\n\\r\\n        require(uint(Dragon(dragonNFTAddress).getAge(fatherTokenId)) >= uint(minAgeForBreeding), \\\"This dragon is too young.\\\");\\r\\n        require(uint(Dragon(dragonNFTAddress).getAge(motherTokenId)) >= uint(minAgeForBreeding), \\\"This dragon is too young.\\\");\\r\\n\\r\\n        DragonData memory father = Dragon(dragonNFTAddress).getDragon(fatherTokenId);\\r\\n        DragonData memory mother = Dragon(dragonNFTAddress).getDragon(motherTokenId);\\r\\n\\r\\n\\r\\n        require(father.gender != mother.gender, \\\"Gender should be opposite.\\\");\\r\\n\\r\\n        uint _motherTokenId;\\r\\n        uint _fatherTokenId;\\r\\n\\r\\n        if (father.gender == Gender.MALE) {\\r\\n            _motherTokenId = motherTokenId;\\r\\n            _fatherTokenId = fatherTokenId;\\r\\n        } else {\\r\\n            _motherTokenId = fatherTokenId;\\r\\n            _fatherTokenId = motherTokenId;\\r\\n        }\\r\\n\\r\\n        require(mother.lastBreed + durationRebreeding <= block.timestamp, \\\"Not available rebreeding for female.\\\");\\r\\n\\r\\n        breedIDs[fatherTokenId] = breedCount;\\r\\n        breedIDs[motherTokenId] = breedCount;\\r\\n\\r\\n        breedlands[breedCount] = BreedLand({\\r\\n            id: breedCount,\\r\\n            owner: msg.sender,\\r\\n            father: _fatherTokenId,\\r\\n            mother: _motherTokenId,\\r\\n            fatherOwner: msg.sender,\\r\\n            motherOwner: msg.sender,\\r\\n            startAt: block.timestamp,\\r\\n            pending: true,\\r\\n            isRent: false,\\r\\n            rentOrder: 0\\r\\n        });\\r\\n\\r\\n        breedCount ++;\\r\\n        Dragon(dragonNFTAddress).transferFrom(msg.sender, address(this), fatherTokenId);\\r\\n        Dragon(dragonNFTAddress).transferFrom(msg.sender, address(this), motherTokenId);\\r\\n    }\\r\\n\\r\\n    function breeding (uint breedId) external {\\r\\n        require(breedId < breedCount, \\\"Invalid breed ID.\\\");\\r\\n        BreedLand storage breedLand = breedlands[breedId];\\r\\n        \\r\\n        require(\\r\\n            breedLand.owner == msg.sender || msg.sender == breedLand.fatherOwner || msg.sender == breedLand.motherOwner, \\r\\n            \\\"You are not the owner or parent of this breed.\\\"\\r\\n        );\\r\\n\\r\\n        require(breedLand.startAt + duration <= block.timestamp, \\\"Still incubating.\\\");\\r\\n        require(breedLand.pending, \\\"You need to request first.\\\");\\r\\n\\r\\n        Dragon(dragonNFTAddress).breeding(breedLand.owner, breedLand.father, breedLand.mother);\\r\\n\\r\\n        if (breedLand.isRent) {\\r\\n            RentOrder storage rentOrder = rentOrders[breedLand.rentOrder];\\r\\n            uint rentTokenId = rentOrder.tokenId;\\r\\n            rentOrder.enable = true;\\r\\n\\r\\n            if (rentTokenId == breedLand.father) {\\r\\n                Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.motherOwner, breedLand.mother);\\r\\n            } else {\\r\\n                Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.fatherOwner, breedLand.father);\\r\\n            }\\r\\n        } else {\\r\\n            Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.fatherOwner, breedLand.father);\\r\\n            Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.motherOwner, breedLand.mother);\\r\\n        }\\r\\n\\r\\n        breedLand.father = 0;\\r\\n        breedLand.mother = 0;\\r\\n        breedLand.owner = address(0);\\r\\n        breedLand.pending = false;\\r\\n        breedLand.startAt = 0;\\r\\n        breedLand.fatherOwner = address(0);\\r\\n        breedLand.motherOwner = address(0);\\r\\n    }\\r\\n\\r\\n    function cancelBreeding (uint breedId) external {\\r\\n        require(breedId < breedCount, \\\"Invalid breed ID.\\\");\\r\\n        \\r\\n        BreedLand storage breedLand = breedlands[breedId];\\r\\n        require(breedLand.owner == msg.sender, \\\"You are not the owner of this breed.\\\");\\r\\n        \\r\\n        if (breedLand.isRent) {\\r\\n            RentOrder storage rentOrder = rentOrders[breedLand.rentOrder];\\r\\n            rentOrder.enable = true;\\r\\n            uint rentTokenId = rentOrder.tokenId;\\r\\n\\r\\n            if (rentTokenId == breedLand.father) {\\r\\n                Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.motherOwner, breedLand.mother);\\r\\n            } else {\\r\\n                Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.fatherOwner, breedLand.father);\\r\\n            }\\r\\n        } else {\\r\\n            if (breedLand.fatherOwner != address(0)) {\\r\\n                Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.fatherOwner, breedLand.father);\\r\\n            }\\r\\n            if (breedLand.motherOwner != address(0)) {\\r\\n                Dragon(dragonNFTAddress).transferFrom(address(this), breedLand.motherOwner, breedLand.mother);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        breedLand.father = 0;\\r\\n        breedLand.mother = 0;\\r\\n        breedLand.owner = address(0);\\r\\n        breedLand.pending = false;\\r\\n        breedLand.startAt = 0;\\r\\n        breedLand.fatherOwner = address(0);\\r\\n        breedLand.motherOwner = address(0);\\r\\n    }\\r\\n\\r\\n    function createNewBreedLandWithSingleDragon(uint tokenId) external {\\r\\n        require(Dragon(dragonNFTAddress).ownerOf(tokenId) == msg.sender, \\\"You are not owner of this token.\\\");\\r\\n        require(uint(Dragon(dragonNFTAddress).getAge(tokenId)) >= uint(minAgeForBreeding), \\\"This dragon is too young.\\\");\\r\\n\\r\\n        DragonData memory dragon = Dragon(dragonNFTAddress).getDragon(tokenId);\\r\\n\\r\\n        if (dragon.gender == Gender.FEMALE) {\\r\\n            require(dragon.lastBreed + durationRebreeding <= block.timestamp, \\\"Not available rebreeding for female.\\\");\\r\\n        }\\r\\n        breedIDs[tokenId] = breedCount;\\r\\n        breedlands[breedCount] = BreedLand({\\r\\n            id: breedCount,\\r\\n            owner: msg.sender,\\r\\n            father: dragon.gender == Gender.MALE ? tokenId : 0,\\r\\n            mother: dragon.gender == Gender.FEMALE ? tokenId : 0,\\r\\n            fatherOwner: dragon.gender == Gender.MALE ? msg.sender : address(0),\\r\\n            motherOwner: dragon.gender == Gender.FEMALE ? msg.sender : address(0),\\r\\n            startAt: 0,\\r\\n            pending: false,\\r\\n            isRent: false,\\r\\n            rentOrder: 0\\r\\n        });\\r\\n\\r\\n        breedCount ++;\\r\\n        Dragon(dragonNFTAddress).transferFrom(msg.sender, address(this), tokenId);\\r\\n    }\\r\\n\\r\\n    function borrowDragon(uint rentId, uint landId) external payable {\\r\\n        require(rentId < rentCount, \\\"Invalid rent id.\\\");\\r\\n        require(isRentOrderAvailable(rentId), \\\"This rent order is not available now.\\\");\\r\\n\\r\\n        RentOrder storage rentOrder = rentOrders[rentId];\\r\\n        require(Dragon(dragonNFTAddress).getApproved(rentOrder.tokenId) == address(this), \\\"Not approved.\\\");\\r\\n        require(Dragon(dragonNFTAddress).ownerOf(rentOrder.tokenId) == rentOrder.owner, \\\"Rent dragon's ownership has been changed.\\\");\\r\\n        require(uint(Dragon(dragonNFTAddress).getAge(rentOrder.tokenId)) >= uint(minAgeForBreeding), \\\"This dragon is too young.\\\");\\r\\n\\r\\n        DragonData memory rentedDragon = Dragon(dragonNFTAddress).getDragon(rentOrder.tokenId);\\r\\n        BreedLand storage breedLand = breedlands[landId];\\r\\n        \\r\\n        address fatherOwner = breedLand.fatherOwner;\\r\\n        address motherOwner = breedLand.motherOwner;\\r\\n        require(fatherOwner != address(0) || motherOwner != address(0), \\\"This breed land is not available.\\\");\\r\\n        require(fatherOwner == address(0) || motherOwner == address(0), \\\"This breed land is not available.\\\");\\r\\n        \\r\\n        if (fatherOwner != address(0)) {\\r\\n            require(rentedDragon.gender == Gender.FEMALE, \\\"Dragons should have opposite gender.\\\");\\r\\n            breedLand.motherOwner = rentOrder.owner;\\r\\n            breedLand.mother = rentOrder.tokenId;\\r\\n        } else {\\r\\n            require(rentedDragon.gender == Gender.MALE, \\\"Dragons should have opposite gender.\\\");\\r\\n            breedLand.fatherOwner = rentOrder.owner;\\r\\n            breedLand.father = rentOrder.tokenId;\\r\\n        }\\r\\n\\r\\n        refundIfOver(rentOrder.fee);\\r\\n\\r\\n        if (rentOrder.fee > 0) {\\r\\n            payable(rentOrder.owner).transfer(rentOrder.fee);\\r\\n        }\\r\\n\\r\\n        Dragon(dragonNFTAddress).transferFrom(rentOrder.owner, address(this), rentOrder.tokenId);\\r\\n\\r\\n        breedIDs[rentOrder.tokenId] = breedLand.id;\\r\\n\\r\\n        breedLand.startAt = block.timestamp;\\r\\n        breedLand.pending = true;\\r\\n        breedLand.isRent = true;\\r\\n        breedLand.rentOrder = rentId;\\r\\n\\r\\n        rentOrder.enable = false;\\r\\n    }\\r\\n\\r\\n\\r\\n    function createRentOrder(uint tokenId, uint fee) external {\\r\\n        require(Dragon(dragonNFTAddress).getApproved(tokenId) == address(this), \\\"Not approved.\\\");\\r\\n        require(isRentable(tokenId), \\\"This dragon is not rentable now.\\\");\\r\\n        require(uint(Dragon(dragonNFTAddress).getAge(tokenId)) >= uint(minAgeForBreeding), \\\"This dragon is too young.\\\");\\r\\n\\r\\n        rentIDs[tokenId] = rentCount;\\r\\n\\r\\n        rentOrders[rentCount] = RentOrder({\\r\\n            id: rentCount,\\r\\n            owner: msg.sender,\\r\\n            tokenId: tokenId,\\r\\n            fee: fee,\\r\\n            enable: true\\r\\n        });\\r\\n        rentCount ++;\\r\\n    }\\r\\n\\r\\n    function cancelRentOrder (uint rentId) external {\\r\\n        require(rentId < rentCount, \\\"Invalid rent id.\\\");\\r\\n        RentOrder storage rentOrder = rentOrders[rentId];\\r\\n        BreedLand memory land = breedlands[breedIDs[rentOrder.tokenId]];\\r\\n\\r\\n        require(!land.pending, \\\"Dragon is in pending.\\\");\\r\\n\\r\\n        rentOrder.enable = false;\\r\\n    }\\r\\n\\r\\n    function isRentOrderAvailable(uint rentId) public view returns(bool) {\\r\\n        require(rentId < rentCount, \\\"Invalid Rent ID.\\\");\\r\\n\\r\\n        RentOrder memory rentOrder = rentOrders[rentId];\\r\\n        return rentOrder.enable && isRentable(rentOrder.tokenId);\\r\\n    }\\r\\n\\r\\n    function isRentable(uint tokenId) public view returns(bool) {\\r\\n        DragonData memory dragon = Dragon(dragonNFTAddress).getDragon(tokenId);\\r\\n        if (dragon.gender == Gender.MALE) {\\r\\n            return true;\\r\\n        } else {\\r\\n            return dragon.lastBreed + durationRebreeding <= block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getBreedLands(address owner) external view returns(BreedLand[] memory){\\r\\n        BreedLand[] memory lands = new BreedLand[](breedCount);\\r\\n        uint index = 0;\\r\\n        for (uint i = 0; i < breedlands.length; i ++) {\\r\\n            BreedLand memory land = breedlands[i];\\r\\n            if (land.owner == owner && land.pending) {\\r\\n                lands[index] = land;\\r\\n                index ++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return lands;\\r\\n    }\\r\\n\\r\\n    function getRentOrders() external view returns(RentOrder[] memory) {\\r\\n        RentOrder[] memory orders = new RentOrder[](rentCount);\\r\\n        uint index = 0;\\r\\n        for (uint i = 0; i < orders.length; i ++) {\\r\\n            RentOrder memory order = orders[i];\\r\\n            if (order.enable) {\\r\\n                orders[index] = order;\\r\\n                index ++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return orders;\\r\\n    }\\r\\n\\r\\n    function refundIfOver(uint256 price) private {\\r\\n        require(msg.value >= price, \\\"Need to send more ETH.\\\");\\r\\n        if (msg.value > price) {\\r\\n            payable(msg.sender).transfer(msg.value - price);\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x74752d418f28ec5ee85246131f9de6fbbac72dcbf145324f14a6cfc15a6dcfe6\",\"license\":\"MIT\"},\"contracts/interface/DragonBasic.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\ncontract DragonBasic {\\r\\n    // Rarity. Common 50%, Uncommon 30%, Rare 15%, Legendary 5%\\r\\n    enum RarityType {\\r\\n        Common,\\r\\n        Uncommon,\\r\\n        Rare,\\r\\n        Legendary\\r\\n    }\\r\\n\\r\\n    // Dragon Type: The same percent\\r\\n    enum DragonType {\\r\\n        Attack,\\r\\n        Healer,\\r\\n        Stealth,\\r\\n        Rescue,\\r\\n        Supply\\r\\n    }\\r\\n\\r\\n    // Male: 99.5%, Female: 0.5%\\r\\n    enum Gender {\\r\\n        MALE,\\r\\n        FEMALE\\r\\n    }\\r\\n\\r\\n    // Age\\r\\n    enum Age {\\r\\n        Egg,\\r\\n        Hatchling,\\r\\n        Adolescent,\\r\\n        Adult\\r\\n    }\\r\\n\\r\\n    // Stats\\r\\n    enum Stat {\\r\\n        Strength,\\r\\n        FireDamage,\\r\\n        Healing,\\r\\n        Agility,\\r\\n        Flight,\\r\\n        Magic,\\r\\n        Defense\\r\\n    }\\r\\n\\r\\n    // TrainTypes \\r\\n    enum TrainType {\\r\\n        Feed,\\r\\n        CastSpell,\\r\\n        SpecialSkill,\\r\\n\\r\\n        Study,\\r\\n        Spar,\\r\\n        Obstacle,\\r\\n        \\r\\n        Fight,\\r\\n        Hunt,\\r\\n        Rescue,\\r\\n        Race\\r\\n    }\\r\\n\\r\\n    struct DragonData {\\r\\n        RarityType rarity;\\r\\n        DragonType species;\\r\\n        Gender gender;\\r\\n        uint birthday;\\r\\n        bool isDragon;\\r\\n        uint lastBreed;\\r\\n        uint father;\\r\\n        uint mother;\\r\\n        string name;\\r\\n        uint[7] ability;\\r\\n        uint specialPoint; // increase to max 5. Should be developed before Adult age. \\r\\n    }\\r\\n\\r\\n    // states limit per age\\r\\n    mapping(Age => uint) internal ageLimitInfo; \\r\\n\\r\\n    // mapping(DragonType => mapping(RarityType => mapping(Stat => StateRange))) internal stateRanges;\\r\\n    uint[2][7][4][5] stateRanges;\\r\\n\\r\\n    constructor() {\\r\\n        ageLimitInfo[Age.Egg] = 0;\\r\\n        ageLimitInfo[Age.Hatchling] = 3;\\r\\n        ageLimitInfo[Age.Adolescent] = 5;\\r\\n        ageLimitInfo[Age.Adult] = 10;\\r\\n    }\\r\\n\\r\\n    function indexToStat(uint index) internal pure returns(Stat) {\\r\\n        require(index < 7, \\\"Invalid stat index.\\\");\\r\\n\\r\\n        if (index == 0) {\\r\\n            return Stat.Strength;\\r\\n        } else if (index == 1) {\\r\\n            return Stat.FireDamage;\\r\\n        } else if (index == 2) {\\r\\n            return Stat.Healing;\\r\\n        } else if (index == 3) {\\r\\n            return Stat.Agility;\\r\\n        } else if (index == 4) {\\r\\n            return Stat.Flight;\\r\\n        } else if (index == 5) {\\r\\n            return Stat.Magic;\\r\\n        } else {\\r\\n            return Stat.Defense;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function indexToType(uint index) internal pure returns(DragonType) {\\r\\n        require(index < 5, \\\"Invalid type index.\\\");\\r\\n\\r\\n        if (index == 0) {\\r\\n            return DragonType.Attack;\\r\\n        } else if (index == 1) {\\r\\n            return DragonType.Healer;\\r\\n        } else if (index == 2) {\\r\\n            return DragonType.Stealth;\\r\\n        } else if (index == 3) {\\r\\n            return DragonType.Rescue;\\r\\n        } else {\\r\\n            return DragonType.Supply;\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xbf107d2ce7313e405aa67247bfb097c5a2dec8c10c66cc4cef18a764fa0de6ee\"},\"contracts/interface/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Assumes the number of issuable tokens (collection size) is capped and fits in a uint128.\\r\\n *\\r\\n * Does not support burning tokens to address(0).\\r\\n */\\r\\ncontract ERC721A is\\r\\n  Context,\\r\\n  ERC165,\\r\\n  IERC721,\\r\\n  IERC721Metadata,\\r\\n  IERC721Enumerable\\r\\n{\\r\\n  using Address for address;\\r\\n  using Strings for uint256;\\r\\n\\r\\n  struct TokenOwnership {\\r\\n    address addr;\\r\\n    uint64 startTimestamp;\\r\\n  }\\r\\n\\r\\n  struct AddressData {\\r\\n    uint128 balance;\\r\\n    uint128 numberMinted;\\r\\n  }\\r\\n\\r\\n  uint256 private currentIndex = 0;\\r\\n\\r\\n  uint256 internal immutable collectionSize;\\r\\n  uint256 internal immutable maxBatchSize;\\r\\n\\r\\n  // Token name\\r\\n  string private _name;\\r\\n\\r\\n  // Token symbol\\r\\n  string private _symbol;\\r\\n\\r\\n  // Mapping from token ID to ownership details\\r\\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\r\\n  mapping(uint256 => TokenOwnership) private _ownerships;\\r\\n\\r\\n  // Mapping owner address to address data\\r\\n  mapping(address => AddressData) private _addressData;\\r\\n\\r\\n  // Mapping from token ID to approved address\\r\\n  mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n  // Mapping from owner to operator approvals\\r\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n  /**\\r\\n   * @dev\\r\\n   * `maxBatchSize` refers to how much a minter can mint at a time.\\r\\n   * `collectionSize_` refers to how many tokens are in the collection.\\r\\n   */\\r\\n  constructor(\\r\\n    string memory name_,\\r\\n    string memory symbol_,\\r\\n    uint256 maxBatchSize_,\\r\\n    uint256 collectionSize_\\r\\n  ) {\\r\\n    require(\\r\\n      collectionSize_ > 0,\\r\\n      \\\"ERC721A: collection must have a nonzero supply\\\"\\r\\n    );\\r\\n    require(maxBatchSize_ > 0, \\\"ERC721A: max batch size must be nonzero\\\");\\r\\n    _name = name_;\\r\\n    _symbol = symbol_;\\r\\n    maxBatchSize = maxBatchSize_;\\r\\n    collectionSize = collectionSize_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-totalSupply}.\\r\\n   */\\r\\n  function totalSupply() public view override returns (uint256) {\\r\\n    return currentIndex;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n   */\\r\\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\\r\\n    require(index < totalSupply(), \\\"ERC721A: global index out of bounds\\\");\\r\\n    return index;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n   * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.\\r\\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\r\\n   */\\r\\n  function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\r\\n    uint256 numMintedSoFar = totalSupply();\\r\\n    uint256 tokenIdsIdx = 0;\\r\\n    address currOwnershipAddr = address(0);\\r\\n    for (uint256 i = 0; i < numMintedSoFar; i++) {\\r\\n      TokenOwnership memory ownership = _ownerships[i];\\r\\n      if (ownership.addr != address(0)) {\\r\\n        currOwnershipAddr = ownership.addr;\\r\\n      }\\r\\n      if (currOwnershipAddr == owner) {\\r\\n        if (tokenIdsIdx == index) {\\r\\n          return i;\\r\\n        }\\r\\n        tokenIdsIdx++;\\r\\n      }\\r\\n    }\\r\\n    revert(\\\"ERC721A: unable to get token of owner by index\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override(ERC165, IERC165)\\r\\n    returns (bool)\\r\\n  {\\r\\n    return\\r\\n      interfaceId == type(IERC721).interfaceId ||\\r\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n      interfaceId == type(IERC721Enumerable).interfaceId ||\\r\\n      super.supportsInterface(interfaceId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-balanceOf}.\\r\\n   */\\r\\n  function balanceOf(address owner) public view override returns (uint256) {\\r\\n    require(owner != address(0), \\\"ERC721A: balance query for the zero address\\\");\\r\\n    return uint256(_addressData[owner].balance);\\r\\n  }\\r\\n\\r\\n  function _numberMinted(address owner) internal view returns (uint256) {\\r\\n    require(\\r\\n      owner != address(0),\\r\\n      \\\"ERC721A: number minted query for the zero address\\\"\\r\\n    );\\r\\n    return uint256(_addressData[owner].numberMinted);\\r\\n  }\\r\\n\\r\\n  function ownershipOf(uint256 tokenId)\\r\\n    internal\\r\\n    view\\r\\n    returns (TokenOwnership memory)\\r\\n  {\\r\\n    require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\r\\n\\r\\n    uint256 lowestTokenToCheck;\\r\\n    if (tokenId >= maxBatchSize) {\\r\\n      lowestTokenToCheck = tokenId - maxBatchSize + 1;\\r\\n    }\\r\\n\\r\\n    for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\\r\\n      TokenOwnership memory ownership = _ownerships[curr];\\r\\n      if (ownership.addr != address(0)) {\\r\\n        return ownership;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    revert(\\\"ERC721A: unable to determine the owner of token\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-ownerOf}.\\r\\n   */\\r\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n    return ownershipOf(tokenId).addr;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-name}.\\r\\n   */\\r\\n  function name() public view virtual override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-symbol}.\\r\\n   */\\r\\n  function symbol() public view virtual override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-tokenURI}.\\r\\n   */\\r\\n  function tokenURI(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (string memory)\\r\\n  {\\r\\n    require(\\r\\n      _exists(tokenId),\\r\\n      \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n    );\\r\\n\\r\\n    string memory baseURI = _baseURI();\\r\\n    return\\r\\n      bytes(baseURI).length > 0\\r\\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\\r\\n        : \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n   * by default, can be overriden in child contracts.\\r\\n   */\\r\\n  function _baseURI() internal view virtual returns (string memory) {\\r\\n    return \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-approve}.\\r\\n   */\\r\\n  function approve(address to, uint256 tokenId) public override {\\r\\n    address owner = ERC721A.ownerOf(tokenId);\\r\\n    require(to != owner, \\\"ERC721A: approval to current owner\\\");\\r\\n\\r\\n    require(\\r\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n      \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\r\\n    );\\r\\n\\r\\n    _approve(to, tokenId, owner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-getApproved}.\\r\\n   */\\r\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\r\\n    require(_exists(tokenId), \\\"ERC721A: approved query for nonexistent token\\\");\\r\\n\\r\\n    return _tokenApprovals[tokenId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-setApprovalForAll}.\\r\\n   */\\r\\n  function setApprovalForAll(address operator, bool approved) public override {\\r\\n    require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\r\\n\\r\\n    _operatorApprovals[_msgSender()][operator] = approved;\\r\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-isApprovedForAll}.\\r\\n   */\\r\\n  function isApprovedForAll(address owner, address operator)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _operatorApprovals[owner][operator];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-transferFrom}.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public override {\\r\\n    _transfer(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public override {\\r\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) public override {\\r\\n    _transfer(from, to, tokenId);\\r\\n    require(\\r\\n      _checkOnERC721Received(from, to, tokenId, _data),\\r\\n      \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns whether `tokenId` exists.\\r\\n   *\\r\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n   *\\r\\n   * Tokens start existing when they are minted (`_mint`),\\r\\n   */\\r\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n    return tokenId < currentIndex;\\r\\n  }\\r\\n\\r\\n  function _safeMint(address to, uint256 quantity) internal {\\r\\n    _safeMint(to, quantity, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - there must be `quantity` tokens remaining unminted in the total collection.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `quantity` cannot be larger than the max batch size.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _safeMint(\\r\\n    address to,\\r\\n    uint256 quantity,\\r\\n    bytes memory _data\\r\\n  ) internal {\\r\\n    uint256 startTokenId = currentIndex;\\r\\n    require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\r\\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\\r\\n    require(!_exists(startTokenId), \\\"ERC721A: token already minted\\\");\\r\\n    require(quantity <= maxBatchSize, \\\"ERC721A: quantity to mint too high\\\");\\r\\n\\r\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n    AddressData memory addressData = _addressData[to];\\r\\n    _addressData[to] = AddressData(\\r\\n      addressData.balance + uint128(quantity),\\r\\n      addressData.numberMinted + uint128(quantity)\\r\\n    );\\r\\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\\r\\n\\r\\n    uint256 updatedIndex = startTokenId;\\r\\n\\r\\n    for (uint256 i = 0; i < quantity; i++) {\\r\\n      emit Transfer(address(0), to, updatedIndex);\\r\\n      require(\\r\\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\\r\\n        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\r\\n      );\\r\\n      updatedIndex++;\\r\\n    }\\r\\n\\r\\n    currentIndex = updatedIndex;\\r\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers `tokenId` from `from` to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must be owned by `from`.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _transfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) private {\\r\\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\r\\n\\r\\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\r\\n      getApproved(tokenId) == _msgSender() ||\\r\\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\\r\\n\\r\\n    require(\\r\\n      isApprovedOrOwner,\\r\\n      \\\"ERC721A: transfer caller is not owner nor approved\\\"\\r\\n    );\\r\\n\\r\\n    require(\\r\\n      prevOwnership.addr == from,\\r\\n      \\\"ERC721A: transfer from incorrect owner\\\"\\r\\n    );\\r\\n    require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n    // Clear approvals from the previous owner\\r\\n    _approve(address(0), tokenId, prevOwnership.addr);\\r\\n\\r\\n    _addressData[from].balance -= 1;\\r\\n    _addressData[to].balance += 1;\\r\\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\\r\\n\\r\\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\r\\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n    uint256 nextTokenId = tokenId + 1;\\r\\n    if (_ownerships[nextTokenId].addr == address(0)) {\\r\\n      if (_exists(nextTokenId)) {\\r\\n        _ownerships[nextTokenId] = TokenOwnership(\\r\\n          prevOwnership.addr,\\r\\n          prevOwnership.startTimestamp\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Transfer(from, to, tokenId);\\r\\n    _afterTokenTransfers(from, to, tokenId, 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve `to` to operate on `tokenId`\\r\\n   *\\r\\n   * Emits a {Approval} event.\\r\\n   */\\r\\n  function _approve(\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    address owner\\r\\n  ) private {\\r\\n    _tokenApprovals[tokenId] = to;\\r\\n    emit Approval(owner, to, tokenId);\\r\\n  }\\r\\n\\r\\n  uint256 public nextOwnerToExplicitlySet = 0;\\r\\n\\r\\n  /**\\r\\n   * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\r\\n   */\\r\\n  function _setOwnersExplicit(uint256 quantity) internal {\\r\\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\\r\\n    require(quantity > 0, \\\"quantity must be nonzero\\\");\\r\\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\\r\\n    if (endIndex > collectionSize - 1) {\\r\\n      endIndex = collectionSize - 1;\\r\\n    }\\r\\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\\r\\n    require(_exists(endIndex), \\\"not enough minted yet for this cleanup\\\");\\r\\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\\r\\n      if (_ownerships[i].addr == address(0)) {\\r\\n        TokenOwnership memory ownership = ownershipOf(i);\\r\\n        _ownerships[i] = TokenOwnership(\\r\\n          ownership.addr,\\r\\n          ownership.startTimestamp\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n    nextOwnerToExplicitlySet = endIndex + 1;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n   * The call is not executed if the target address is not a contract.\\r\\n   *\\r\\n   * @param from address representing the previous owner of the given token ID\\r\\n   * @param to target address that will receive the tokens\\r\\n   * @param tokenId uint256 ID of the token to be transferred\\r\\n   * @param _data bytes optional data to send along with the call\\r\\n   * @return bool whether the call correctly returned the expected magic value\\r\\n   */\\r\\n  function _checkOnERC721Received(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) private returns (bool) {\\r\\n    if (to.isContract()) {\\r\\n      try\\r\\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\r\\n      returns (bytes4 retval) {\\r\\n        return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n      } catch (bytes memory reason) {\\r\\n        if (reason.length == 0) {\\r\\n          revert(\\\"ERC721A: transfer to non ERC721Receiver implementer\\\");\\r\\n        } else {\\r\\n          assembly {\\r\\n            revert(add(32, reason), mload(reason))\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    } else {\\r\\n      return true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\r\\n   *\\r\\n   * startTokenId - the first token id to be transferred\\r\\n   * quantity - the amount to be transferred\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n   * transferred to `to`.\\r\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n   */\\r\\n  function _beforeTokenTransfers(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 startTokenId,\\r\\n    uint256 quantity\\r\\n  ) internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n   * minting.\\r\\n   *\\r\\n   * startTokenId - the first token id to be transferred\\r\\n   * quantity - the amount to be transferred\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - when `from` and `to` are both non-zero.\\r\\n   * - `from` and `to` are never both zero.\\r\\n   */\\r\\n  function _afterTokenTransfers(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 startTokenId,\\r\\n    uint256 quantity\\r\\n  ) internal virtual {}\\r\\n}\",\"keccak256\":\"0xcacd0c4b4a39075d060e36de8c17cddb9a67bae270d7b8b62b9148ba286f3186\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405262093a8061011c556212750061011d5561011e805460ff191660031790553480156200002f57600080fd5b50604051620034ea380380620034ea833981016040819052620000529162000188565b6200005d3362000125565b6001602081905260007fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4981905560037fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f81905560057fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f559052600a7f7dfe757ecd65cbd7922a9c0161e935dd7fdbcc0e999689c7d31633896b1fc60b5561011a5561011b80546001600160a01b0319166001600160a01b0392909216919091179055620001dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516200018281620001c3565b92915050565b6000602082840312156200019b57600080fd5b6000620001a9848462000175565b949350505050565b60006001600160a01b03821662000182565b620001ce81620001b1565b8114620001da57600080fd5b50565b6132fd80620001ed6000396000f3fe6080604052600436106100fe5760003560e01c806390d075a311610095578063b1b7c57b11610064578063b1b7c57b14610295578063c392598d146102c2578063c4418694146102e2578063e608eb1f14610302578063f2fde38b1461031957600080fd5b806390d075a3146102065780639c2d14d514610228578063aacb088014610248578063abdfe8de1461026857600080fd5b8063715018a6116100d1578063715018a61461018f5780637acea57f146101a45780637c2654f6146101c45780638da5cb5b146101e857600080fd5b806328b30f2a146101035780632938ad50146101255780635e3af92f1461015c57806367edd7cb1461017c575b600080fd5b34801561010f57600080fd5b5061012361011e3660046128a4565b610339565b005b34801561013157600080fd5b5061011b54610146906001600160a01b031681565b6040516101539190612f57565b60405180910390f35b34801561016857600080fd5b506101236101773660046128a4565b610859565b61012361018a3660046128c2565b610c65565b34801561019b57600080fd5b50610123611277565b3480156101b057600080fd5b506101236101bf3660046128c2565b6112ad565b3480156101d057600080fd5b506101db6101245481565b6040516101539190613128565b3480156101f457600080fd5b506000546001600160a01b0316610146565b34801561021257600080fd5b5061021b611544565b6040516101539190612fb9565b34801561023457600080fd5b506101236102433660046128a4565b61167c565b34801561025457600080fd5b506101236102633660046128a4565b611887565b34801561027457600080fd5b506102886102833660046128a4565b6119e9565b6040516101539190612fca565b3480156102a157600080fd5b506102b56102b0366004612815565b611aa9565b6040516101539190612fa8565b3480156102ce57600080fd5b506102886102dd3660046128a4565b611c94565b3480156102ee57600080fd5b506101236102fd3660046128c2565b611d72565b34801561030e57600080fd5b506101db6101235481565b34801561032557600080fd5b50610123610334366004612815565b6124af565b61011b546040516331a9108f60e11b815233916001600160a01b031690636352211e9061036a908590600401613128565b60206040518083038186803b15801561038257600080fd5b505afa158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba9190612833565b6001600160a01b0316146103e95760405162461bcd60e51b81526004016103e090612fe8565b60405180910390fd5b61011e5460ff16600381111561040f57634e487b7160e01b600052602160045260246000fd5b61011b5460405163071b804560e11b81526001600160a01b0390911690630e37008a90610440908590600401613128565b60206040518083038186803b15801561045857600080fd5b505afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104909190612851565b60038111156104af57634e487b7160e01b600052602160045260246000fd5b10156104cd5760405162461bcd60e51b81526004016103e090613068565b61011b5460405163e0bb933b60e01b81526000916001600160a01b03169063e0bb933b906104ff908590600401613128565b60006040518083038186803b15801561051757600080fd5b505afa15801561052b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610553919081019061286f565b905060018160400151600181111561057b57634e487b7160e01b600052602160045260246000fd5b14156105b3574261011c548260a00151610595919061319e565b11156105b35760405162461bcd60e51b81526004016103e090613008565b6101235460008381526101226020908152604080832084905580516101408101825293845233918401919091528201908360400151600181111561060757634e487b7160e01b600052602160045260246000fd5b14610613576000610615565b835b815260200160018360400151600181111561064057634e487b7160e01b600052602160045260246000fd5b1461064c57600061064e565b835b815260200160008360400151600181111561067957634e487b7160e01b600052602160045260246000fd5b14610685576000610687565b335b6001600160a01b031681526020016001836040015160018111156106bb57634e487b7160e01b600052602160045260246000fd5b146106c75760006106c9565b335b6001600160a01b0316815260200160008152602001600015158152602001600015158152602001600081525061011f610123548154811061071a57634e487b7160e01b600052603260045260246000fd5b6000918252602080832084516009909302019182558301516001820180546001600160a01b039283166001600160a01b0319918216179091556040850151600284015560608501516003840155608085015160048401805491841691831691909117905560a085015160058401805491909316911617905560c0830151600682015560e08301516007820180546101008087015115150261ff00199315159390931661ffff1990911617919091179055610120909201516008909201919091556101238054916107e983613237565b909155505061011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061082390339030908790600401612f65565b600060405180830381600087803b15801561083d57600080fd5b505af1158015610851573d6000803e3d6000fd5b505050505050565b61012354811061087b5760405162461bcd60e51b81526004016103e090613038565b600061011f828154811061089f57634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600990920201908101549091506001600160a01b03163314806108da575060048101546001600160a01b031633145b806108f1575060058101546001600160a01b031633145b61090d5760405162461bcd60e51b81526004016103e0906130e8565b4261011d548260060154610921919061319e565b111561093f5760405162461bcd60e51b81526004016103e090613098565b600781015460ff166109635760405162461bcd60e51b81526004016103e0906130f8565b61011b5460018201546002830154600384015460405163029b093760e31b81526001600160a01b03948516946314d849b8946109a6949116929091600401612f8d565b600060405180830381600087803b1580156109c057600080fd5b505af11580156109d4573d6000803e3d6000fd5b505050506007810154610100900460ff1615610b33576000610120826008015481548110610a1257634e487b7160e01b600052603260045260246000fd5b6000918252602090912060026005909202018181015460048201805460ff1916600117905591840154909250811415610abc5761011b54600584015460038501546040516323b872dd60e01b81526001600160a01b03938416936323b872dd93610a859330939290911691600401612f65565b600060405180830381600087803b158015610a9f57600080fd5b505af1158015610ab3573d6000803e3d6000fd5b50505050610b2c565b61011b5460048085015460028601546040516323b872dd60e01b81526001600160a01b03948516946323b872dd94610af994309492169201612f65565b600060405180830381600087803b158015610b1357600080fd5b505af1158015610b27573d6000803e3d6000fd5b505050505b5050610c13565b61011b5460048083015460028401546040516323b872dd60e01b81526001600160a01b03948516946323b872dd94610b7094309492169201612f65565b600060405180830381600087803b158015610b8a57600080fd5b505af1158015610b9e573d6000803e3d6000fd5b505061011b54600584015460038501546040516323b872dd60e01b81526001600160a01b0393841695506323b872dd9450610be0933093169190600401612f65565b600060405180830381600087803b158015610bfa57600080fd5b505af1158015610c0e573d6000803e3d6000fd5b505050505b600060028201819055600382018190556001820180546001600160a01b031990811690915560078301805460ff1916905560068301919091556004820180548216905560059091018054909116905550565b610124548210610c875760405162461bcd60e51b81526004016103e0906130b8565b610c90826119e9565b610cac5760405162461bcd60e51b81526004016103e0906130d8565b60006101208381548110610cd057634e487b7160e01b600052603260045260246000fd5b6000918252602090912061011b54600590920201600281015460405163020604bf60e21b815291935030926001600160a01b03169163081812fc91610d1791600401613128565b60206040518083038186803b158015610d2f57600080fd5b505afa158015610d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d679190612833565b6001600160a01b031614610d8d5760405162461bcd60e51b81526004016103e0906130a8565b600181015461011b5460028301546040516331a9108f60e11b81526001600160a01b039384169390921691636352211e91610dca91600401613128565b60206040518083038186803b158015610de257600080fd5b505afa158015610df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1a9190612833565b6001600160a01b031614610e405760405162461bcd60e51b81526004016103e090612fd8565b61011e5460ff166003811115610e6657634e487b7160e01b600052602160045260246000fd5b61011b54600283015460405163071b804560e11b81526001600160a01b0390921691630e37008a91610e9a91600401613128565b60206040518083038186803b158015610eb257600080fd5b505afa158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea9190612851565b6003811115610f0957634e487b7160e01b600052602160045260246000fd5b1015610f275760405162461bcd60e51b81526004016103e090613068565b61011b54600282015460405163e0bb933b60e01b81526000926001600160a01b03169163e0bb933b91610f5d9190600401613128565b60006040518083038186803b158015610f7557600080fd5b505afa158015610f89573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fb1919081019061286f565b9050600061011f8481548110610fd757634e487b7160e01b600052603260045260246000fd5b60009182526020909120600990910201600481015460058201549192506001600160a01b0390811691168115158061101757506001600160a01b03811615155b6110335760405162461bcd60e51b81526004016103e090612ff8565b6001600160a01b038216158061105057506001600160a01b038116155b61106c5760405162461bcd60e51b81526004016103e090612ff8565b6001600160a01b038216156110f3576001846040015160018111156110a157634e487b7160e01b600052602160045260246000fd5b146110be5760405162461bcd60e51b81526004016103e090613058565b60018501546005840180546001600160a01b0319166001600160a01b0390921691909117905560028501546003840155611167565b60008460400151600181111561111957634e487b7160e01b600052602160045260246000fd5b146111365760405162461bcd60e51b81526004016103e090613058565b60018501546004840180546001600160a01b0319166001600160a01b03909216919091179055600280860154908401555b611174856003015461250b565b6003850154156111c057600185015460038601546040516001600160a01b039092169181156108fc0291906000818181858888f193505050501580156111be573d6000803e3d6000fd5b505b61011b54600186015460028701546040516323b872dd60e01b81526001600160a01b03938416936323b872dd936111ff93911691309190600401612f65565b600060405180830381600087803b15801561121957600080fd5b505af115801561122d573d6000803e3d6000fd5b505084546002880154600090815261012260205260409020555050426006840155505060078101805461ffff191661010117905560080193909355600401805460ff191690555050565b6000546001600160a01b031633146112a15760405162461bcd60e51b81526004016103e0906130c8565b6112ab600061256d565b565b61011b5460405163020604bf60e21b815230916001600160a01b03169063081812fc906112de908690600401613128565b60206040518083038186803b1580156112f657600080fd5b505afa15801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e9190612833565b6001600160a01b0316146113545760405162461bcd60e51b81526004016103e0906130a8565b61135d82611c94565b6113795760405162461bcd60e51b81526004016103e090613078565b61011e5460ff16600381111561139f57634e487b7160e01b600052602160045260246000fd5b61011b5460405163071b804560e11b81526001600160a01b0390911690630e37008a906113d0908690600401613128565b60206040518083038186803b1580156113e857600080fd5b505afa1580156113fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114209190612851565b600381111561143f57634e487b7160e01b600052602160045260246000fd5b101561145d5760405162461bcd60e51b81526004016103e090613068565b6101245460008381526101216020908152604091829020839055815160a0810183528381523391810191909152908101849052606081018390526001608082015261012080549192909181106114c357634e487b7160e01b600052603260045260246000fd5b600091825260208083208451600593909302019182558301516001820180546001600160a01b0319166001600160a01b0390921691909117905560408301516002820155606083015160038201556080909201516004909201805460ff19169215159290921790915561012480549161153b83613237565b91905055505050565b606060006101245467ffffffffffffffff81111561157257634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156115e057816020015b6115cd6040518060a001604052806000815260200160006001600160a01b0316815260200160008152602001600081526020016000151581525090565b8152602001906001900390816115905790505b5090506000805b825181101561167457600083828151811061161257634e487b7160e01b600052603260045260246000fd5b60200260200101519050806080015115611661578084848151811061164757634e487b7160e01b600052603260045260246000fd5b6020026020010181905250828061165d90613237565b9350505b508061166c81613237565b9150506115e7565b509092915050565b61012354811061169e5760405162461bcd60e51b81526004016103e090613038565b600061011f82815481106116c257634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600990920201908101549091506001600160a01b031633146117025760405162461bcd60e51b81526004016103e090613048565b6007810154610100900460ff16156117b157600061012082600801548154811061173c57634e487b7160e01b600052603260045260246000fd5b600091825260209091206004600590920201908101805460ff191660011790556002808201549084015491925090811415610abc5761011b54600584015460038501546040516323b872dd60e01b81526001600160a01b03938416936323b872dd93610a859330939290911691600401612f65565b60048101546001600160a01b0316156118345761011b5460048083015460028401546040516323b872dd60e01b81526001600160a01b03948516946323b872dd9461180194309492169201612f65565b600060405180830381600087803b15801561181b57600080fd5b505af115801561182f573d6000803e3d6000fd5b505050505b60058101546001600160a01b031615610c135761011b54600582015460038301546040516323b872dd60e01b81526001600160a01b03938416936323b872dd93610be09330939290911691600401612f65565b6101245481106118a95760405162461bcd60e51b81526004016103e0906130b8565b600061012082815481106118cd57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502019050600061011f610122600084600201548152602001908152602001600020548154811061191957634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101408101825260099093029091018054835260018101546001600160a01b039081169484019490945260028101549183019190915260038101546060830152600481015483166080830152600581015490921660a0820152600682015460c0820152600782015460ff80821615801560e08501526101009283900490911615159183019190915260089092015461012082015291506119da5760405162461bcd60e51b81526004016103e090613118565b50600401805460ff1916905550565b6000610124548210611a0d5760405162461bcd60e51b81526004016103e090613088565b60006101208381548110611a3157634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101825260059093029091018054835260018101546001600160a01b0316938301939093526002830154908201526003820154606082015260049091015460ff1615801560808301819052919250611aa25750611aa28160400151611c94565b9392505050565b606060006101235467ffffffffffffffff811115611ad757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611b5657816020015b604080516101408101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201528252600019909201910181611af55790505b5090506000805b61011f54811015611c8b57600061011f8281548110611b8c57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101408101825260099093029091018054835260018101546001600160a01b03908116948401859052600282015492840192909252600381015460608401526004810154821660808401526005810154821660a0840152600681015460c0840152600781015460ff808216151560e08601526101009182900416151590840152600801546101208301529092508716148015611c3857508060e001515b15611c785780848481518110611c5e57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508280611c7490613237565b9350505b5080611c8381613237565b915050611b5d565b50909392505050565b61011b5460405163e0bb933b60e01b815260009182916001600160a01b039091169063e0bb933b90611cca908690600401613128565b60006040518083038186803b158015611ce257600080fd5b505afa158015611cf6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d1e919081019061286f565b9050600081604001516001811115611d4657634e487b7160e01b600052602160045260246000fd5b1415611d555750600192915050565b4261011c548260a00151611d69919061319e565b11159392505050565b61011b546040516331a9108f60e11b815233916001600160a01b031690636352211e90611da3908690600401613128565b60206040518083038186803b158015611dbb57600080fd5b505afa158015611dcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df39190612833565b6001600160a01b031614611e195760405162461bcd60e51b81526004016103e090612fe8565b61011b546040516331a9108f60e11b815233916001600160a01b031690636352211e90611e4a908590600401613128565b60206040518083038186803b158015611e6257600080fd5b505afa158015611e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9a9190612833565b6001600160a01b031614611ec05760405162461bcd60e51b81526004016103e090612fe8565b61011e5460ff166003811115611ee657634e487b7160e01b600052602160045260246000fd5b61011b5460405163071b804560e11b81526001600160a01b0390911690630e37008a90611f17908690600401613128565b60206040518083038186803b158015611f2f57600080fd5b505afa158015611f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f679190612851565b6003811115611f8657634e487b7160e01b600052602160045260246000fd5b1015611fa45760405162461bcd60e51b81526004016103e090613068565b61011e5460ff166003811115611fca57634e487b7160e01b600052602160045260246000fd5b61011b5460405163071b804560e11b81526001600160a01b0390911690630e37008a90611ffb908590600401613128565b60206040518083038186803b15801561201357600080fd5b505afa158015612027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204b9190612851565b600381111561206a57634e487b7160e01b600052602160045260246000fd5b10156120885760405162461bcd60e51b81526004016103e090613068565b61011b5460405163e0bb933b60e01b81526000916001600160a01b03169063e0bb933b906120ba908690600401613128565b60006040518083038186803b1580156120d257600080fd5b505afa1580156120e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261210e919081019061286f565b61011b5460405163e0bb933b60e01b81529192506000916001600160a01b039091169063e0bb933b90612145908690600401613128565b60006040518083038186803b15801561215d57600080fd5b505afa158015612171573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612199919081019061286f565b9050806040015160018111156121bf57634e487b7160e01b600052602160045260246000fd5b826040015160018111156121e357634e487b7160e01b600052602160045260246000fd5b14156122015760405162461bcd60e51b81526004016103e090613028565b600080808460400151600181111561222957634e487b7160e01b600052602160045260246000fd5b141561223957508390508461223f565b50849050835b4261011c548460a00151612253919061319e565b11156122715760405162461bcd60e51b81526004016103e090613008565b6101235460008781526101226020908152604080832084905588835280832084905580516101408101825284815233928101839052908101859052606081018690526080810182905260a08101919091524260c0820152600160e0820152610100810182905261012081019190915261011f805491929091811061230557634e487b7160e01b600052603260045260246000fd5b6000918252602080832084516009909302019182558301516001820180546001600160a01b039283166001600160a01b0319918216179091556040850151600284015560608501516003840155608085015160048401805491841691831691909117905560a085015160058401805491909316911617905560c0830151600682015560e08301516007820180546101008087015115150261ff00199315159390931661ffff1990911617919091179055610120909201516008909201919091556101238054916123d483613237565b909155505061011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061240e90339030908b90600401612f65565b600060405180830381600087803b15801561242857600080fd5b505af115801561243c573d6000803e3d6000fd5b505061011b546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd915061247590339030908a90600401612f65565b600060405180830381600087803b15801561248f57600080fd5b505af11580156124a3573d6000803e3d6000fd5b50505050505050505050565b6000546001600160a01b031633146124d95760405162461bcd60e51b81526004016103e0906130c8565b6001600160a01b0381166124ff5760405162461bcd60e51b81526004016103e090613018565b6125088161256d565b50565b8034101561252b5760405162461bcd60e51b81526004016103e090613108565b8034111561250857336108fc61254183346131b6565b6040518115909202916000818181858888f19350505050158015612569573d6000803e3d6000fd5b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006125d06125cb84613152565b613136565b905080828560208602820111156125e657600080fd5b60005b8581101561261257816125fc888261280a565b84525060209283019291909101906001016125e9565b5050509392505050565b600061262a6125cb84613173565b90508281526020810184848401111561264257600080fd5b61264d8482856131de565b509392505050565b80356126608161327e565b92915050565b80516126608161327e565b600082601f83011261268257600080fd5b600761268f8482856125bd565b949350505050565b805161266081613292565b80516126608161329a565b8051612660816132a7565b8051612660816132b4565b600082601f8301126126d457600080fd5b815161268f84826020860161261c565b600061022082840312156126f757600080fd5b612702610160613136565b9050600061271084846126a2565b8252506020612721848483016126ad565b6020830152506040612735848285016126b8565b60408301525060606127498482850161280a565b606083015250608061275d84828501612697565b60808301525060a06127718482850161280a565b60a08301525060c06127858482850161280a565b60c08301525060e06127998482850161280a565b60e08301525061010082015167ffffffffffffffff8111156127ba57600080fd5b6127c6848285016126c3565b610100830152506101206127dc84828501612671565b610120830152506102006127f28482850161280a565b6101408301525092915050565b8035612660816132c1565b8051612660816132c1565b60006020828403121561282757600080fd5b600061268f8484612655565b60006020828403121561284557600080fd5b600061268f8484612666565b60006020828403121561286357600080fd5b600061268f84846126a2565b60006020828403121561288157600080fd5b815167ffffffffffffffff81111561289857600080fd5b61268f848285016126e4565b6000602082840312156128b657600080fd5b600061268f84846127ff565b600080604083850312156128d557600080fd5b60006128e185856127ff565b92505060206128f2858286016127ff565b9150509250929050565b60006129088383612e2d565b50506101400190565b600061291d8383612ef4565b505060a00190565b61292e816131cd565b82525050565b600061293e825190565b80845260209384019383018060005b8381101561297257815161296188826128fc565b97506020830192505060010161294d565b509495945050505050565b6000612987825190565b80845260209384019383018060005b838110156129725781516129aa8882612911565b975060208301925050600101612996565b80151561292e565b602981526000602082017f52656e7420647261676f6e2773206f776e65727368697020686173206265656e8152681031b430b733b2b21760b91b602082015291505b5060400190565b60208082527f596f7520617265206e6f74206f776e6572206f66207468697320746f6b656e2e910190815260005b5060200190565b602181526000602082017f54686973206272656564206c616e64206973206e6f7420617661696c61626c658152601760f91b60208201529150612a05565b602481526000602082017f4e6f7420617661696c61626c652072656272656564696e6720666f722066656d81526330b6329760e11b60208201529150612a05565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150612a05565b601a81526000602082017f47656e6465722073686f756c64206265206f70706f736974652e00000000000081529150612a3a565b601181526000602082017024b73b30b634b210313932b2b21024a21760791b81529150612a3a565b602481526000602082017f596f7520617265206e6f7420746865206f776e6572206f66207468697320627281526332b2b21760e11b60208201529150612a05565b602481526000602082017f447261676f6e732073686f756c642068617665206f70706f736974652067656e8152633232b91760e11b60208201529150612a05565b601981526000602082017f5468697320647261676f6e20697320746f6f20796f756e672e0000000000000081529150612a3a565b60208082527f5468697320647261676f6e206973206e6f742072656e7461626c65206e6f772e91019081526000612a3a565b601081526000602082016f24b73b30b634b2102932b73a1024a21760811b81529150612a3a565b601181526000602082017029ba34b6361034b731bab130ba34b7339760791b81529150612a3a565b600d81526000602082016c2737ba1030b8383937bb32b21760991b81529150612a3a565b601081526000602082016f24b73b30b634b2103932b73a1034b21760811b81529150612a3a565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000612a3a565b602581526000602082017f546869732072656e74206f72646572206973206e6f7420617661696c61626c65815264103737bb9760d91b60208201529150612a05565b602e81526000602082017f596f7520617265206e6f7420746865206f776e6572206f7220706172656e742081526d37b3103a3434b990313932b2b21760911b60208201529150612a05565b601a81526000602082017f596f75206e65656420746f20726571756573742066697273742e00000000000081529150612a3a565b60168152600060208201752732b2b2103a379039b2b7321036b7b9329022aa241760511b81529150612a3a565b6015815260006020820174223930b3b7b71034b99034b7103832b73234b7339760591b81529150612a3a565b8051610140830190612e3f8482612f51565b506020820151612e526020850182612925565b506040820151612e656040850182612f51565b506060820151612e786060850182612f51565b506080820151612e8b6080850182612925565b5060a0820151612e9e60a0850182612925565b5060c0820151612eb160c0850182612f51565b5060e0820151612ec460e08501826129bb565b50610100820151612ed96101008501826129bb565b50610120820151612eee610120850182612f51565b50505050565b805160a0830190612f058482612f51565b506020820151612f186020850182612925565b506040820151612f2b6040850182612f51565b506060820151612f3e6060850182612f51565b506080820151612eee60808501826129bb565b8061292e565b602081016126608284612925565b60608101612f738286612925565b612f806020830185612925565b61268f6040830184612f51565b60608101612f9b8286612925565b612f806020830185612f51565b60208082528101611aa28184612934565b60208082528101611aa2818461297d565b6020810161266082846129bb565b60208082528101612660816129c3565b6020808252810161266081612a0c565b6020808252810161266081612a41565b6020808252810161266081612a7f565b6020808252810161266081612ac0565b6020808252810161266081612b03565b6020808252810161266081612b37565b6020808252810161266081612b5f565b6020808252810161266081612ba0565b6020808252810161266081612be1565b6020808252810161266081612c15565b6020808252810161266081612c47565b6020808252810161266081612c6e565b6020808252810161266081612c96565b6020808252810161266081612cba565b6020808252810161266081612ce1565b6020808252810161266081612d13565b6020808252810161266081612d55565b6020808252810161266081612da0565b6020808252810161266081612dd4565b6020808252810161266081612e01565b602081016126608284612f51565b600061314160405190565b905061314d828261320a565b919050565b600067ffffffffffffffff82111561316c5761316c613268565b5060200290565b600067ffffffffffffffff82111561318d5761318d613268565b601f19601f83011660200192915050565b600082198211156131b1576131b1613252565b500190565b6000828210156131c8576131c8613252565b500390565b60006001600160a01b038216612660565b60005b838110156131f95781810151838201526020016131e1565b83811115612eee5750506000910152565b601f19601f830116810181811067ffffffffffffffff8211171561323057613230613268565b6040525050565b600060001982141561324b5761324b613252565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b613287816131cd565b811461250857600080fd5b801515613287565b6004811061250857600080fd5b6005811061250857600080fd5b6002811061250857600080fd5b8061328756fea2646970667358221220035c48aa8dd3a55bf147336ea17d12542b089cbac14b911c460495bc1c45da1a64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c806390d075a311610095578063b1b7c57b11610064578063b1b7c57b14610295578063c392598d146102c2578063c4418694146102e2578063e608eb1f14610302578063f2fde38b1461031957600080fd5b806390d075a3146102065780639c2d14d514610228578063aacb088014610248578063abdfe8de1461026857600080fd5b8063715018a6116100d1578063715018a61461018f5780637acea57f146101a45780637c2654f6146101c45780638da5cb5b146101e857600080fd5b806328b30f2a146101035780632938ad50146101255780635e3af92f1461015c57806367edd7cb1461017c575b600080fd5b34801561010f57600080fd5b5061012361011e3660046128a4565b610339565b005b34801561013157600080fd5b5061011b54610146906001600160a01b031681565b6040516101539190612f57565b60405180910390f35b34801561016857600080fd5b506101236101773660046128a4565b610859565b61012361018a3660046128c2565b610c65565b34801561019b57600080fd5b50610123611277565b3480156101b057600080fd5b506101236101bf3660046128c2565b6112ad565b3480156101d057600080fd5b506101db6101245481565b6040516101539190613128565b3480156101f457600080fd5b506000546001600160a01b0316610146565b34801561021257600080fd5b5061021b611544565b6040516101539190612fb9565b34801561023457600080fd5b506101236102433660046128a4565b61167c565b34801561025457600080fd5b506101236102633660046128a4565b611887565b34801561027457600080fd5b506102886102833660046128a4565b6119e9565b6040516101539190612fca565b3480156102a157600080fd5b506102b56102b0366004612815565b611aa9565b6040516101539190612fa8565b3480156102ce57600080fd5b506102886102dd3660046128a4565b611c94565b3480156102ee57600080fd5b506101236102fd3660046128c2565b611d72565b34801561030e57600080fd5b506101db6101235481565b34801561032557600080fd5b50610123610334366004612815565b6124af565b61011b546040516331a9108f60e11b815233916001600160a01b031690636352211e9061036a908590600401613128565b60206040518083038186803b15801561038257600080fd5b505afa158015610396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ba9190612833565b6001600160a01b0316146103e95760405162461bcd60e51b81526004016103e090612fe8565b60405180910390fd5b61011e5460ff16600381111561040f57634e487b7160e01b600052602160045260246000fd5b61011b5460405163071b804560e11b81526001600160a01b0390911690630e37008a90610440908590600401613128565b60206040518083038186803b15801561045857600080fd5b505afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104909190612851565b60038111156104af57634e487b7160e01b600052602160045260246000fd5b10156104cd5760405162461bcd60e51b81526004016103e090613068565b61011b5460405163e0bb933b60e01b81526000916001600160a01b03169063e0bb933b906104ff908590600401613128565b60006040518083038186803b15801561051757600080fd5b505afa15801561052b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610553919081019061286f565b905060018160400151600181111561057b57634e487b7160e01b600052602160045260246000fd5b14156105b3574261011c548260a00151610595919061319e565b11156105b35760405162461bcd60e51b81526004016103e090613008565b6101235460008381526101226020908152604080832084905580516101408101825293845233918401919091528201908360400151600181111561060757634e487b7160e01b600052602160045260246000fd5b14610613576000610615565b835b815260200160018360400151600181111561064057634e487b7160e01b600052602160045260246000fd5b1461064c57600061064e565b835b815260200160008360400151600181111561067957634e487b7160e01b600052602160045260246000fd5b14610685576000610687565b335b6001600160a01b031681526020016001836040015160018111156106bb57634e487b7160e01b600052602160045260246000fd5b146106c75760006106c9565b335b6001600160a01b0316815260200160008152602001600015158152602001600015158152602001600081525061011f610123548154811061071a57634e487b7160e01b600052603260045260246000fd5b6000918252602080832084516009909302019182558301516001820180546001600160a01b039283166001600160a01b0319918216179091556040850151600284015560608501516003840155608085015160048401805491841691831691909117905560a085015160058401805491909316911617905560c0830151600682015560e08301516007820180546101008087015115150261ff00199315159390931661ffff1990911617919091179055610120909201516008909201919091556101238054916107e983613237565b909155505061011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061082390339030908790600401612f65565b600060405180830381600087803b15801561083d57600080fd5b505af1158015610851573d6000803e3d6000fd5b505050505050565b61012354811061087b5760405162461bcd60e51b81526004016103e090613038565b600061011f828154811061089f57634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600990920201908101549091506001600160a01b03163314806108da575060048101546001600160a01b031633145b806108f1575060058101546001600160a01b031633145b61090d5760405162461bcd60e51b81526004016103e0906130e8565b4261011d548260060154610921919061319e565b111561093f5760405162461bcd60e51b81526004016103e090613098565b600781015460ff166109635760405162461bcd60e51b81526004016103e0906130f8565b61011b5460018201546002830154600384015460405163029b093760e31b81526001600160a01b03948516946314d849b8946109a6949116929091600401612f8d565b600060405180830381600087803b1580156109c057600080fd5b505af11580156109d4573d6000803e3d6000fd5b505050506007810154610100900460ff1615610b33576000610120826008015481548110610a1257634e487b7160e01b600052603260045260246000fd5b6000918252602090912060026005909202018181015460048201805460ff1916600117905591840154909250811415610abc5761011b54600584015460038501546040516323b872dd60e01b81526001600160a01b03938416936323b872dd93610a859330939290911691600401612f65565b600060405180830381600087803b158015610a9f57600080fd5b505af1158015610ab3573d6000803e3d6000fd5b50505050610b2c565b61011b5460048085015460028601546040516323b872dd60e01b81526001600160a01b03948516946323b872dd94610af994309492169201612f65565b600060405180830381600087803b158015610b1357600080fd5b505af1158015610b27573d6000803e3d6000fd5b505050505b5050610c13565b61011b5460048083015460028401546040516323b872dd60e01b81526001600160a01b03948516946323b872dd94610b7094309492169201612f65565b600060405180830381600087803b158015610b8a57600080fd5b505af1158015610b9e573d6000803e3d6000fd5b505061011b54600584015460038501546040516323b872dd60e01b81526001600160a01b0393841695506323b872dd9450610be0933093169190600401612f65565b600060405180830381600087803b158015610bfa57600080fd5b505af1158015610c0e573d6000803e3d6000fd5b505050505b600060028201819055600382018190556001820180546001600160a01b031990811690915560078301805460ff1916905560068301919091556004820180548216905560059091018054909116905550565b610124548210610c875760405162461bcd60e51b81526004016103e0906130b8565b610c90826119e9565b610cac5760405162461bcd60e51b81526004016103e0906130d8565b60006101208381548110610cd057634e487b7160e01b600052603260045260246000fd5b6000918252602090912061011b54600590920201600281015460405163020604bf60e21b815291935030926001600160a01b03169163081812fc91610d1791600401613128565b60206040518083038186803b158015610d2f57600080fd5b505afa158015610d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d679190612833565b6001600160a01b031614610d8d5760405162461bcd60e51b81526004016103e0906130a8565b600181015461011b5460028301546040516331a9108f60e11b81526001600160a01b039384169390921691636352211e91610dca91600401613128565b60206040518083038186803b158015610de257600080fd5b505afa158015610df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1a9190612833565b6001600160a01b031614610e405760405162461bcd60e51b81526004016103e090612fd8565b61011e5460ff166003811115610e6657634e487b7160e01b600052602160045260246000fd5b61011b54600283015460405163071b804560e11b81526001600160a01b0390921691630e37008a91610e9a91600401613128565b60206040518083038186803b158015610eb257600080fd5b505afa158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea9190612851565b6003811115610f0957634e487b7160e01b600052602160045260246000fd5b1015610f275760405162461bcd60e51b81526004016103e090613068565b61011b54600282015460405163e0bb933b60e01b81526000926001600160a01b03169163e0bb933b91610f5d9190600401613128565b60006040518083038186803b158015610f7557600080fd5b505afa158015610f89573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fb1919081019061286f565b9050600061011f8481548110610fd757634e487b7160e01b600052603260045260246000fd5b60009182526020909120600990910201600481015460058201549192506001600160a01b0390811691168115158061101757506001600160a01b03811615155b6110335760405162461bcd60e51b81526004016103e090612ff8565b6001600160a01b038216158061105057506001600160a01b038116155b61106c5760405162461bcd60e51b81526004016103e090612ff8565b6001600160a01b038216156110f3576001846040015160018111156110a157634e487b7160e01b600052602160045260246000fd5b146110be5760405162461bcd60e51b81526004016103e090613058565b60018501546005840180546001600160a01b0319166001600160a01b0390921691909117905560028501546003840155611167565b60008460400151600181111561111957634e487b7160e01b600052602160045260246000fd5b146111365760405162461bcd60e51b81526004016103e090613058565b60018501546004840180546001600160a01b0319166001600160a01b03909216919091179055600280860154908401555b611174856003015461250b565b6003850154156111c057600185015460038601546040516001600160a01b039092169181156108fc0291906000818181858888f193505050501580156111be573d6000803e3d6000fd5b505b61011b54600186015460028701546040516323b872dd60e01b81526001600160a01b03938416936323b872dd936111ff93911691309190600401612f65565b600060405180830381600087803b15801561121957600080fd5b505af115801561122d573d6000803e3d6000fd5b505084546002880154600090815261012260205260409020555050426006840155505060078101805461ffff191661010117905560080193909355600401805460ff191690555050565b6000546001600160a01b031633146112a15760405162461bcd60e51b81526004016103e0906130c8565b6112ab600061256d565b565b61011b5460405163020604bf60e21b815230916001600160a01b03169063081812fc906112de908690600401613128565b60206040518083038186803b1580156112f657600080fd5b505afa15801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e9190612833565b6001600160a01b0316146113545760405162461bcd60e51b81526004016103e0906130a8565b61135d82611c94565b6113795760405162461bcd60e51b81526004016103e090613078565b61011e5460ff16600381111561139f57634e487b7160e01b600052602160045260246000fd5b61011b5460405163071b804560e11b81526001600160a01b0390911690630e37008a906113d0908690600401613128565b60206040518083038186803b1580156113e857600080fd5b505afa1580156113fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114209190612851565b600381111561143f57634e487b7160e01b600052602160045260246000fd5b101561145d5760405162461bcd60e51b81526004016103e090613068565b6101245460008381526101216020908152604091829020839055815160a0810183528381523391810191909152908101849052606081018390526001608082015261012080549192909181106114c357634e487b7160e01b600052603260045260246000fd5b600091825260208083208451600593909302019182558301516001820180546001600160a01b0319166001600160a01b0390921691909117905560408301516002820155606083015160038201556080909201516004909201805460ff19169215159290921790915561012480549161153b83613237565b91905055505050565b606060006101245467ffffffffffffffff81111561157257634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156115e057816020015b6115cd6040518060a001604052806000815260200160006001600160a01b0316815260200160008152602001600081526020016000151581525090565b8152602001906001900390816115905790505b5090506000805b825181101561167457600083828151811061161257634e487b7160e01b600052603260045260246000fd5b60200260200101519050806080015115611661578084848151811061164757634e487b7160e01b600052603260045260246000fd5b6020026020010181905250828061165d90613237565b9350505b508061166c81613237565b9150506115e7565b509092915050565b61012354811061169e5760405162461bcd60e51b81526004016103e090613038565b600061011f82815481106116c257634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600990920201908101549091506001600160a01b031633146117025760405162461bcd60e51b81526004016103e090613048565b6007810154610100900460ff16156117b157600061012082600801548154811061173c57634e487b7160e01b600052603260045260246000fd5b600091825260209091206004600590920201908101805460ff191660011790556002808201549084015491925090811415610abc5761011b54600584015460038501546040516323b872dd60e01b81526001600160a01b03938416936323b872dd93610a859330939290911691600401612f65565b60048101546001600160a01b0316156118345761011b5460048083015460028401546040516323b872dd60e01b81526001600160a01b03948516946323b872dd9461180194309492169201612f65565b600060405180830381600087803b15801561181b57600080fd5b505af115801561182f573d6000803e3d6000fd5b505050505b60058101546001600160a01b031615610c135761011b54600582015460038301546040516323b872dd60e01b81526001600160a01b03938416936323b872dd93610be09330939290911691600401612f65565b6101245481106118a95760405162461bcd60e51b81526004016103e0906130b8565b600061012082815481106118cd57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502019050600061011f610122600084600201548152602001908152602001600020548154811061191957634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101408101825260099093029091018054835260018101546001600160a01b039081169484019490945260028101549183019190915260038101546060830152600481015483166080830152600581015490921660a0820152600682015460c0820152600782015460ff80821615801560e08501526101009283900490911615159183019190915260089092015461012082015291506119da5760405162461bcd60e51b81526004016103e090613118565b50600401805460ff1916905550565b6000610124548210611a0d5760405162461bcd60e51b81526004016103e090613088565b60006101208381548110611a3157634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160a08101825260059093029091018054835260018101546001600160a01b0316938301939093526002830154908201526003820154606082015260049091015460ff1615801560808301819052919250611aa25750611aa28160400151611c94565b9392505050565b606060006101235467ffffffffffffffff811115611ad757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611b5657816020015b604080516101408101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201528252600019909201910181611af55790505b5090506000805b61011f54811015611c8b57600061011f8281548110611b8c57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020604080516101408101825260099093029091018054835260018101546001600160a01b03908116948401859052600282015492840192909252600381015460608401526004810154821660808401526005810154821660a0840152600681015460c0840152600781015460ff808216151560e08601526101009182900416151590840152600801546101208301529092508716148015611c3857508060e001515b15611c785780848481518110611c5e57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508280611c7490613237565b9350505b5080611c8381613237565b915050611b5d565b50909392505050565b61011b5460405163e0bb933b60e01b815260009182916001600160a01b039091169063e0bb933b90611cca908690600401613128565b60006040518083038186803b158015611ce257600080fd5b505afa158015611cf6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d1e919081019061286f565b9050600081604001516001811115611d4657634e487b7160e01b600052602160045260246000fd5b1415611d555750600192915050565b4261011c548260a00151611d69919061319e565b11159392505050565b61011b546040516331a9108f60e11b815233916001600160a01b031690636352211e90611da3908690600401613128565b60206040518083038186803b158015611dbb57600080fd5b505afa158015611dcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df39190612833565b6001600160a01b031614611e195760405162461bcd60e51b81526004016103e090612fe8565b61011b546040516331a9108f60e11b815233916001600160a01b031690636352211e90611e4a908590600401613128565b60206040518083038186803b158015611e6257600080fd5b505afa158015611e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9a9190612833565b6001600160a01b031614611ec05760405162461bcd60e51b81526004016103e090612fe8565b61011e5460ff166003811115611ee657634e487b7160e01b600052602160045260246000fd5b61011b5460405163071b804560e11b81526001600160a01b0390911690630e37008a90611f17908690600401613128565b60206040518083038186803b158015611f2f57600080fd5b505afa158015611f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f679190612851565b6003811115611f8657634e487b7160e01b600052602160045260246000fd5b1015611fa45760405162461bcd60e51b81526004016103e090613068565b61011e5460ff166003811115611fca57634e487b7160e01b600052602160045260246000fd5b61011b5460405163071b804560e11b81526001600160a01b0390911690630e37008a90611ffb908590600401613128565b60206040518083038186803b15801561201357600080fd5b505afa158015612027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204b9190612851565b600381111561206a57634e487b7160e01b600052602160045260246000fd5b10156120885760405162461bcd60e51b81526004016103e090613068565b61011b5460405163e0bb933b60e01b81526000916001600160a01b03169063e0bb933b906120ba908690600401613128565b60006040518083038186803b1580156120d257600080fd5b505afa1580156120e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261210e919081019061286f565b61011b5460405163e0bb933b60e01b81529192506000916001600160a01b039091169063e0bb933b90612145908690600401613128565b60006040518083038186803b15801561215d57600080fd5b505afa158015612171573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612199919081019061286f565b9050806040015160018111156121bf57634e487b7160e01b600052602160045260246000fd5b826040015160018111156121e357634e487b7160e01b600052602160045260246000fd5b14156122015760405162461bcd60e51b81526004016103e090613028565b600080808460400151600181111561222957634e487b7160e01b600052602160045260246000fd5b141561223957508390508461223f565b50849050835b4261011c548460a00151612253919061319e565b11156122715760405162461bcd60e51b81526004016103e090613008565b6101235460008781526101226020908152604080832084905588835280832084905580516101408101825284815233928101839052908101859052606081018690526080810182905260a08101919091524260c0820152600160e0820152610100810182905261012081019190915261011f805491929091811061230557634e487b7160e01b600052603260045260246000fd5b6000918252602080832084516009909302019182558301516001820180546001600160a01b039283166001600160a01b0319918216179091556040850151600284015560608501516003840155608085015160048401805491841691831691909117905560a085015160058401805491909316911617905560c0830151600682015560e08301516007820180546101008087015115150261ff00199315159390931661ffff1990911617919091179055610120909201516008909201919091556101238054916123d483613237565b909155505061011b546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061240e90339030908b90600401612f65565b600060405180830381600087803b15801561242857600080fd5b505af115801561243c573d6000803e3d6000fd5b505061011b546040516323b872dd60e01b81526001600160a01b0390911692506323b872dd915061247590339030908a90600401612f65565b600060405180830381600087803b15801561248f57600080fd5b505af11580156124a3573d6000803e3d6000fd5b50505050505050505050565b6000546001600160a01b031633146124d95760405162461bcd60e51b81526004016103e0906130c8565b6001600160a01b0381166124ff5760405162461bcd60e51b81526004016103e090613018565b6125088161256d565b50565b8034101561252b5760405162461bcd60e51b81526004016103e090613108565b8034111561250857336108fc61254183346131b6565b6040518115909202916000818181858888f19350505050158015612569573d6000803e3d6000fd5b5050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006125d06125cb84613152565b613136565b905080828560208602820111156125e657600080fd5b60005b8581101561261257816125fc888261280a565b84525060209283019291909101906001016125e9565b5050509392505050565b600061262a6125cb84613173565b90508281526020810184848401111561264257600080fd5b61264d8482856131de565b509392505050565b80356126608161327e565b92915050565b80516126608161327e565b600082601f83011261268257600080fd5b600761268f8482856125bd565b949350505050565b805161266081613292565b80516126608161329a565b8051612660816132a7565b8051612660816132b4565b600082601f8301126126d457600080fd5b815161268f84826020860161261c565b600061022082840312156126f757600080fd5b612702610160613136565b9050600061271084846126a2565b8252506020612721848483016126ad565b6020830152506040612735848285016126b8565b60408301525060606127498482850161280a565b606083015250608061275d84828501612697565b60808301525060a06127718482850161280a565b60a08301525060c06127858482850161280a565b60c08301525060e06127998482850161280a565b60e08301525061010082015167ffffffffffffffff8111156127ba57600080fd5b6127c6848285016126c3565b610100830152506101206127dc84828501612671565b610120830152506102006127f28482850161280a565b6101408301525092915050565b8035612660816132c1565b8051612660816132c1565b60006020828403121561282757600080fd5b600061268f8484612655565b60006020828403121561284557600080fd5b600061268f8484612666565b60006020828403121561286357600080fd5b600061268f84846126a2565b60006020828403121561288157600080fd5b815167ffffffffffffffff81111561289857600080fd5b61268f848285016126e4565b6000602082840312156128b657600080fd5b600061268f84846127ff565b600080604083850312156128d557600080fd5b60006128e185856127ff565b92505060206128f2858286016127ff565b9150509250929050565b60006129088383612e2d565b50506101400190565b600061291d8383612ef4565b505060a00190565b61292e816131cd565b82525050565b600061293e825190565b80845260209384019383018060005b8381101561297257815161296188826128fc565b97506020830192505060010161294d565b509495945050505050565b6000612987825190565b80845260209384019383018060005b838110156129725781516129aa8882612911565b975060208301925050600101612996565b80151561292e565b602981526000602082017f52656e7420647261676f6e2773206f776e65727368697020686173206265656e8152681031b430b733b2b21760b91b602082015291505b5060400190565b60208082527f596f7520617265206e6f74206f776e6572206f66207468697320746f6b656e2e910190815260005b5060200190565b602181526000602082017f54686973206272656564206c616e64206973206e6f7420617661696c61626c658152601760f91b60208201529150612a05565b602481526000602082017f4e6f7420617661696c61626c652072656272656564696e6720666f722066656d81526330b6329760e11b60208201529150612a05565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150612a05565b601a81526000602082017f47656e6465722073686f756c64206265206f70706f736974652e00000000000081529150612a3a565b601181526000602082017024b73b30b634b210313932b2b21024a21760791b81529150612a3a565b602481526000602082017f596f7520617265206e6f7420746865206f776e6572206f66207468697320627281526332b2b21760e11b60208201529150612a05565b602481526000602082017f447261676f6e732073686f756c642068617665206f70706f736974652067656e8152633232b91760e11b60208201529150612a05565b601981526000602082017f5468697320647261676f6e20697320746f6f20796f756e672e0000000000000081529150612a3a565b60208082527f5468697320647261676f6e206973206e6f742072656e7461626c65206e6f772e91019081526000612a3a565b601081526000602082016f24b73b30b634b2102932b73a1024a21760811b81529150612a3a565b601181526000602082017029ba34b6361034b731bab130ba34b7339760791b81529150612a3a565b600d81526000602082016c2737ba1030b8383937bb32b21760991b81529150612a3a565b601081526000602082016f24b73b30b634b2103932b73a1034b21760811b81529150612a3a565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000612a3a565b602581526000602082017f546869732072656e74206f72646572206973206e6f7420617661696c61626c65815264103737bb9760d91b60208201529150612a05565b602e81526000602082017f596f7520617265206e6f7420746865206f776e6572206f7220706172656e742081526d37b3103a3434b990313932b2b21760911b60208201529150612a05565b601a81526000602082017f596f75206e65656420746f20726571756573742066697273742e00000000000081529150612a3a565b60168152600060208201752732b2b2103a379039b2b7321036b7b9329022aa241760511b81529150612a3a565b6015815260006020820174223930b3b7b71034b99034b7103832b73234b7339760591b81529150612a3a565b8051610140830190612e3f8482612f51565b506020820151612e526020850182612925565b506040820151612e656040850182612f51565b506060820151612e786060850182612f51565b506080820151612e8b6080850182612925565b5060a0820151612e9e60a0850182612925565b5060c0820151612eb160c0850182612f51565b5060e0820151612ec460e08501826129bb565b50610100820151612ed96101008501826129bb565b50610120820151612eee610120850182612f51565b50505050565b805160a0830190612f058482612f51565b506020820151612f186020850182612925565b506040820151612f2b6040850182612f51565b506060820151612f3e6060850182612f51565b506080820151612eee60808501826129bb565b8061292e565b602081016126608284612925565b60608101612f738286612925565b612f806020830185612925565b61268f6040830184612f51565b60608101612f9b8286612925565b612f806020830185612f51565b60208082528101611aa28184612934565b60208082528101611aa2818461297d565b6020810161266082846129bb565b60208082528101612660816129c3565b6020808252810161266081612a0c565b6020808252810161266081612a41565b6020808252810161266081612a7f565b6020808252810161266081612ac0565b6020808252810161266081612b03565b6020808252810161266081612b37565b6020808252810161266081612b5f565b6020808252810161266081612ba0565b6020808252810161266081612be1565b6020808252810161266081612c15565b6020808252810161266081612c47565b6020808252810161266081612c6e565b6020808252810161266081612c96565b6020808252810161266081612cba565b6020808252810161266081612ce1565b6020808252810161266081612d13565b6020808252810161266081612d55565b6020808252810161266081612da0565b6020808252810161266081612dd4565b6020808252810161266081612e01565b602081016126608284612f51565b600061314160405190565b905061314d828261320a565b919050565b600067ffffffffffffffff82111561316c5761316c613268565b5060200290565b600067ffffffffffffffff82111561318d5761318d613268565b601f19601f83011660200192915050565b600082198211156131b1576131b1613252565b500190565b6000828210156131c8576131c8613252565b500390565b60006001600160a01b038216612660565b60005b838110156131f95781810151838201526020016131e1565b83811115612eee5750506000910152565b601f19601f830116810181811067ffffffffffffffff8211171561323057613230613268565b6040525050565b600060001982141561324b5761324b613252565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b613287816131cd565b811461250857600080fd5b801515613287565b6004811061250857600080fd5b6005811061250857600080fd5b6002811061250857600080fd5b8061328756fea2646970667358221220035c48aa8dd3a55bf147336ea17d12542b089cbac14b911c460495bc1c45da1a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8500,
        "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
        "label": "ageLimitInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_enum(Age)8448,t_uint256)"
      },
      {
        "astId": 8510,
        "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
        "label": "stateRanges",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_array(t_array(t_array(t_uint256)2_storage)7_storage)4_storage)5_storage"
      },
      {
        "astId": 115,
        "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
        "label": "_status",
        "offset": 0,
        "slot": "282",
        "type": "t_uint256"
      },
      {
        "astId": 5276,
        "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
        "label": "dragonNFTAddress",
        "offset": 0,
        "slot": "283",
        "type": "t_address"
      },
      {
        "astId": 5279,
        "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
        "label": "durationRebreeding",
        "offset": 0,
        "slot": "284",
        "type": "t_uint256"
      },
      {
        "astId": 5282,
        "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
        "label": "duration",
        "offset": 0,
        "slot": "285",
        "type": "t_uint256"
      },
      {
        "astId": 5287,
        "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
        "label": "minAgeForBreeding",
        "offset": 0,
        "slot": "286",
        "type": "t_enum(Age)8448"
      },
      {
        "astId": 5291,
        "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
        "label": "breedlands",
        "offset": 0,
        "slot": "287",
        "type": "t_array(t_struct(BreedLand)5263_storage)dyn_storage"
      },
      {
        "astId": 5295,
        "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
        "label": "rentOrders",
        "offset": 0,
        "slot": "288",
        "type": "t_array(t_struct(RentOrder)5274_storage)dyn_storage"
      },
      {
        "astId": 5299,
        "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
        "label": "rentIDs",
        "offset": 0,
        "slot": "289",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5303,
        "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
        "label": "breedIDs",
        "offset": 0,
        "slot": "290",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5305,
        "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
        "label": "breedCount",
        "offset": 0,
        "slot": "291",
        "type": "t_uint256"
      },
      {
        "astId": 5307,
        "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
        "label": "rentCount",
        "offset": 0,
        "slot": "292",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_array(t_array(t_uint256)2_storage)7_storage)4_storage)5_storage": {
        "base": "t_array(t_array(t_array(t_uint256)2_storage)7_storage)4_storage",
        "encoding": "inplace",
        "label": "uint256[2][7][4][5]",
        "numberOfBytes": "8960"
      },
      "t_array(t_array(t_array(t_uint256)2_storage)7_storage)4_storage": {
        "base": "t_array(t_array(t_uint256)2_storage)7_storage",
        "encoding": "inplace",
        "label": "uint256[2][7][4]",
        "numberOfBytes": "1792"
      },
      "t_array(t_array(t_uint256)2_storage)7_storage": {
        "base": "t_array(t_uint256)2_storage",
        "encoding": "inplace",
        "label": "uint256[2][7]",
        "numberOfBytes": "448"
      },
      "t_array(t_struct(BreedLand)5263_storage)dyn_storage": {
        "base": "t_struct(BreedLand)5263_storage",
        "encoding": "dynamic_array",
        "label": "struct DragonBreedingManager.BreedLand[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RentOrder)5274_storage)dyn_storage": {
        "base": "t_struct(RentOrder)5274_storage",
        "encoding": "dynamic_array",
        "label": "struct DragonBreedingManager.RentOrder[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Age)8448": {
        "encoding": "inplace",
        "label": "enum DragonBasic.Age",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(Age)8448,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Age)8448",
        "label": "mapping(enum DragonBasic.Age => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BreedLand)5263_storage": {
        "encoding": "inplace",
        "label": "struct DragonBreedingManager.BreedLand",
        "members": [
          {
            "astId": 5244,
            "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5246,
            "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5248,
            "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
            "label": "father",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5250,
            "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
            "label": "mother",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5252,
            "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
            "label": "fatherOwner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5254,
            "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
            "label": "motherOwner",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5256,
            "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
            "label": "startAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5258,
            "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
            "label": "pending",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 5260,
            "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
            "label": "isRent",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 5262,
            "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
            "label": "rentOrder",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(RentOrder)5274_storage": {
        "encoding": "inplace",
        "label": "struct DragonBreedingManager.RentOrder",
        "members": [
          {
            "astId": 5265,
            "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5267,
            "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5269,
            "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5271,
            "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5273,
            "contract": "contracts/DragonBreedingManager.sol:DragonBreedingManager",
            "label": "enable",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}