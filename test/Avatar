import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import { expect } from "chai";
import { BigNumber, Contract } from "ethers";
import { ethers, getNamedAccounts, network,  } from "hardhat";
import ERC20ABI from '../data/ERC20';
import {assetMetadataUris, initSates, metadataUris, names} from '../data/AvatarData';
import signMessage from '../utils/sign';
import { parseEther } from "@ethersproject/units";
import {Stat} from '../data/AvatarData';

let token: Contract;
let weth: Contract;
let avatar: Contract;
let avatarSaleManager: Contract;
let avatarUpdateManager: Contract;;
let avatarAssets: Contract;

let _signer: SignerWithAddress;
let other1: SignerWithAddress;
let other2: SignerWithAddress;

const maxBatchSize = 20;
const collectionSize = 1000;
let signature: any;

describe('Avatar', () => {
  
  const moveTime = async (timeInSeconds: number) => {
    await network.provider.send("evm_increaseTime", [timeInSeconds]);
    await network.provider.send("hardhat_mine", ["0x1"]);
  }

  beforeEach(async () => {
    _signer = (await ethers.getSigners())[0];
    other1 = (await ethers.getSigners())[1];
    other2 = (await ethers.getSigners())[2];

    const tokenFactory = await ethers.getContractFactory("PYRE"); 
    token = await tokenFactory.deploy(_signer.address, "0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff");
    await token.deployed();

    const avatarFactory = await ethers.getContractFactory('Avatar');
    avatar = await avatarFactory.deploy(maxBatchSize, collectionSize);
    await avatar.deployed();

    const avatarSaleManagerFactory = await ethers.getContractFactory('AvatarSaleManager');
    avatarSaleManager = await avatarSaleManagerFactory.deploy(avatar.address, token.address, _signer.address);
    await avatarSaleManager.deployed();

    const avatarUpdateManagerFactory = await ethers.getContractFactory('AvatarUpdateManager');
    avatarUpdateManager = await avatarUpdateManagerFactory.deploy(avatar.address, _signer.address);
    await avatarUpdateManager.deployed();

    const assetFactory = await ethers.getContractFactory('AvatarAssets');
    avatarAssets = await assetFactory.deploy(maxBatchSize, collectionSize, assetMetadataUris, token.address);
    await avatarAssets.deployed();
    
    await avatar.connect(_signer).addMinter(avatarSaleManager.address);
    await avatar.connect(_signer).addUpdater(avatarUpdateManager.address);

    await avatarSaleManager.connect(_signer).setPriceInEth(parseEther("10"));
    await avatarSaleManager.connect(_signer).setPriceInToken(parseEther("100"));

    await avatarUpdateManager.connect(_signer).setAssetNFTAddress(avatarAssets.address);
    
    signature = await signMessage(["address"], [_signer.address]);

  });

  it('Deploy: ', async () => {
    expect(await avatar.totalSupply()).to.be.equal(0);
    expect(await avatarUpdateManager.getSigner()).to.be.equal(_signer.address);
    expect(await avatarSaleManager.getSigner()).to.be.equal(_signer.address);
  });

  it('Mint Avatar NFT: ', async () => {
    await expect(avatarSaleManager.connect(_signer).mintNFT(5, initSates, metadataUris, signature, names)).revertedWith('Need to send more ETH.');

    await avatarSaleManager.connect(_signer).mintNFT(5, initSates, metadataUris, signature, names, {
      value: parseEther('50')
    });

    expect(await avatar.totalSupply()).to.be.equal(5);
    
    await token.connect(_signer).approve(avatarSaleManager.address, parseEther('100000'));
    await avatarSaleManager.connect(_signer).mintNFTWithToken(
      5,
      initSates,
      metadataUris,
      signature,
      names
    );

    expect(await avatar.totalSupply()).to.be.equal(10);
  })

  it ('Advance to Keeper in 1 week: ', async () => {
    await avatarSaleManager.connect(_signer).mintNFT(5, initSates, metadataUris, signature, names, {
      value: parseEther('50')
    });

    await avatar.connect(_signer).approve(avatarUpdateManager.address, 0);
    await avatarUpdateManager.connect(_signer).requestUpgradeToKeeper(0);
    expect(await avatar.isKeeper(0)).to.be.equal(false);

    await expect(avatarUpdateManager.connect(_signer).upgradeToKeeper(0, metadataUris[1], signature)).revertedWith('Not available now.');

    await moveTime(3600 * 24 * 7);
    await avatarUpdateManager.connect(_signer).upgradeToKeeper(0, metadataUris[1], signature);
    expect(await avatar.isKeeper(0)).to.be.equal(true);
  });

  it('Update Avatar Metadata: ', async () => {
    await avatarSaleManager.connect(_signer).mintNFT(5, initSates, metadataUris, signature, names, {
      value: parseEther('50')
    });

    await avatarAssets.connect(_signer).mintNFT(5, 0);

    expect(await avatar.tokenURI(0)).to.be.equal(metadataUris[0]);
    expect(await avatarAssets.ownerOf(1)).to.be.equal(_signer.address);

    await expect(avatarUpdateManager.connect(other1).updateMetadata(0, 0, 0, metadataUris[2], signature)).revertedWith('Invalid signature');

    await avatarAssets.connect(_signer).approve(avatarUpdateManager.address, 0);
    await avatarAssets.connect(_signer).approve(avatarUpdateManager.address, 1);

    await expect(avatarUpdateManager.connect(_signer).updateMetadata(0, 1, 0, metadataUris[2], signature)).revertedWith('Invalid asset token.');

    await avatarUpdateManager.connect(_signer).updateMetadata(0, 0, 1, metadataUris[2], signature);
    expect(await avatar.tokenURI(0)).to.be.equal(metadataUris[2]);
    expect(await avatarAssets.ownerOf(1)).to.be.equal(avatarUpdateManager.address);

    await avatarUpdateManager.connect(_signer).updateMetadata(0, 0, 0, metadataUris[3], signature);
    expect(await avatar.tokenURI(0)).to.be.equal(metadataUris[3]);
    expect(await avatarAssets.ownerOf(1)).to.be.equal(_signer.address);
    expect(await avatarAssets.ownerOf(0)).to.be.equal(avatarUpdateManager.address);

  });


  it('Upgreade Stats: ', async () => {
    await avatarSaleManager.connect(_signer).mintNFT(5, initSates, metadataUris, signature, names, {
      value: parseEther('50')
    });


    await avatar.connect(_signer).approve(avatarUpdateManager.address, 0);
    await avatarUpdateManager.connect(_signer).requestUpgradeState(0, [Stat.Agility, Stat.Charisma]);
    await moveTime(2* 3600 * 24);
    await avatarUpdateManager.connect(_signer).upgradeState(0, signature);

    await avatar.connect(_signer).approve(avatarUpdateManager.address, 3);
    await avatarUpdateManager.connect(_signer).requestUpgradeState(3, [Stat.Agility, Stat.Magic]);
    await moveTime(5* 3600 * 24);
    await avatarUpdateManager.connect(_signer).upgradeState(3, signature , {
      value: parseEther('15')
    });

    await avatar.connect(_signer).approve(avatarUpdateManager.address, 3);
    await avatarUpdateManager.connect(_signer).requestUpgradeState(3, [Stat.Agility, Stat.Magic]);
    await moveTime(1* 3600 * 24);
    await avatarUpdateManager.connect(_signer).upgradeState(3, signature, {
      value: parseEther('0')
    });

  })


});